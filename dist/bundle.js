!function(n){var e={};function t(r){if(e[r])return e[r].exports;var o=e[r]={i:r,l:!1,exports:{}};return n[r].call(o.exports,o,o.exports,t),o.l=!0,o.exports}t.m=n,t.c=e,t.d=function(n,e,r){t.o(n,e)||Object.defineProperty(n,e,{enumerable:!0,get:r})},t.r=function(n){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(n,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(n,"__esModule",{value:!0})},t.t=function(n,e){if(1&e&&(n=t(n)),8&e)return n;if(4&e&&"object"==typeof n&&n&&n.__esModule)return n;var r=Object.create(null);if(t.r(r),Object.defineProperty(r,"default",{enumerable:!0,value:n}),2&e&&"string"!=typeof n)for(var o in n)t.d(r,o,function(e){return n[e]}.bind(null,o));return r},t.n=function(n){var e=n&&n.__esModule?function(){return n.default}:function(){return n};return t.d(e,"a",e),e},t.o=function(n,e){return Object.prototype.hasOwnProperty.call(n,e)},t.p="",t(t.s=2)}([function(n,e){n.exports=function(n){var e=[];return e.toString=function(){return this.map(function(e){var t=function(n,e){var t=n[1]||"",r=n[3];if(!r)return t;if(e&&"function"==typeof btoa){var o=(a=r,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */"),i=r.sources.map(function(n){return"/*# sourceURL="+r.sourceRoot+n+" */"});return[t].concat(i).concat([o]).join("\n")}var a;return[t].join("\n")}(e,n);return e[2]?"@media "+e[2]+"{"+t+"}":t}).join("")},e.i=function(n,t){"string"==typeof n&&(n=[[null,n,""]]);for(var r={},o=0;o<this.length;o++){var i=this[o][0];"number"==typeof i&&(r[i]=!0)}for(o=0;o<n.length;o++){var a=n[o];"number"==typeof a[0]&&r[a[0]]||(t&&!a[2]?a[2]=t:t&&(a[2]="("+a[2]+") and ("+t+")"),e.push(a))}},e}},function(n,e,t){var r,o,i={},a=(r=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===o&&(o=r.apply(this,arguments)),o}),f=function(n){var e={};return function(n,t){if("function"==typeof n)return n();if(void 0===e[n]){var r=function(n,e){return e?e.querySelector(n):document.querySelector(n)}.call(this,n,t);if(window.HTMLIFrameElement&&r instanceof window.HTMLIFrameElement)try{r=r.contentDocument.head}catch(n){r=null}e[n]=r}return e[n]}}(),c=null,s=0,u=[],l=t(7);function h(n,e){for(var t=0;t<n.length;t++){var r=n[t],o=i[r.id];if(o){o.refs++;for(var a=0;a<o.parts.length;a++)o.parts[a](r.parts[a]);for(;a<r.parts.length;a++)o.parts.push(y(r.parts[a],e))}else{var f=[];for(a=0;a<r.parts.length;a++)f.push(y(r.parts[a],e));i[r.id]={id:r.id,refs:1,parts:f}}}}function d(n,e){for(var t=[],r={},o=0;o<n.length;o++){var i=n[o],a=e.base?i[0]+e.base:i[0],f={css:i[1],media:i[2],sourceMap:i[3]};r[a]?r[a].parts.push(f):t.push(r[a]={id:a,parts:[f]})}return t}function b(n,e){var t=f(n.insertInto);if(!t)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var r=u[u.length-1];if("top"===n.insertAt)r?r.nextSibling?t.insertBefore(e,r.nextSibling):t.appendChild(e):t.insertBefore(e,t.firstChild),u.push(e);else if("bottom"===n.insertAt)t.appendChild(e);else{if("object"!=typeof n.insertAt||!n.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var o=f(n.insertAt.before,t);t.insertBefore(e,o)}}function p(n){if(null===n.parentNode)return!1;n.parentNode.removeChild(n);var e=u.indexOf(n);e>=0&&u.splice(e,1)}function _(n){var e=document.createElement("style");if(void 0===n.attrs.type&&(n.attrs.type="text/css"),void 0===n.attrs.nonce){var r=function(){0;return t.nc}();r&&(n.attrs.nonce=r)}return g(e,n.attrs),b(n,e),e}function g(n,e){Object.keys(e).forEach(function(t){n.setAttribute(t,e[t])})}function y(n,e){var t,r,o,i;if(e.transform&&n.css){if(!(i="function"==typeof e.transform?e.transform(n.css):e.transform.default(n.css)))return function(){};n.css=i}if(e.singleton){var a=s++;t=c||(c=_(e)),r=x.bind(null,t,a,!1),o=x.bind(null,t,a,!0)}else n.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(t=function(n){var e=document.createElement("link");return void 0===n.attrs.type&&(n.attrs.type="text/css"),n.attrs.rel="stylesheet",g(e,n.attrs),b(n,e),e}(e),r=function(n,e,t){var r=t.css,o=t.sourceMap,i=void 0===e.convertToAbsoluteUrls&&o;(e.convertToAbsoluteUrls||i)&&(r=l(r));o&&(r+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(o))))+" */");var a=new Blob([r],{type:"text/css"}),f=n.href;n.href=URL.createObjectURL(a),f&&URL.revokeObjectURL(f)}.bind(null,t,e),o=function(){p(t),t.href&&URL.revokeObjectURL(t.href)}):(t=_(e),r=function(n,e){var t=e.css,r=e.media;r&&n.setAttribute("media",r);if(n.styleSheet)n.styleSheet.cssText=t;else{for(;n.firstChild;)n.removeChild(n.firstChild);n.appendChild(document.createTextNode(t))}}.bind(null,t),o=function(){p(t)});return r(n),function(e){if(e){if(e.css===n.css&&e.media===n.media&&e.sourceMap===n.sourceMap)return;r(n=e)}else o()}}n.exports=function(n,e){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(e=e||{}).attrs="object"==typeof e.attrs?e.attrs:{},e.singleton||"boolean"==typeof e.singleton||(e.singleton=a()),e.insertInto||(e.insertInto="head"),e.insertAt||(e.insertAt="bottom");var t=d(n,e);return h(t,e),function(n){for(var r=[],o=0;o<t.length;o++){var a=t[o];(f=i[a.id]).refs--,r.push(f)}n&&h(d(n,e),e);for(o=0;o<r.length;o++){var f;if(0===(f=r[o]).refs){for(var c=0;c<f.parts.length;c++)f.parts[c]();delete i[f.id]}}}};var m,v=(m=[],function(n,e){return m[n]=e,m.filter(Boolean).join("\n")});function x(n,e,t,r){var o=t?"":r.css;if(n.styleSheet)n.styleSheet.cssText=v(e,o);else{var i=document.createTextNode(o),a=n.childNodes;a[e]&&n.removeChild(a[e]),a.length?n.insertBefore(i,a[e]):n.appendChild(i)}}},function(n,e,t){"use strict";var r=this&&this.__awaiter||function(n,e,t,r){return new(t||(t=Promise))(function(o,i){function a(n){try{c(r.next(n))}catch(n){i(n)}}function f(n){try{c(r.throw(n))}catch(n){i(n)}}function c(n){n.done?o(n.value):new t(function(e){e(n.value)}).then(a,f)}c((r=r.apply(n,e||[])).next())})},o=this&&this.__generator||function(n,e){var t,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:f(0),throw:f(1),return:f(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function f(i){return function(f){return function(i){if(t)throw new TypeError("Generator is already executing.");for(;a;)try{if(t=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=e.call(n,a)}catch(n){i=[6,n],r=0}finally{t=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,f])}}},i=this;Object.defineProperty(e,"__esModule",{value:!0});var a=t(3),f=t(4),c=t(21);t(5),t(8),t(10),t(20).start();var s=document.getElementById("vis"),u=document.getElementById("state"),l=document.getElementById("increase"),h=document.getElementById("decrease"),d=document.getElementById("multiply"),b=document.getElementById("divide"),p=(document.getElementById("play"),new f.ProvenanceGraph({name:"calculator",version:"1.0.0"})),_=new f.ActionFunctionRegistry,g=new f.ProvenanceTracker(_,p),y=new f.ProvenanceGraphTraverser(_,p),m=new a.Calculator(p,_,g,y);l.addEventListener("click",function(){return r(i,void 0,void 0,function(){return o(this,function(n){switch(n.label){case 0:return[4,g.applyAction({do:"add",doArguments:[5],undo:"subtract",undoArguments:[5],metadata:{createdBy:"me",createdOn:"now",tags:[],userIntent:"add"}})];case 1:return n.sent().label="add 5",[2]}})})}),h.addEventListener("click",function(){return r(i,void 0,void 0,function(){return o(this,function(n){switch(n.label){case 0:return[4,g.applyAction({do:"subtract",doArguments:[5],undo:"add",undoArguments:[5],metadata:{createdBy:"me",createdOn:"now",tags:[],userIntent:"subtract"}})];case 1:return n.sent().label="subtract 5",[2]}})})}),d.addEventListener("click",function(){return r(i,void 0,void 0,function(){return o(this,function(n){switch(n.label){case 0:return[4,g.applyAction({do:"multiply",doArguments:[5],undo:"divide",undoArguments:[5],metadata:{createdBy:"me",createdOn:"now",tags:[],userIntent:"multiply"}})];case 1:return n.sent().label="multiply 5",[2]}})})}),b.addEventListener("click",function(){return r(i,void 0,void 0,function(){return o(this,function(n){switch(n.label){case 0:return[4,g.applyAction({do:"divide",doArguments:[5],undo:"multiply",undoArguments:[5],metadata:{createdBy:"me",createdOn:"now",tags:[],userIntent:"divide"}})];case 1:return n.sent().label="divide 5",[2]}})})}),p.on("currentChanged",function(n){u.innerHTML=m.currentState().toString()}),m.setupBasicGraph().then(function(){new c.ProvenanceTreeVisualization(y,s)})},function(n,e,t){"use strict";var r=this&&this.__assign||function(){return(r=Object.assign||function(n){for(var e,t=1,r=arguments.length;t<r;t++)for(var o in e=arguments[t])Object.prototype.hasOwnProperty.call(e,o)&&(n[o]=e[o]);return n}).apply(this,arguments)},o=this&&this.__awaiter||function(n,e,t,r){return new(t||(t=Promise))(function(o,i){function a(n){try{c(r.next(n))}catch(n){i(n)}}function f(n){try{c(r.throw(n))}catch(n){i(n)}}function c(n){n.done?o(n.value):new t(function(e){e(n.value)}).then(a,f)}c((r=r.apply(n,e||[])).next())})},i=this&&this.__generator||function(n,e){var t,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:f(0),throw:f(1),return:f(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function f(i){return function(f){return function(i){if(t)throw new TypeError("Generator is already executing.");for(;a;)try{if(t=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=e.call(n,a)}catch(n){i=[6,n],r=0}finally{t=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,f])}}};Object.defineProperty(e,"__esModule",{value:!0});var a=function(){function n(){this.result=0}return n.prototype.add=function(n){return o(this,void 0,void 0,function(){return i(this,function(e){return this.result+=n,[2]})})},n.prototype.subtract=function(n){return o(this,void 0,void 0,function(){return i(this,function(e){return this.result-=n,[2]})})},n.prototype.multiply=function(n){return o(this,void 0,void 0,function(){return i(this,function(e){return this.result*=n,[2]})})},n.prototype.divide=function(n){return o(this,void 0,void 0,function(){return i(this,function(e){return this.result/=n,[2]})})},n}(),f=function(){function n(n,e,t,r){this.graph=n,this.registry=e,this.tracker=t,this.traverser=r,this.app=new a,this.registry.register("add",this.app.add,this.app),this.registry.register("subtract",this.app.subtract,this.app),this.registry.register("multiply",this.app.multiply,this.app),this.registry.register("divide",this.app.divide,this.app)}return n.prototype.makeActionAndApply=function(n,e,t,a,f,c){return o(this,void 0,void 0,function(){var o,s,u;return i(this,function(i){switch(i.label){case 0:return s={do:t,doArguments:a,metadata:{createdBy:"me",createdOn:"now",tags:[],userIntent:t}},o=n?r({},s,{undo:f,undoArguments:c}):r({},s),[4,this.tracker.applyAction(o)];case 1:return(u=i.sent()).label=e,[2,u]}})})},n.prototype.currentState=function(){return this.app.result},n.prototype.setupBasicGraph=function(){return o(this,void 0,void 0,function(){var n;return i(this,function(e){switch(e.label){case 0:return[4,this.makeActionAndApply(!0,"add 13","add",[13],"subtract",[13])];case 1:return n=e.sent(),[4,this.makeActionAndApply(!0,"sub 2","subtract",[2],"add",[2])];case 2:return e.sent(),[4,this.traverser.toStateNode(n.id)];case 3:return e.sent(),[4,this.makeActionAndApply(!0,"sub 2","subtract",[2],"add",[2])];case 4:return e.sent(),[4,this.makeActionAndApply(!0,"sub 20","subtract",[20],"add",[20])];case 5:return e.sent(),[4,this.makeActionAndApply(!0,"add 5","add",[5],"subtract",[5])];case 6:return e.sent(),[4,this.makeActionAndApply(!0,"mul 2","multiply",[2],"divide",[2])];case 7:return e.sent(),[4,this.makeActionAndApply(!0,"sub 2","subtract",[2],"add",[2])];case 8:return e.sent(),[4,this.traverser.toStateNode(n.id)];case 9:return e.sent(),[4,this.makeActionAndApply(!0,"mul 4","multiply",[4],"divide",[4])];case 10:return e.sent(),[2]}})})},n}();e.Calculator=f},function(n,e,t){"use strict";t.r(e),t.d(e,"ActionFunctionRegistry",function(){return r}),t.d(e,"ProvenanceGraph",function(){return h}),t.d(e,"restoreProvenanceGraph",function(){return d}),t.d(e,"serializeProvenanceGraph",function(){return b}),t.d(e,"ProvenanceTracker",function(){return p}),t.d(e,"ProvenanceGraphTraverser",function(){return y}),t.d(e,"ProvenanceSlide",function(){return m}),t.d(e,"ProvenanceSlidedeck",function(){return v}),t.d(e,"STATUS",function(){return g}),t.d(e,"ProvenanceSlidedeckPlayer",function(){return x}),t.d(e,"generateUUID",function(){return f}),t.d(e,"generateTimestamp",function(){return c}),t.d(e,"isStateNode",function(){return s}),t.d(e,"isReversibleAction",function(){return u});var r=function(){function n(){this.functionRegistry={}}return n.prototype.register=function(n,e,t){if(void 0===t&&(t=null),this.functionRegistry[n])throw new Error("Function already registered");this.functionRegistry[n]={func:e,thisArg:t}},n.prototype.getFunctionByName=function(n){if(!this.functionRegistry[n])throw new Error("Function not found in registry");return this.functionRegistry[n]},n}(),o=function(){return(o=Object.assign||function(n){for(var e,t=1,r=arguments.length;t<r;t++)for(var o in e=arguments[t])Object.prototype.hasOwnProperty.call(e,o)&&(n[o]=e[o]);return n}).apply(this,arguments)};
/*! *****************************************************************************
Copyright (c) Microsoft Corporation. All rights reserved.
Licensed under the Apache License, Version 2.0 (the "License"); you may not use
this file except in compliance with the License. You may obtain a copy of the
License at http://www.apache.org/licenses/LICENSE-2.0

THIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
KIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED
WARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,
MERCHANTABLITY OR NON-INFRINGEMENT.

See the Apache Version 2.0 License for specific language governing permissions
and limitations under the License.
***************************************************************************** */function i(n,e,t,r){return new(t||(t=Promise))(function(o,i){function a(n){try{c(r.next(n))}catch(n){i(n)}}function f(n){try{c(r.throw(n))}catch(n){i(n)}}function c(n){n.done?o(n.value):new t(function(e){e(n.value)}).then(a,f)}c((r=r.apply(n,e||[])).next())})}function a(n,e){var t,r,o,i,a={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return i={next:f(0),throw:f(1),return:f(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function f(i){return function(f){return function(i){if(t)throw new TypeError("Generator is already executing.");for(;a;)try{if(t=1,r&&(o=2&i[0]?r.return:i[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,i[1])).done)return o;switch(r=0,o&&(i=[2&i[0],o.value]),i[0]){case 0:case 1:o=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,r=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(o=(o=a.trys).length>0&&o[o.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!o||i[1]>o[0]&&i[1]<o[3])){a.label=i[1];break}if(6===i[0]&&a.label<o[1]){a.label=o[1],o=i;break}if(o&&a.label<o[2]){a.label=o[2],a.ops.push(i);break}o[2]&&a.ops.pop(),a.trys.pop();continue}i=e.call(n,a)}catch(n){i=[6,n],r=0}finally{t=o=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,f])}}}function f(){var n=(new Date).getTime();return"undefined"!=typeof performance&&"function"==typeof performance.now&&(n+=performance.now()),"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(e){var t=(n+16*Math.random())%16|0;return n=Math.floor(n/16),("x"===e?t:3&t|8).toString(16)})}function c(){return(new Date).getTime()}function s(n){return"parent"in n}function u(n){return"undo"in n}function l(n){return n=n||Object.create(null),{on:function(e,t){(n[e]||(n[e]=[])).push(t)},off:function(e,t){n[e]&&n[e].splice(n[e].indexOf(t)>>>0,1)},emit:function(e,t){(n[e]||[]).slice().map(function(n){n(t)})}}}var h=function(){function n(n,e,t){void 0===e&&(e="Unknown"),this._nodes={},this._mitt=l(),this.application=n,this.root=t||{id:f(),label:"Root",metadata:{createdBy:e,createdOn:c()},children:[],artifacts:{}},this.addNode(this.root),this._current=this.root}return n.prototype.addNode=function(n){if(this._nodes[n.id])throw new Error("Node already added");this._nodes[n.id]=n,this._mitt.emit("nodeAdded",n)},n.prototype.getNode=function(n){if(!this._nodes[n])throw new Error("Node id not found");return this._nodes[n]},Object.defineProperty(n.prototype,"current",{get:function(){return this._current},set:function(n){if(!this._nodes[n.id])throw new Error("Node id not found");this._current=n,this._mitt.emit("currentChanged",n)},enumerable:!0,configurable:!0}),Object.defineProperty(n.prototype,"nodes",{get:function(){return this._nodes},enumerable:!0,configurable:!0}),n.prototype.emitNodeChangedEvent=function(n){if(!this._nodes[n.id])throw new Error("Node id not found");this._mitt.emit("nodeChanged",n)},n.prototype.on=function(n,e){this._mitt.on(n,e)},n.prototype.off=function(n,e){this._mitt.off(n,e)},n}();function d(n){for(var e={},t=0,r=n.nodes;t<r.length;t++){var i=r[t];e[i.id]=o({},i)}for(var a=0,f=Object.keys(e);a<f.length;a++){var c=f[a];(i=e[c]).children=i.children.map(function(n){return e[n]}),"parent"in i&&(i.parent=e[i.parent])}var s=new h(n.application);return s._nodes=e,s._current=e[n.current],s.root=e[n.root],s}function b(n){return{nodes:Object.keys(n.nodes).map(function(e){var t=n.getNode(e),r=o({},t);return s(t)&&(r.parent=t.parent.id),r.children=t.children.map(function(n){return n.id}),r}),root:n.root.id,application:n.application,current:n.current.id}}var p=function(){function n(n,e,t){void 0===t&&(t="Unknown"),this.acceptActions=!0,this.registry=n,this.graph=e,this.username=t}return n.prototype.applyAction=function(n,e){return void 0===e&&(e=!1),i(this,void 0,void 0,function(){var t,r,o,i,s,u,l=this;return a(this,function(a){switch(a.label){case 0:return this.acceptActions?(t=function(e,t){return{id:f(),label:n.do,metadata:{createdBy:l.username,createdOn:c()},action:n,actionResult:t,parent:e,children:[],artifacts:{}}},o=this.graph.current,e?(r=t(this.graph.current,null),[3,3]):[3,1]):[2,Promise.resolve(this.graph.current)];case 1:return i=n.do,[4,(s=this.registry.getFunctionByName(i)).func.apply(s.thisArg,n.doArguments)];case 2:u=a.sent(),r=t(o,u),a.label=3;case 3:return o.children.push(r),this.graph.addNode(r),this.graph.current=r,[2,r]}})})},n}();function _(n,e){if(s(n)&&n.parent===e)return!0;if(s(e)&&e.parent!==n)throw new Error("Unconnected nodes, you probably should not be using this function");return!1}var g,y=function(){function n(n,e,t){void 0===t&&(t=null),this.trackingWhenTraversing=!1,this.registry=n,this.graph=e,this.tracker=t}return n.prototype.executeFunctions=function(n,e){return i(this,void 0,void 0,function(){var t,r,o,i;return a(this,function(a){switch(a.label){case 0:r=0,a.label=1;case 1:return r<n.length?(o=n[r],i=void 0,this.tracker&&this.tracker.acceptActions&&!this.trackingWhenTraversing?(this.tracker.acceptActions=!1,i=o.func.apply(o.thisArg,e[r]),this.tracker.acceptActions=!0):i=o.func.apply(o.thisArg,e[r]),[4,i]):[3,4];case 2:t=a.sent(),a.label=3;case 3:return r++,[3,1];case 4:return[2,t]}})})},n.prototype.toStateNode=function(n){return i(this,void 0,void 0,function(){var e,t,r,o,i,f,c;return a(this,function(a){switch(a.label){case 0:if(e=this.graph.current,t=this.graph.getNode(n),e===t)return[2,Promise.resolve(e)];if(!function n(e,t,r,o){if(void 0===o&&(o=e),e&&e===t)return r.unshift(e),!0;if(e){var i=e.children.slice();s(e)&&i.push(e.parent);for(var a=0,f=i;a<f.length;a++){var c=f[a];if(c!==o&&n(c,t,r,e))return r.unshift(e),!0}}return!1}(e,t,r=[]))throw new Error("No path to target node found in graph");return o=this.getFunctionsAndArgsFromTrack(r),i=o.functionsToDo,f=o.argumentsToDo,[4,this.executeFunctions(i,f)];case 1:return c=a.sent(),this.graph.current=t,[2,c]}})})},n.prototype.getFunctionsAndArgsFromTrack=function(n){for(var e=[],t=[],r=0;r<n.length-1;r++){var o=n[r],i=n[r+1];if(_(o,i)){if(!s(o))throw new Error("Going up from root? unreachable error ... i hope");if(!u(o.action))throw new Error("trying to undo an Irreversible action");var a=this.registry.getFunctionByName(o.action.undo);e.push(a),t.push(o.action.undoArguments)}else{if(!s(i))throw new Error("Going down to the root? unreachable error ... i hope");var f=this.registry.getFunctionByName(i.action.do);e.push(f),t.push(i.action.doArguments)}}return{functionsToDo:e,argumentsToDo:t}},n}(),m=function(){function n(n,e,t,r,o){void 0===r&&(r=[]),void 0===o&&(o=null),this._id=f(),this._name=n,this._duration=e,this._delay=t,this._annotations=r,this._node=o}return Object.defineProperty(n.prototype,"id",{get:function(){return this._id},enumerable:!0,configurable:!0}),Object.defineProperty(n.prototype,"node",{get:function(){return this._node},set:function(n){this._node=n},enumerable:!0,configurable:!0}),Object.defineProperty(n.prototype,"name",{get:function(){return this._name},set:function(n){this._name=n},enumerable:!0,configurable:!0}),Object.defineProperty(n.prototype,"duration",{get:function(){return this._duration},set:function(n){this._duration=n},enumerable:!0,configurable:!0}),Object.defineProperty(n.prototype,"delay",{get:function(){return this._delay},set:function(n){this._delay=n},enumerable:!0,configurable:!0}),n.prototype.addAnnotation=function(n){this._annotations.push(n)},n.prototype.removeAnnotation=function(n){var e=this._annotations.indexOf(n);this._annotations.splice(e,1)},Object.defineProperty(n.prototype,"annotations",{get:function(){return this._annotations},enumerable:!0,configurable:!0}),n}(),v=function(){function n(n,e){this._slides=[],this._captainPlaceholder=new m("Captain Placeholder",0,0),this._mitt=l(),this._application=n,this._graph=e.graph,this._traverser=e,this._selectedSlide=null}return Object.defineProperty(n.prototype,"application",{get:function(){return this._application},enumerable:!0,configurable:!0}),n.prototype.addSlide=function(n,e){if((!e||isNaN(e)||!Number.isInteger(e)||e>this._slides.length||e<0)&&(e=this._slides.length),n&&this._slides.indexOf(n)>=0)throw new Error("Cannot add a slide that is already in the deck");if(!n){var t=this._graph.current;n=new m(t.label,1,0,[],t)}return 0===this._slides.length&&(this._selectedSlide=n),this._slides.splice(e,0,n),this._mitt.emit("slideAdded",n),n},n.prototype.removeSlideAtIndex=function(n){var e=this._slides.splice(n,1);this._selectedSlide===e[0]&&(this.selectedSlide=null),this._mitt.emit("slideRemoved",e[0])},n.prototype.removeSlide=function(n){this.removeSlideAtIndex(this._slides.indexOf(n))},Object.defineProperty(n.prototype,"selectedSlide",{get:function(){return this._selectedSlide},set:function(n){n&&n.node&&this._traverser.toStateNode(n.node.id),this._selectedSlide=n,this._mitt.emit("slideSelected",n)},enumerable:!0,configurable:!0}),n.prototype.moveSlide=function(n,e){if(e<0||e>this.slides.length-1)throw new Error("target index out of bounds");if(e>=this._slides.length)for(var t=e-this._slides.length+1;t--;)this._slides.push(this._captainPlaceholder);this._slides.splice(e,0,this._slides.splice(n,1)[0]),this._mitt.emit("slidesMoved",this._slides)},n.prototype.startTime=function(n){for(var e=this._slides.indexOf(n),t=0,r=0;r<e;r++)t+=this._slides[r].delay,t+=this._slides[r].duration;return t},n.prototype.slideAtTime=function(n){for(var e=0,t=null;n>=0&&e<this.slides.length;){var r=(t=this.slides[e]).delay+t.duration;if(n-r<0)break;n-=r,e++}return t},Object.defineProperty(n.prototype,"slides",{get:function(){return this._slides},enumerable:!0,configurable:!0}),n.prototype.next=function(){if(null!==this._selectedSlide){var n=this._slides.indexOf(this._selectedSlide);n<this._slides.length-1?(n+=1,this.selectedSlide=this._slides[n]):this.selectedSlide=this._slides[0]}},n.prototype.previous=function(){if(null!==this._selectedSlide){var n=this._slides.indexOf(this._selectedSlide);n>0?(n-=1,this.selectedSlide=this._slides[n]):this.selectedSlide=this._slides[this._slides.length-1]}},Object.defineProperty(n.prototype,"graph",{get:function(){return this._graph},enumerable:!0,configurable:!0}),n.prototype.on=function(n,e){this._mitt.on(n,e)},n.prototype.off=function(n,e){this._mitt.off(n,e)},n}();!function(n){n[n.IDLE=0]="IDLE",n[n.PLAYING=1]="PLAYING"}(g||(g={}));var x=function(){function n(n,e){this._selectCallback=e,this._slides=n,this._currentSlideIndex=0,this._status=g.IDLE}return n.prototype.setSlideIndex=function(n){this._currentSlideIndex=n},Object.defineProperty(n.prototype,"slides",{get:function(){return this._slides},enumerable:!0,configurable:!0}),Object.defineProperty(n.prototype,"currentSlideIndex",{get:function(){return this._currentSlideIndex},set:function(n){this._currentSlideIndex=n},enumerable:!0,configurable:!0}),n.prototype.play=function(){return i(this,void 0,void 0,function(){var n,e,t=this;return a(this,function(r){switch(r.label){case 0:if(n=function(){return t._status===g.PLAYING&&t._currentSlideIndex<t._slides.length-1},this._status!==g.IDLE)return[3,4];this._status=g.PLAYING,this._selectCallback(this._slides[this._currentSlideIndex]),r.label=1;case 1:return e=this._slides[this._currentSlideIndex],[4,(o=e.duration,new Promise(function(n){return setTimeout(n,o)}))];case 2:r.sent(),n()&&(this._currentSlideIndex+=1,this._selectCallback(this._slides[this._currentSlideIndex])),r.label=3;case 3:if(n())return[3,1];r.label=4;case 4:return this._status=g.IDLE,[2]}var o})})},n.prototype.next=function(){this._currentSlideIndex+=1,this._selectCallback(this._slides[this._currentSlideIndex])},Object.defineProperty(n.prototype,"status",{get:function(){return this._status},enumerable:!0,configurable:!0}),n.prototype.stop=function(){this._status=g.IDLE},n}()},function(n,e,t){var r=t(6);"string"==typeof r&&(r=[[n.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};t(1)(r,o);r.locals&&(n.exports=r.locals)},function(n,e,t){(n.exports=t(0)(!1)).push([n.i,'/*! normalize.css v8.0.1 | MIT License | github.com/necolas/normalize.css */\n\n/* Document\n   ========================================================================== */\n\n/**\n * 1. Correct the line height in all browsers.\n * 2. Prevent adjustments of font size after orientation changes in iOS.\n */\n\nhtml {\n  line-height: 1.15; /* 1 */\n  -webkit-text-size-adjust: 100%; /* 2 */\n}\n\n/* Sections\n   ========================================================================== */\n\n/**\n * Remove the margin in all browsers.\n */\n\nbody {\n  margin: 0;\n}\n\n/**\n * Render the `main` element consistently in IE.\n */\n\nmain {\n  display: block;\n}\n\n/**\n * Correct the font size and margin on `h1` elements within `section` and\n * `article` contexts in Chrome, Firefox, and Safari.\n */\n\nh1 {\n  font-size: 2em;\n  margin: 0.67em 0;\n}\n\n/* Grouping content\n   ========================================================================== */\n\n/**\n * 1. Add the correct box sizing in Firefox.\n * 2. Show the overflow in Edge and IE.\n */\n\nhr {\n  box-sizing: content-box; /* 1 */\n  height: 0; /* 1 */\n  overflow: visible; /* 2 */\n}\n\n/**\n * 1. Correct the inheritance and scaling of font size in all browsers.\n * 2. Correct the odd `em` font sizing in all browsers.\n */\n\npre {\n  font-family: monospace, monospace; /* 1 */\n  font-size: 1em; /* 2 */\n}\n\n/* Text-level semantics\n   ========================================================================== */\n\n/**\n * Remove the gray background on active links in IE 10.\n */\n\na {\n  background-color: transparent;\n}\n\n/**\n * 1. Remove the bottom border in Chrome 57-\n * 2. Add the correct text decoration in Chrome, Edge, IE, Opera, and Safari.\n */\n\nabbr[title] {\n  border-bottom: none; /* 1 */\n  text-decoration: underline; /* 2 */\n  text-decoration: underline dotted; /* 2 */\n}\n\n/**\n * Add the correct font weight in Chrome, Edge, and Safari.\n */\n\nb,\nstrong {\n  font-weight: bolder;\n}\n\n/**\n * 1. Correct the inheritance and scaling of font size in all browsers.\n * 2. Correct the odd `em` font sizing in all browsers.\n */\n\ncode,\nkbd,\nsamp {\n  font-family: monospace, monospace; /* 1 */\n  font-size: 1em; /* 2 */\n}\n\n/**\n * Add the correct font size in all browsers.\n */\n\nsmall {\n  font-size: 80%;\n}\n\n/**\n * Prevent `sub` and `sup` elements from affecting the line height in\n * all browsers.\n */\n\nsub,\nsup {\n  font-size: 75%;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\n\nsub {\n  bottom: -0.25em;\n}\n\nsup {\n  top: -0.5em;\n}\n\n/* Embedded content\n   ========================================================================== */\n\n/**\n * Remove the border on images inside links in IE 10.\n */\n\nimg {\n  border-style: none;\n}\n\n/* Forms\n   ========================================================================== */\n\n/**\n * 1. Change the font styles in all browsers.\n * 2. Remove the margin in Firefox and Safari.\n */\n\nbutton,\ninput,\noptgroup,\nselect,\ntextarea {\n  font-family: inherit; /* 1 */\n  font-size: 100%; /* 1 */\n  line-height: 1.15; /* 1 */\n  margin: 0; /* 2 */\n}\n\n/**\n * Show the overflow in IE.\n * 1. Show the overflow in Edge.\n */\n\nbutton,\ninput { /* 1 */\n  overflow: visible;\n}\n\n/**\n * Remove the inheritance of text transform in Edge, Firefox, and IE.\n * 1. Remove the inheritance of text transform in Firefox.\n */\n\nbutton,\nselect { /* 1 */\n  text-transform: none;\n}\n\n/**\n * Correct the inability to style clickable types in iOS and Safari.\n */\n\nbutton,\n[type="button"],\n[type="reset"],\n[type="submit"] {\n  -webkit-appearance: button;\n}\n\n/**\n * Remove the inner border and padding in Firefox.\n */\n\nbutton::-moz-focus-inner,\n[type="button"]::-moz-focus-inner,\n[type="reset"]::-moz-focus-inner,\n[type="submit"]::-moz-focus-inner {\n  border-style: none;\n  padding: 0;\n}\n\n/**\n * Restore the focus styles unset by the previous rule.\n */\n\nbutton:-moz-focusring,\n[type="button"]:-moz-focusring,\n[type="reset"]:-moz-focusring,\n[type="submit"]:-moz-focusring {\n  outline: 1px dotted ButtonText;\n}\n\n/**\n * Correct the padding in Firefox.\n */\n\nfieldset {\n  padding: 0.35em 0.75em 0.625em;\n}\n\n/**\n * 1. Correct the text wrapping in Edge and IE.\n * 2. Correct the color inheritance from `fieldset` elements in IE.\n * 3. Remove the padding so developers are not caught out when they zero out\n *    `fieldset` elements in all browsers.\n */\n\nlegend {\n  box-sizing: border-box; /* 1 */\n  color: inherit; /* 2 */\n  display: table; /* 1 */\n  max-width: 100%; /* 1 */\n  padding: 0; /* 3 */\n  white-space: normal; /* 1 */\n}\n\n/**\n * Add the correct vertical alignment in Chrome, Firefox, and Opera.\n */\n\nprogress {\n  vertical-align: baseline;\n}\n\n/**\n * Remove the default vertical scrollbar in IE 10+.\n */\n\ntextarea {\n  overflow: auto;\n}\n\n/**\n * 1. Add the correct box sizing in IE 10.\n * 2. Remove the padding in IE 10.\n */\n\n[type="checkbox"],\n[type="radio"] {\n  box-sizing: border-box; /* 1 */\n  padding: 0; /* 2 */\n}\n\n/**\n * Correct the cursor style of increment and decrement buttons in Chrome.\n */\n\n[type="number"]::-webkit-inner-spin-button,\n[type="number"]::-webkit-outer-spin-button {\n  height: auto;\n}\n\n/**\n * 1. Correct the odd appearance in Chrome and Safari.\n * 2. Correct the outline style in Safari.\n */\n\n[type="search"] {\n  -webkit-appearance: textfield; /* 1 */\n  outline-offset: -2px; /* 2 */\n}\n\n/**\n * Remove the inner padding in Chrome and Safari on macOS.\n */\n\n[type="search"]::-webkit-search-decoration {\n  -webkit-appearance: none;\n}\n\n/**\n * 1. Correct the inability to style clickable types in iOS and Safari.\n * 2. Change font properties to `inherit` in Safari.\n */\n\n::-webkit-file-upload-button {\n  -webkit-appearance: button; /* 1 */\n  font: inherit; /* 2 */\n}\n\n/* Interactive\n   ========================================================================== */\n\n/*\n * Add the correct display in Edge, IE 10+, and Firefox.\n */\n\ndetails {\n  display: block;\n}\n\n/*\n * Add the correct display in all browsers.\n */\n\nsummary {\n  display: list-item;\n}\n\n/* Misc\n   ========================================================================== */\n\n/**\n * Add the correct display in IE 10+.\n */\n\ntemplate {\n  display: none;\n}\n\n/**\n * Add the correct display in IE 10.\n */\n\n[hidden] {\n  display: none;\n}\n',""])},function(n,e){n.exports=function(n){var e="undefined"!=typeof window&&window.location;if(!e)throw new Error("fixUrls requires window.location");if(!n||"string"!=typeof n)return n;var t=e.protocol+"//"+e.host,r=t+e.pathname.replace(/\/[^\/]*$/,"/");return n.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(n,e){var o,i=e.trim().replace(/^"(.*)"$/,function(n,e){return e}).replace(/^'(.*)'$/,function(n,e){return e});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?n:(o=0===i.indexOf("//")?i:0===i.indexOf("/")?t+i:r+i.replace(/^\.\//,""),"url("+JSON.stringify(o)+")")})}},function(n,e,t){var r=t(9);"string"==typeof r&&(r=[[n.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};t(1)(r,o);r.locals&&(n.exports=r.locals)},function(n,e,t){(n.exports=t(0)(!1)).push([n.i,"html,\n* {\n  box-sizing: border-box; }\n\nhtml,\nbody {\n  margin: 0 0 0 0;\n  -webkit-flex-direction: column;\n  flex-direction: column;\n  height: 900px; }\n\n#vis {\n  border: 2px solid lightgrey;\n  border-radius: 5px;\n  margin: 2px;\n  margin-top: 0;\n  font-size: 18px;\n  margin-bottom: 0.1em;\n  color: yellow;\n  vertical-align: middle;\n  font-size: 80%;\n  line-height: 1;\n  top: -1px;\n  height: 600px;\n  width: 300px;\n  text-size-adjust: 100%; }\n  #vis * {\n    border: none; }\n\n.node {\n  fill: lightsteelblue;\n  stroke: steelblue;\n  cursor: pointer; }\n  .node circle {\n    stroke-width: .1%; }\n  .node.branch-active {\n    fill: yellow;\n    background-color: #ccc; }\n    .node.branch-active text {\n      display: block; }\n  .node.node-active {\n    fill: blue;\n    stroke: darkblue;\n    font-weight: bold; }\n  .node text {\n    display: none;\n    fill: black;\n    stroke-width: 0.2px;\n    font-family: sans-serif; }\n\n.link {\n  fill: none;\n  stroke: black;\n  stroke-width: 0.5px; }\n  .link.active {\n    stroke: black; }\n\n.intent_multiply {\n  fill: red; }\n\n.intent_add {\n  fill: green; }\n\n.intent_subtract {\n  fill: indigo; }\n",""])},function(n,e,t){var r=t(11);"string"==typeof r&&(r=[[n.i,r,""]]);var o={hmr:!0,transform:void 0,insertInto:void 0};t(1)(r,o);r.locals&&(n.exports=r.locals)},function(n,e,t){(e=n.exports=t(0)(!1)).i(t(12),""),e.push([n.i,'#slideDeck {\n    height: 400px;\n    overflow-y: scroll;\n}\n::-webkit-scrollbar {\n    display: none;\n}\ndiv.slidedeck__slide {\n    background-color: #ccc;\n    margin-bottom: 0.5em;\n    border: 1px solid black;\n}\n\ntable.slides__table {\n    width: 300px;\n}\n\ntable.slides__table tr.selected {\n    background-color: #00b8d9;\n}\n.add {\n    font-family: "FontAwesome";\n}\n\ndiv.slidedeck__slide[draggable="true"] {\n    background-color: #00b8d9;\n}\n\n.slides_background_rect {\n    fill: #ffffff;\n    stroke: #aaaaaa;\n}\n\n.slides_delay_rect {\n    fill: #dddddd;\n    stroke: #dddddd;\n}\n\n.slides_delay_resize,\n.slides_duration_resize {\n    fill: white;\n}\n\n.slides_rect {\n    fill: #f0f0f0;\n    stroke: #dddddd;\n    rx: 5px;\n    ry: 5px;\n}\n\n.slides_rect[selected="true"] {\n    fill: #00b8d9;\n    stroke: #dddddd;\n}\n\n.slides_text {\n    fill: #000000;\n}\n\n.slides_delete_rect {\n    fill: #aaaaaa;\n}\n\n.slides_placeholder {\n    rx: 5px;\n    ry: 5px;\n    stroke-dasharray: 5;\n    fill-opacity: 0.1;\n    stroke: black;\n    stroke-width: 1px;\n}\n#player_placeholder {\n    stroke-dasharray: none;\n}\n.slides_durationtext {\n    font-size: 12px;\n    font-weight: 600;\n}\n',""])},function(n,e,t){var r=t(13);(n.exports=t(0)(!1)).push([n.i,"/*!\n *  Font Awesome 4.7.0 by @davegandy - http://fontawesome.io - @fontawesome\n *  License - http://fontawesome.io/license (Font: SIL OFL 1.1, CSS: MIT License)\n */\n/* FONT PATH\n * -------------------------- */\n@font-face {\n  font-family: 'FontAwesome';\n  src: url("+r(t(14))+");\n  src: url("+r(t(15))+"?#iefix&v=4.7.0) format('embedded-opentype'), url("+r(t(16))+") format('woff2'), url("+r(t(17))+") format('woff'), url("+r(t(18))+") format('truetype'), url("+r(t(19))+'#fontawesomeregular) format(\'svg\');\n  font-weight: normal;\n  font-style: normal;\n}\n.fa {\n  display: inline-block;\n  font: normal normal normal 14px/1 FontAwesome;\n  font-size: inherit;\n  text-rendering: auto;\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n}\n/* makes the font 33% larger relative to the icon container */\n.fa-lg {\n  font-size: 1.33333333em;\n  line-height: 0.75em;\n  vertical-align: -15%;\n}\n.fa-2x {\n  font-size: 2em;\n}\n.fa-3x {\n  font-size: 3em;\n}\n.fa-4x {\n  font-size: 4em;\n}\n.fa-5x {\n  font-size: 5em;\n}\n.fa-fw {\n  width: 1.28571429em;\n  text-align: center;\n}\n.fa-ul {\n  padding-left: 0;\n  margin-left: 2.14285714em;\n  list-style-type: none;\n}\n.fa-ul > li {\n  position: relative;\n}\n.fa-li {\n  position: absolute;\n  left: -2.14285714em;\n  width: 2.14285714em;\n  top: 0.14285714em;\n  text-align: center;\n}\n.fa-li.fa-lg {\n  left: -1.85714286em;\n}\n.fa-border {\n  padding: .2em .25em .15em;\n  border: solid 0.08em #eeeeee;\n  border-radius: .1em;\n}\n.fa-pull-left {\n  float: left;\n}\n.fa-pull-right {\n  float: right;\n}\n.fa.fa-pull-left {\n  margin-right: .3em;\n}\n.fa.fa-pull-right {\n  margin-left: .3em;\n}\n/* Deprecated as of 4.4.0 */\n.pull-right {\n  float: right;\n}\n.pull-left {\n  float: left;\n}\n.fa.pull-left {\n  margin-right: .3em;\n}\n.fa.pull-right {\n  margin-left: .3em;\n}\n.fa-spin {\n  -webkit-animation: fa-spin 2s infinite linear;\n  animation: fa-spin 2s infinite linear;\n}\n.fa-pulse {\n  -webkit-animation: fa-spin 1s infinite steps(8);\n  animation: fa-spin 1s infinite steps(8);\n}\n@-webkit-keyframes fa-spin {\n  0% {\n    -webkit-transform: rotate(0deg);\n    transform: rotate(0deg);\n  }\n  100% {\n    -webkit-transform: rotate(359deg);\n    transform: rotate(359deg);\n  }\n}\n@keyframes fa-spin {\n  0% {\n    -webkit-transform: rotate(0deg);\n    transform: rotate(0deg);\n  }\n  100% {\n    -webkit-transform: rotate(359deg);\n    transform: rotate(359deg);\n  }\n}\n.fa-rotate-90 {\n  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=1)";\n  -webkit-transform: rotate(90deg);\n  -ms-transform: rotate(90deg);\n  transform: rotate(90deg);\n}\n.fa-rotate-180 {\n  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=2)";\n  -webkit-transform: rotate(180deg);\n  -ms-transform: rotate(180deg);\n  transform: rotate(180deg);\n}\n.fa-rotate-270 {\n  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=3)";\n  -webkit-transform: rotate(270deg);\n  -ms-transform: rotate(270deg);\n  transform: rotate(270deg);\n}\n.fa-flip-horizontal {\n  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=0, mirror=1)";\n  -webkit-transform: scale(-1, 1);\n  -ms-transform: scale(-1, 1);\n  transform: scale(-1, 1);\n}\n.fa-flip-vertical {\n  -ms-filter: "progid:DXImageTransform.Microsoft.BasicImage(rotation=2, mirror=1)";\n  -webkit-transform: scale(1, -1);\n  -ms-transform: scale(1, -1);\n  transform: scale(1, -1);\n}\n:root .fa-rotate-90,\n:root .fa-rotate-180,\n:root .fa-rotate-270,\n:root .fa-flip-horizontal,\n:root .fa-flip-vertical {\n  filter: none;\n}\n.fa-stack {\n  position: relative;\n  display: inline-block;\n  width: 2em;\n  height: 2em;\n  line-height: 2em;\n  vertical-align: middle;\n}\n.fa-stack-1x,\n.fa-stack-2x {\n  position: absolute;\n  left: 0;\n  width: 100%;\n  text-align: center;\n}\n.fa-stack-1x {\n  line-height: inherit;\n}\n.fa-stack-2x {\n  font-size: 2em;\n}\n.fa-inverse {\n  color: #ffffff;\n}\n/* Font Awesome uses the Unicode Private Use Area (PUA) to ensure screen\n   readers do not read off random characters that represent icons */\n.fa-glass:before {\n  content: "\\F000";\n}\n.fa-music:before {\n  content: "\\F001";\n}\n.fa-search:before {\n  content: "\\F002";\n}\n.fa-envelope-o:before {\n  content: "\\F003";\n}\n.fa-heart:before {\n  content: "\\F004";\n}\n.fa-star:before {\n  content: "\\F005";\n}\n.fa-star-o:before {\n  content: "\\F006";\n}\n.fa-user:before {\n  content: "\\F007";\n}\n.fa-film:before {\n  content: "\\F008";\n}\n.fa-th-large:before {\n  content: "\\F009";\n}\n.fa-th:before {\n  content: "\\F00A";\n}\n.fa-th-list:before {\n  content: "\\F00B";\n}\n.fa-check:before {\n  content: "\\F00C";\n}\n.fa-remove:before,\n.fa-close:before,\n.fa-times:before {\n  content: "\\F00D";\n}\n.fa-search-plus:before {\n  content: "\\F00E";\n}\n.fa-search-minus:before {\n  content: "\\F010";\n}\n.fa-power-off:before {\n  content: "\\F011";\n}\n.fa-signal:before {\n  content: "\\F012";\n}\n.fa-gear:before,\n.fa-cog:before {\n  content: "\\F013";\n}\n.fa-trash-o:before {\n  content: "\\F014";\n}\n.fa-home:before {\n  content: "\\F015";\n}\n.fa-file-o:before {\n  content: "\\F016";\n}\n.fa-clock-o:before {\n  content: "\\F017";\n}\n.fa-road:before {\n  content: "\\F018";\n}\n.fa-download:before {\n  content: "\\F019";\n}\n.fa-arrow-circle-o-down:before {\n  content: "\\F01A";\n}\n.fa-arrow-circle-o-up:before {\n  content: "\\F01B";\n}\n.fa-inbox:before {\n  content: "\\F01C";\n}\n.fa-play-circle-o:before {\n  content: "\\F01D";\n}\n.fa-rotate-right:before,\n.fa-repeat:before {\n  content: "\\F01E";\n}\n.fa-refresh:before {\n  content: "\\F021";\n}\n.fa-list-alt:before {\n  content: "\\F022";\n}\n.fa-lock:before {\n  content: "\\F023";\n}\n.fa-flag:before {\n  content: "\\F024";\n}\n.fa-headphones:before {\n  content: "\\F025";\n}\n.fa-volume-off:before {\n  content: "\\F026";\n}\n.fa-volume-down:before {\n  content: "\\F027";\n}\n.fa-volume-up:before {\n  content: "\\F028";\n}\n.fa-qrcode:before {\n  content: "\\F029";\n}\n.fa-barcode:before {\n  content: "\\F02A";\n}\n.fa-tag:before {\n  content: "\\F02B";\n}\n.fa-tags:before {\n  content: "\\F02C";\n}\n.fa-book:before {\n  content: "\\F02D";\n}\n.fa-bookmark:before {\n  content: "\\F02E";\n}\n.fa-print:before {\n  content: "\\F02F";\n}\n.fa-camera:before {\n  content: "\\F030";\n}\n.fa-font:before {\n  content: "\\F031";\n}\n.fa-bold:before {\n  content: "\\F032";\n}\n.fa-italic:before {\n  content: "\\F033";\n}\n.fa-text-height:before {\n  content: "\\F034";\n}\n.fa-text-width:before {\n  content: "\\F035";\n}\n.fa-align-left:before {\n  content: "\\F036";\n}\n.fa-align-center:before {\n  content: "\\F037";\n}\n.fa-align-right:before {\n  content: "\\F038";\n}\n.fa-align-justify:before {\n  content: "\\F039";\n}\n.fa-list:before {\n  content: "\\F03A";\n}\n.fa-dedent:before,\n.fa-outdent:before {\n  content: "\\F03B";\n}\n.fa-indent:before {\n  content: "\\F03C";\n}\n.fa-video-camera:before {\n  content: "\\F03D";\n}\n.fa-photo:before,\n.fa-image:before,\n.fa-picture-o:before {\n  content: "\\F03E";\n}\n.fa-pencil:before {\n  content: "\\F040";\n}\n.fa-map-marker:before {\n  content: "\\F041";\n}\n.fa-adjust:before {\n  content: "\\F042";\n}\n.fa-tint:before {\n  content: "\\F043";\n}\n.fa-edit:before,\n.fa-pencil-square-o:before {\n  content: "\\F044";\n}\n.fa-share-square-o:before {\n  content: "\\F045";\n}\n.fa-check-square-o:before {\n  content: "\\F046";\n}\n.fa-arrows:before {\n  content: "\\F047";\n}\n.fa-step-backward:before {\n  content: "\\F048";\n}\n.fa-fast-backward:before {\n  content: "\\F049";\n}\n.fa-backward:before {\n  content: "\\F04A";\n}\n.fa-play:before {\n  content: "\\F04B";\n}\n.fa-pause:before {\n  content: "\\F04C";\n}\n.fa-stop:before {\n  content: "\\F04D";\n}\n.fa-forward:before {\n  content: "\\F04E";\n}\n.fa-fast-forward:before {\n  content: "\\F050";\n}\n.fa-step-forward:before {\n  content: "\\F051";\n}\n.fa-eject:before {\n  content: "\\F052";\n}\n.fa-chevron-left:before {\n  content: "\\F053";\n}\n.fa-chevron-right:before {\n  content: "\\F054";\n}\n.fa-plus-circle:before {\n  content: "\\F055";\n}\n.fa-minus-circle:before {\n  content: "\\F056";\n}\n.fa-times-circle:before {\n  content: "\\F057";\n}\n.fa-check-circle:before {\n  content: "\\F058";\n}\n.fa-question-circle:before {\n  content: "\\F059";\n}\n.fa-info-circle:before {\n  content: "\\F05A";\n}\n.fa-crosshairs:before {\n  content: "\\F05B";\n}\n.fa-times-circle-o:before {\n  content: "\\F05C";\n}\n.fa-check-circle-o:before {\n  content: "\\F05D";\n}\n.fa-ban:before {\n  content: "\\F05E";\n}\n.fa-arrow-left:before {\n  content: "\\F060";\n}\n.fa-arrow-right:before {\n  content: "\\F061";\n}\n.fa-arrow-up:before {\n  content: "\\F062";\n}\n.fa-arrow-down:before {\n  content: "\\F063";\n}\n.fa-mail-forward:before,\n.fa-share:before {\n  content: "\\F064";\n}\n.fa-expand:before {\n  content: "\\F065";\n}\n.fa-compress:before {\n  content: "\\F066";\n}\n.fa-plus:before {\n  content: "\\F067";\n}\n.fa-minus:before {\n  content: "\\F068";\n}\n.fa-asterisk:before {\n  content: "\\F069";\n}\n.fa-exclamation-circle:before {\n  content: "\\F06A";\n}\n.fa-gift:before {\n  content: "\\F06B";\n}\n.fa-leaf:before {\n  content: "\\F06C";\n}\n.fa-fire:before {\n  content: "\\F06D";\n}\n.fa-eye:before {\n  content: "\\F06E";\n}\n.fa-eye-slash:before {\n  content: "\\F070";\n}\n.fa-warning:before,\n.fa-exclamation-triangle:before {\n  content: "\\F071";\n}\n.fa-plane:before {\n  content: "\\F072";\n}\n.fa-calendar:before {\n  content: "\\F073";\n}\n.fa-random:before {\n  content: "\\F074";\n}\n.fa-comment:before {\n  content: "\\F075";\n}\n.fa-magnet:before {\n  content: "\\F076";\n}\n.fa-chevron-up:before {\n  content: "\\F077";\n}\n.fa-chevron-down:before {\n  content: "\\F078";\n}\n.fa-retweet:before {\n  content: "\\F079";\n}\n.fa-shopping-cart:before {\n  content: "\\F07A";\n}\n.fa-folder:before {\n  content: "\\F07B";\n}\n.fa-folder-open:before {\n  content: "\\F07C";\n}\n.fa-arrows-v:before {\n  content: "\\F07D";\n}\n.fa-arrows-h:before {\n  content: "\\F07E";\n}\n.fa-bar-chart-o:before,\n.fa-bar-chart:before {\n  content: "\\F080";\n}\n.fa-twitter-square:before {\n  content: "\\F081";\n}\n.fa-facebook-square:before {\n  content: "\\F082";\n}\n.fa-camera-retro:before {\n  content: "\\F083";\n}\n.fa-key:before {\n  content: "\\F084";\n}\n.fa-gears:before,\n.fa-cogs:before {\n  content: "\\F085";\n}\n.fa-comments:before {\n  content: "\\F086";\n}\n.fa-thumbs-o-up:before {\n  content: "\\F087";\n}\n.fa-thumbs-o-down:before {\n  content: "\\F088";\n}\n.fa-star-half:before {\n  content: "\\F089";\n}\n.fa-heart-o:before {\n  content: "\\F08A";\n}\n.fa-sign-out:before {\n  content: "\\F08B";\n}\n.fa-linkedin-square:before {\n  content: "\\F08C";\n}\n.fa-thumb-tack:before {\n  content: "\\F08D";\n}\n.fa-external-link:before {\n  content: "\\F08E";\n}\n.fa-sign-in:before {\n  content: "\\F090";\n}\n.fa-trophy:before {\n  content: "\\F091";\n}\n.fa-github-square:before {\n  content: "\\F092";\n}\n.fa-upload:before {\n  content: "\\F093";\n}\n.fa-lemon-o:before {\n  content: "\\F094";\n}\n.fa-phone:before {\n  content: "\\F095";\n}\n.fa-square-o:before {\n  content: "\\F096";\n}\n.fa-bookmark-o:before {\n  content: "\\F097";\n}\n.fa-phone-square:before {\n  content: "\\F098";\n}\n.fa-twitter:before {\n  content: "\\F099";\n}\n.fa-facebook-f:before,\n.fa-facebook:before {\n  content: "\\F09A";\n}\n.fa-github:before {\n  content: "\\F09B";\n}\n.fa-unlock:before {\n  content: "\\F09C";\n}\n.fa-credit-card:before {\n  content: "\\F09D";\n}\n.fa-feed:before,\n.fa-rss:before {\n  content: "\\F09E";\n}\n.fa-hdd-o:before {\n  content: "\\F0A0";\n}\n.fa-bullhorn:before {\n  content: "\\F0A1";\n}\n.fa-bell:before {\n  content: "\\F0F3";\n}\n.fa-certificate:before {\n  content: "\\F0A3";\n}\n.fa-hand-o-right:before {\n  content: "\\F0A4";\n}\n.fa-hand-o-left:before {\n  content: "\\F0A5";\n}\n.fa-hand-o-up:before {\n  content: "\\F0A6";\n}\n.fa-hand-o-down:before {\n  content: "\\F0A7";\n}\n.fa-arrow-circle-left:before {\n  content: "\\F0A8";\n}\n.fa-arrow-circle-right:before {\n  content: "\\F0A9";\n}\n.fa-arrow-circle-up:before {\n  content: "\\F0AA";\n}\n.fa-arrow-circle-down:before {\n  content: "\\F0AB";\n}\n.fa-globe:before {\n  content: "\\F0AC";\n}\n.fa-wrench:before {\n  content: "\\F0AD";\n}\n.fa-tasks:before {\n  content: "\\F0AE";\n}\n.fa-filter:before {\n  content: "\\F0B0";\n}\n.fa-briefcase:before {\n  content: "\\F0B1";\n}\n.fa-arrows-alt:before {\n  content: "\\F0B2";\n}\n.fa-group:before,\n.fa-users:before {\n  content: "\\F0C0";\n}\n.fa-chain:before,\n.fa-link:before {\n  content: "\\F0C1";\n}\n.fa-cloud:before {\n  content: "\\F0C2";\n}\n.fa-flask:before {\n  content: "\\F0C3";\n}\n.fa-cut:before,\n.fa-scissors:before {\n  content: "\\F0C4";\n}\n.fa-copy:before,\n.fa-files-o:before {\n  content: "\\F0C5";\n}\n.fa-paperclip:before {\n  content: "\\F0C6";\n}\n.fa-save:before,\n.fa-floppy-o:before {\n  content: "\\F0C7";\n}\n.fa-square:before {\n  content: "\\F0C8";\n}\n.fa-navicon:before,\n.fa-reorder:before,\n.fa-bars:before {\n  content: "\\F0C9";\n}\n.fa-list-ul:before {\n  content: "\\F0CA";\n}\n.fa-list-ol:before {\n  content: "\\F0CB";\n}\n.fa-strikethrough:before {\n  content: "\\F0CC";\n}\n.fa-underline:before {\n  content: "\\F0CD";\n}\n.fa-table:before {\n  content: "\\F0CE";\n}\n.fa-magic:before {\n  content: "\\F0D0";\n}\n.fa-truck:before {\n  content: "\\F0D1";\n}\n.fa-pinterest:before {\n  content: "\\F0D2";\n}\n.fa-pinterest-square:before {\n  content: "\\F0D3";\n}\n.fa-google-plus-square:before {\n  content: "\\F0D4";\n}\n.fa-google-plus:before {\n  content: "\\F0D5";\n}\n.fa-money:before {\n  content: "\\F0D6";\n}\n.fa-caret-down:before {\n  content: "\\F0D7";\n}\n.fa-caret-up:before {\n  content: "\\F0D8";\n}\n.fa-caret-left:before {\n  content: "\\F0D9";\n}\n.fa-caret-right:before {\n  content: "\\F0DA";\n}\n.fa-columns:before {\n  content: "\\F0DB";\n}\n.fa-unsorted:before,\n.fa-sort:before {\n  content: "\\F0DC";\n}\n.fa-sort-down:before,\n.fa-sort-desc:before {\n  content: "\\F0DD";\n}\n.fa-sort-up:before,\n.fa-sort-asc:before {\n  content: "\\F0DE";\n}\n.fa-envelope:before {\n  content: "\\F0E0";\n}\n.fa-linkedin:before {\n  content: "\\F0E1";\n}\n.fa-rotate-left:before,\n.fa-undo:before {\n  content: "\\F0E2";\n}\n.fa-legal:before,\n.fa-gavel:before {\n  content: "\\F0E3";\n}\n.fa-dashboard:before,\n.fa-tachometer:before {\n  content: "\\F0E4";\n}\n.fa-comment-o:before {\n  content: "\\F0E5";\n}\n.fa-comments-o:before {\n  content: "\\F0E6";\n}\n.fa-flash:before,\n.fa-bolt:before {\n  content: "\\F0E7";\n}\n.fa-sitemap:before {\n  content: "\\F0E8";\n}\n.fa-umbrella:before {\n  content: "\\F0E9";\n}\n.fa-paste:before,\n.fa-clipboard:before {\n  content: "\\F0EA";\n}\n.fa-lightbulb-o:before {\n  content: "\\F0EB";\n}\n.fa-exchange:before {\n  content: "\\F0EC";\n}\n.fa-cloud-download:before {\n  content: "\\F0ED";\n}\n.fa-cloud-upload:before {\n  content: "\\F0EE";\n}\n.fa-user-md:before {\n  content: "\\F0F0";\n}\n.fa-stethoscope:before {\n  content: "\\F0F1";\n}\n.fa-suitcase:before {\n  content: "\\F0F2";\n}\n.fa-bell-o:before {\n  content: "\\F0A2";\n}\n.fa-coffee:before {\n  content: "\\F0F4";\n}\n.fa-cutlery:before {\n  content: "\\F0F5";\n}\n.fa-file-text-o:before {\n  content: "\\F0F6";\n}\n.fa-building-o:before {\n  content: "\\F0F7";\n}\n.fa-hospital-o:before {\n  content: "\\F0F8";\n}\n.fa-ambulance:before {\n  content: "\\F0F9";\n}\n.fa-medkit:before {\n  content: "\\F0FA";\n}\n.fa-fighter-jet:before {\n  content: "\\F0FB";\n}\n.fa-beer:before {\n  content: "\\F0FC";\n}\n.fa-h-square:before {\n  content: "\\F0FD";\n}\n.fa-plus-square:before {\n  content: "\\F0FE";\n}\n.fa-angle-double-left:before {\n  content: "\\F100";\n}\n.fa-angle-double-right:before {\n  content: "\\F101";\n}\n.fa-angle-double-up:before {\n  content: "\\F102";\n}\n.fa-angle-double-down:before {\n  content: "\\F103";\n}\n.fa-angle-left:before {\n  content: "\\F104";\n}\n.fa-angle-right:before {\n  content: "\\F105";\n}\n.fa-angle-up:before {\n  content: "\\F106";\n}\n.fa-angle-down:before {\n  content: "\\F107";\n}\n.fa-desktop:before {\n  content: "\\F108";\n}\n.fa-laptop:before {\n  content: "\\F109";\n}\n.fa-tablet:before {\n  content: "\\F10A";\n}\n.fa-mobile-phone:before,\n.fa-mobile:before {\n  content: "\\F10B";\n}\n.fa-circle-o:before {\n  content: "\\F10C";\n}\n.fa-quote-left:before {\n  content: "\\F10D";\n}\n.fa-quote-right:before {\n  content: "\\F10E";\n}\n.fa-spinner:before {\n  content: "\\F110";\n}\n.fa-circle:before {\n  content: "\\F111";\n}\n.fa-mail-reply:before,\n.fa-reply:before {\n  content: "\\F112";\n}\n.fa-github-alt:before {\n  content: "\\F113";\n}\n.fa-folder-o:before {\n  content: "\\F114";\n}\n.fa-folder-open-o:before {\n  content: "\\F115";\n}\n.fa-smile-o:before {\n  content: "\\F118";\n}\n.fa-frown-o:before {\n  content: "\\F119";\n}\n.fa-meh-o:before {\n  content: "\\F11A";\n}\n.fa-gamepad:before {\n  content: "\\F11B";\n}\n.fa-keyboard-o:before {\n  content: "\\F11C";\n}\n.fa-flag-o:before {\n  content: "\\F11D";\n}\n.fa-flag-checkered:before {\n  content: "\\F11E";\n}\n.fa-terminal:before {\n  content: "\\F120";\n}\n.fa-code:before {\n  content: "\\F121";\n}\n.fa-mail-reply-all:before,\n.fa-reply-all:before {\n  content: "\\F122";\n}\n.fa-star-half-empty:before,\n.fa-star-half-full:before,\n.fa-star-half-o:before {\n  content: "\\F123";\n}\n.fa-location-arrow:before {\n  content: "\\F124";\n}\n.fa-crop:before {\n  content: "\\F125";\n}\n.fa-code-fork:before {\n  content: "\\F126";\n}\n.fa-unlink:before,\n.fa-chain-broken:before {\n  content: "\\F127";\n}\n.fa-question:before {\n  content: "\\F128";\n}\n.fa-info:before {\n  content: "\\F129";\n}\n.fa-exclamation:before {\n  content: "\\F12A";\n}\n.fa-superscript:before {\n  content: "\\F12B";\n}\n.fa-subscript:before {\n  content: "\\F12C";\n}\n.fa-eraser:before {\n  content: "\\F12D";\n}\n.fa-puzzle-piece:before {\n  content: "\\F12E";\n}\n.fa-microphone:before {\n  content: "\\F130";\n}\n.fa-microphone-slash:before {\n  content: "\\F131";\n}\n.fa-shield:before {\n  content: "\\F132";\n}\n.fa-calendar-o:before {\n  content: "\\F133";\n}\n.fa-fire-extinguisher:before {\n  content: "\\F134";\n}\n.fa-rocket:before {\n  content: "\\F135";\n}\n.fa-maxcdn:before {\n  content: "\\F136";\n}\n.fa-chevron-circle-left:before {\n  content: "\\F137";\n}\n.fa-chevron-circle-right:before {\n  content: "\\F138";\n}\n.fa-chevron-circle-up:before {\n  content: "\\F139";\n}\n.fa-chevron-circle-down:before {\n  content: "\\F13A";\n}\n.fa-html5:before {\n  content: "\\F13B";\n}\n.fa-css3:before {\n  content: "\\F13C";\n}\n.fa-anchor:before {\n  content: "\\F13D";\n}\n.fa-unlock-alt:before {\n  content: "\\F13E";\n}\n.fa-bullseye:before {\n  content: "\\F140";\n}\n.fa-ellipsis-h:before {\n  content: "\\F141";\n}\n.fa-ellipsis-v:before {\n  content: "\\F142";\n}\n.fa-rss-square:before {\n  content: "\\F143";\n}\n.fa-play-circle:before {\n  content: "\\F144";\n}\n.fa-ticket:before {\n  content: "\\F145";\n}\n.fa-minus-square:before {\n  content: "\\F146";\n}\n.fa-minus-square-o:before {\n  content: "\\F147";\n}\n.fa-level-up:before {\n  content: "\\F148";\n}\n.fa-level-down:before {\n  content: "\\F149";\n}\n.fa-check-square:before {\n  content: "\\F14A";\n}\n.fa-pencil-square:before {\n  content: "\\F14B";\n}\n.fa-external-link-square:before {\n  content: "\\F14C";\n}\n.fa-share-square:before {\n  content: "\\F14D";\n}\n.fa-compass:before {\n  content: "\\F14E";\n}\n.fa-toggle-down:before,\n.fa-caret-square-o-down:before {\n  content: "\\F150";\n}\n.fa-toggle-up:before,\n.fa-caret-square-o-up:before {\n  content: "\\F151";\n}\n.fa-toggle-right:before,\n.fa-caret-square-o-right:before {\n  content: "\\F152";\n}\n.fa-euro:before,\n.fa-eur:before {\n  content: "\\F153";\n}\n.fa-gbp:before {\n  content: "\\F154";\n}\n.fa-dollar:before,\n.fa-usd:before {\n  content: "\\F155";\n}\n.fa-rupee:before,\n.fa-inr:before {\n  content: "\\F156";\n}\n.fa-cny:before,\n.fa-rmb:before,\n.fa-yen:before,\n.fa-jpy:before {\n  content: "\\F157";\n}\n.fa-ruble:before,\n.fa-rouble:before,\n.fa-rub:before {\n  content: "\\F158";\n}\n.fa-won:before,\n.fa-krw:before {\n  content: "\\F159";\n}\n.fa-bitcoin:before,\n.fa-btc:before {\n  content: "\\F15A";\n}\n.fa-file:before {\n  content: "\\F15B";\n}\n.fa-file-text:before {\n  content: "\\F15C";\n}\n.fa-sort-alpha-asc:before {\n  content: "\\F15D";\n}\n.fa-sort-alpha-desc:before {\n  content: "\\F15E";\n}\n.fa-sort-amount-asc:before {\n  content: "\\F160";\n}\n.fa-sort-amount-desc:before {\n  content: "\\F161";\n}\n.fa-sort-numeric-asc:before {\n  content: "\\F162";\n}\n.fa-sort-numeric-desc:before {\n  content: "\\F163";\n}\n.fa-thumbs-up:before {\n  content: "\\F164";\n}\n.fa-thumbs-down:before {\n  content: "\\F165";\n}\n.fa-youtube-square:before {\n  content: "\\F166";\n}\n.fa-youtube:before {\n  content: "\\F167";\n}\n.fa-xing:before {\n  content: "\\F168";\n}\n.fa-xing-square:before {\n  content: "\\F169";\n}\n.fa-youtube-play:before {\n  content: "\\F16A";\n}\n.fa-dropbox:before {\n  content: "\\F16B";\n}\n.fa-stack-overflow:before {\n  content: "\\F16C";\n}\n.fa-instagram:before {\n  content: "\\F16D";\n}\n.fa-flickr:before {\n  content: "\\F16E";\n}\n.fa-adn:before {\n  content: "\\F170";\n}\n.fa-bitbucket:before {\n  content: "\\F171";\n}\n.fa-bitbucket-square:before {\n  content: "\\F172";\n}\n.fa-tumblr:before {\n  content: "\\F173";\n}\n.fa-tumblr-square:before {\n  content: "\\F174";\n}\n.fa-long-arrow-down:before {\n  content: "\\F175";\n}\n.fa-long-arrow-up:before {\n  content: "\\F176";\n}\n.fa-long-arrow-left:before {\n  content: "\\F177";\n}\n.fa-long-arrow-right:before {\n  content: "\\F178";\n}\n.fa-apple:before {\n  content: "\\F179";\n}\n.fa-windows:before {\n  content: "\\F17A";\n}\n.fa-android:before {\n  content: "\\F17B";\n}\n.fa-linux:before {\n  content: "\\F17C";\n}\n.fa-dribbble:before {\n  content: "\\F17D";\n}\n.fa-skype:before {\n  content: "\\F17E";\n}\n.fa-foursquare:before {\n  content: "\\F180";\n}\n.fa-trello:before {\n  content: "\\F181";\n}\n.fa-female:before {\n  content: "\\F182";\n}\n.fa-male:before {\n  content: "\\F183";\n}\n.fa-gittip:before,\n.fa-gratipay:before {\n  content: "\\F184";\n}\n.fa-sun-o:before {\n  content: "\\F185";\n}\n.fa-moon-o:before {\n  content: "\\F186";\n}\n.fa-archive:before {\n  content: "\\F187";\n}\n.fa-bug:before {\n  content: "\\F188";\n}\n.fa-vk:before {\n  content: "\\F189";\n}\n.fa-weibo:before {\n  content: "\\F18A";\n}\n.fa-renren:before {\n  content: "\\F18B";\n}\n.fa-pagelines:before {\n  content: "\\F18C";\n}\n.fa-stack-exchange:before {\n  content: "\\F18D";\n}\n.fa-arrow-circle-o-right:before {\n  content: "\\F18E";\n}\n.fa-arrow-circle-o-left:before {\n  content: "\\F190";\n}\n.fa-toggle-left:before,\n.fa-caret-square-o-left:before {\n  content: "\\F191";\n}\n.fa-dot-circle-o:before {\n  content: "\\F192";\n}\n.fa-wheelchair:before {\n  content: "\\F193";\n}\n.fa-vimeo-square:before {\n  content: "\\F194";\n}\n.fa-turkish-lira:before,\n.fa-try:before {\n  content: "\\F195";\n}\n.fa-plus-square-o:before {\n  content: "\\F196";\n}\n.fa-space-shuttle:before {\n  content: "\\F197";\n}\n.fa-slack:before {\n  content: "\\F198";\n}\n.fa-envelope-square:before {\n  content: "\\F199";\n}\n.fa-wordpress:before {\n  content: "\\F19A";\n}\n.fa-openid:before {\n  content: "\\F19B";\n}\n.fa-institution:before,\n.fa-bank:before,\n.fa-university:before {\n  content: "\\F19C";\n}\n.fa-mortar-board:before,\n.fa-graduation-cap:before {\n  content: "\\F19D";\n}\n.fa-yahoo:before {\n  content: "\\F19E";\n}\n.fa-google:before {\n  content: "\\F1A0";\n}\n.fa-reddit:before {\n  content: "\\F1A1";\n}\n.fa-reddit-square:before {\n  content: "\\F1A2";\n}\n.fa-stumbleupon-circle:before {\n  content: "\\F1A3";\n}\n.fa-stumbleupon:before {\n  content: "\\F1A4";\n}\n.fa-delicious:before {\n  content: "\\F1A5";\n}\n.fa-digg:before {\n  content: "\\F1A6";\n}\n.fa-pied-piper-pp:before {\n  content: "\\F1A7";\n}\n.fa-pied-piper-alt:before {\n  content: "\\F1A8";\n}\n.fa-drupal:before {\n  content: "\\F1A9";\n}\n.fa-joomla:before {\n  content: "\\F1AA";\n}\n.fa-language:before {\n  content: "\\F1AB";\n}\n.fa-fax:before {\n  content: "\\F1AC";\n}\n.fa-building:before {\n  content: "\\F1AD";\n}\n.fa-child:before {\n  content: "\\F1AE";\n}\n.fa-paw:before {\n  content: "\\F1B0";\n}\n.fa-spoon:before {\n  content: "\\F1B1";\n}\n.fa-cube:before {\n  content: "\\F1B2";\n}\n.fa-cubes:before {\n  content: "\\F1B3";\n}\n.fa-behance:before {\n  content: "\\F1B4";\n}\n.fa-behance-square:before {\n  content: "\\F1B5";\n}\n.fa-steam:before {\n  content: "\\F1B6";\n}\n.fa-steam-square:before {\n  content: "\\F1B7";\n}\n.fa-recycle:before {\n  content: "\\F1B8";\n}\n.fa-automobile:before,\n.fa-car:before {\n  content: "\\F1B9";\n}\n.fa-cab:before,\n.fa-taxi:before {\n  content: "\\F1BA";\n}\n.fa-tree:before {\n  content: "\\F1BB";\n}\n.fa-spotify:before {\n  content: "\\F1BC";\n}\n.fa-deviantart:before {\n  content: "\\F1BD";\n}\n.fa-soundcloud:before {\n  content: "\\F1BE";\n}\n.fa-database:before {\n  content: "\\F1C0";\n}\n.fa-file-pdf-o:before {\n  content: "\\F1C1";\n}\n.fa-file-word-o:before {\n  content: "\\F1C2";\n}\n.fa-file-excel-o:before {\n  content: "\\F1C3";\n}\n.fa-file-powerpoint-o:before {\n  content: "\\F1C4";\n}\n.fa-file-photo-o:before,\n.fa-file-picture-o:before,\n.fa-file-image-o:before {\n  content: "\\F1C5";\n}\n.fa-file-zip-o:before,\n.fa-file-archive-o:before {\n  content: "\\F1C6";\n}\n.fa-file-sound-o:before,\n.fa-file-audio-o:before {\n  content: "\\F1C7";\n}\n.fa-file-movie-o:before,\n.fa-file-video-o:before {\n  content: "\\F1C8";\n}\n.fa-file-code-o:before {\n  content: "\\F1C9";\n}\n.fa-vine:before {\n  content: "\\F1CA";\n}\n.fa-codepen:before {\n  content: "\\F1CB";\n}\n.fa-jsfiddle:before {\n  content: "\\F1CC";\n}\n.fa-life-bouy:before,\n.fa-life-buoy:before,\n.fa-life-saver:before,\n.fa-support:before,\n.fa-life-ring:before {\n  content: "\\F1CD";\n}\n.fa-circle-o-notch:before {\n  content: "\\F1CE";\n}\n.fa-ra:before,\n.fa-resistance:before,\n.fa-rebel:before {\n  content: "\\F1D0";\n}\n.fa-ge:before,\n.fa-empire:before {\n  content: "\\F1D1";\n}\n.fa-git-square:before {\n  content: "\\F1D2";\n}\n.fa-git:before {\n  content: "\\F1D3";\n}\n.fa-y-combinator-square:before,\n.fa-yc-square:before,\n.fa-hacker-news:before {\n  content: "\\F1D4";\n}\n.fa-tencent-weibo:before {\n  content: "\\F1D5";\n}\n.fa-qq:before {\n  content: "\\F1D6";\n}\n.fa-wechat:before,\n.fa-weixin:before {\n  content: "\\F1D7";\n}\n.fa-send:before,\n.fa-paper-plane:before {\n  content: "\\F1D8";\n}\n.fa-send-o:before,\n.fa-paper-plane-o:before {\n  content: "\\F1D9";\n}\n.fa-history:before {\n  content: "\\F1DA";\n}\n.fa-circle-thin:before {\n  content: "\\F1DB";\n}\n.fa-header:before {\n  content: "\\F1DC";\n}\n.fa-paragraph:before {\n  content: "\\F1DD";\n}\n.fa-sliders:before {\n  content: "\\F1DE";\n}\n.fa-share-alt:before {\n  content: "\\F1E0";\n}\n.fa-share-alt-square:before {\n  content: "\\F1E1";\n}\n.fa-bomb:before {\n  content: "\\F1E2";\n}\n.fa-soccer-ball-o:before,\n.fa-futbol-o:before {\n  content: "\\F1E3";\n}\n.fa-tty:before {\n  content: "\\F1E4";\n}\n.fa-binoculars:before {\n  content: "\\F1E5";\n}\n.fa-plug:before {\n  content: "\\F1E6";\n}\n.fa-slideshare:before {\n  content: "\\F1E7";\n}\n.fa-twitch:before {\n  content: "\\F1E8";\n}\n.fa-yelp:before {\n  content: "\\F1E9";\n}\n.fa-newspaper-o:before {\n  content: "\\F1EA";\n}\n.fa-wifi:before {\n  content: "\\F1EB";\n}\n.fa-calculator:before {\n  content: "\\F1EC";\n}\n.fa-paypal:before {\n  content: "\\F1ED";\n}\n.fa-google-wallet:before {\n  content: "\\F1EE";\n}\n.fa-cc-visa:before {\n  content: "\\F1F0";\n}\n.fa-cc-mastercard:before {\n  content: "\\F1F1";\n}\n.fa-cc-discover:before {\n  content: "\\F1F2";\n}\n.fa-cc-amex:before {\n  content: "\\F1F3";\n}\n.fa-cc-paypal:before {\n  content: "\\F1F4";\n}\n.fa-cc-stripe:before {\n  content: "\\F1F5";\n}\n.fa-bell-slash:before {\n  content: "\\F1F6";\n}\n.fa-bell-slash-o:before {\n  content: "\\F1F7";\n}\n.fa-trash:before {\n  content: "\\F1F8";\n}\n.fa-copyright:before {\n  content: "\\F1F9";\n}\n.fa-at:before {\n  content: "\\F1FA";\n}\n.fa-eyedropper:before {\n  content: "\\F1FB";\n}\n.fa-paint-brush:before {\n  content: "\\F1FC";\n}\n.fa-birthday-cake:before {\n  content: "\\F1FD";\n}\n.fa-area-chart:before {\n  content: "\\F1FE";\n}\n.fa-pie-chart:before {\n  content: "\\F200";\n}\n.fa-line-chart:before {\n  content: "\\F201";\n}\n.fa-lastfm:before {\n  content: "\\F202";\n}\n.fa-lastfm-square:before {\n  content: "\\F203";\n}\n.fa-toggle-off:before {\n  content: "\\F204";\n}\n.fa-toggle-on:before {\n  content: "\\F205";\n}\n.fa-bicycle:before {\n  content: "\\F206";\n}\n.fa-bus:before {\n  content: "\\F207";\n}\n.fa-ioxhost:before {\n  content: "\\F208";\n}\n.fa-angellist:before {\n  content: "\\F209";\n}\n.fa-cc:before {\n  content: "\\F20A";\n}\n.fa-shekel:before,\n.fa-sheqel:before,\n.fa-ils:before {\n  content: "\\F20B";\n}\n.fa-meanpath:before {\n  content: "\\F20C";\n}\n.fa-buysellads:before {\n  content: "\\F20D";\n}\n.fa-connectdevelop:before {\n  content: "\\F20E";\n}\n.fa-dashcube:before {\n  content: "\\F210";\n}\n.fa-forumbee:before {\n  content: "\\F211";\n}\n.fa-leanpub:before {\n  content: "\\F212";\n}\n.fa-sellsy:before {\n  content: "\\F213";\n}\n.fa-shirtsinbulk:before {\n  content: "\\F214";\n}\n.fa-simplybuilt:before {\n  content: "\\F215";\n}\n.fa-skyatlas:before {\n  content: "\\F216";\n}\n.fa-cart-plus:before {\n  content: "\\F217";\n}\n.fa-cart-arrow-down:before {\n  content: "\\F218";\n}\n.fa-diamond:before {\n  content: "\\F219";\n}\n.fa-ship:before {\n  content: "\\F21A";\n}\n.fa-user-secret:before {\n  content: "\\F21B";\n}\n.fa-motorcycle:before {\n  content: "\\F21C";\n}\n.fa-street-view:before {\n  content: "\\F21D";\n}\n.fa-heartbeat:before {\n  content: "\\F21E";\n}\n.fa-venus:before {\n  content: "\\F221";\n}\n.fa-mars:before {\n  content: "\\F222";\n}\n.fa-mercury:before {\n  content: "\\F223";\n}\n.fa-intersex:before,\n.fa-transgender:before {\n  content: "\\F224";\n}\n.fa-transgender-alt:before {\n  content: "\\F225";\n}\n.fa-venus-double:before {\n  content: "\\F226";\n}\n.fa-mars-double:before {\n  content: "\\F227";\n}\n.fa-venus-mars:before {\n  content: "\\F228";\n}\n.fa-mars-stroke:before {\n  content: "\\F229";\n}\n.fa-mars-stroke-v:before {\n  content: "\\F22A";\n}\n.fa-mars-stroke-h:before {\n  content: "\\F22B";\n}\n.fa-neuter:before {\n  content: "\\F22C";\n}\n.fa-genderless:before {\n  content: "\\F22D";\n}\n.fa-facebook-official:before {\n  content: "\\F230";\n}\n.fa-pinterest-p:before {\n  content: "\\F231";\n}\n.fa-whatsapp:before {\n  content: "\\F232";\n}\n.fa-server:before {\n  content: "\\F233";\n}\n.fa-user-plus:before {\n  content: "\\F234";\n}\n.fa-user-times:before {\n  content: "\\F235";\n}\n.fa-hotel:before,\n.fa-bed:before {\n  content: "\\F236";\n}\n.fa-viacoin:before {\n  content: "\\F237";\n}\n.fa-train:before {\n  content: "\\F238";\n}\n.fa-subway:before {\n  content: "\\F239";\n}\n.fa-medium:before {\n  content: "\\F23A";\n}\n.fa-yc:before,\n.fa-y-combinator:before {\n  content: "\\F23B";\n}\n.fa-optin-monster:before {\n  content: "\\F23C";\n}\n.fa-opencart:before {\n  content: "\\F23D";\n}\n.fa-expeditedssl:before {\n  content: "\\F23E";\n}\n.fa-battery-4:before,\n.fa-battery:before,\n.fa-battery-full:before {\n  content: "\\F240";\n}\n.fa-battery-3:before,\n.fa-battery-three-quarters:before {\n  content: "\\F241";\n}\n.fa-battery-2:before,\n.fa-battery-half:before {\n  content: "\\F242";\n}\n.fa-battery-1:before,\n.fa-battery-quarter:before {\n  content: "\\F243";\n}\n.fa-battery-0:before,\n.fa-battery-empty:before {\n  content: "\\F244";\n}\n.fa-mouse-pointer:before {\n  content: "\\F245";\n}\n.fa-i-cursor:before {\n  content: "\\F246";\n}\n.fa-object-group:before {\n  content: "\\F247";\n}\n.fa-object-ungroup:before {\n  content: "\\F248";\n}\n.fa-sticky-note:before {\n  content: "\\F249";\n}\n.fa-sticky-note-o:before {\n  content: "\\F24A";\n}\n.fa-cc-jcb:before {\n  content: "\\F24B";\n}\n.fa-cc-diners-club:before {\n  content: "\\F24C";\n}\n.fa-clone:before {\n  content: "\\F24D";\n}\n.fa-balance-scale:before {\n  content: "\\F24E";\n}\n.fa-hourglass-o:before {\n  content: "\\F250";\n}\n.fa-hourglass-1:before,\n.fa-hourglass-start:before {\n  content: "\\F251";\n}\n.fa-hourglass-2:before,\n.fa-hourglass-half:before {\n  content: "\\F252";\n}\n.fa-hourglass-3:before,\n.fa-hourglass-end:before {\n  content: "\\F253";\n}\n.fa-hourglass:before {\n  content: "\\F254";\n}\n.fa-hand-grab-o:before,\n.fa-hand-rock-o:before {\n  content: "\\F255";\n}\n.fa-hand-stop-o:before,\n.fa-hand-paper-o:before {\n  content: "\\F256";\n}\n.fa-hand-scissors-o:before {\n  content: "\\F257";\n}\n.fa-hand-lizard-o:before {\n  content: "\\F258";\n}\n.fa-hand-spock-o:before {\n  content: "\\F259";\n}\n.fa-hand-pointer-o:before {\n  content: "\\F25A";\n}\n.fa-hand-peace-o:before {\n  content: "\\F25B";\n}\n.fa-trademark:before {\n  content: "\\F25C";\n}\n.fa-registered:before {\n  content: "\\F25D";\n}\n.fa-creative-commons:before {\n  content: "\\F25E";\n}\n.fa-gg:before {\n  content: "\\F260";\n}\n.fa-gg-circle:before {\n  content: "\\F261";\n}\n.fa-tripadvisor:before {\n  content: "\\F262";\n}\n.fa-odnoklassniki:before {\n  content: "\\F263";\n}\n.fa-odnoklassniki-square:before {\n  content: "\\F264";\n}\n.fa-get-pocket:before {\n  content: "\\F265";\n}\n.fa-wikipedia-w:before {\n  content: "\\F266";\n}\n.fa-safari:before {\n  content: "\\F267";\n}\n.fa-chrome:before {\n  content: "\\F268";\n}\n.fa-firefox:before {\n  content: "\\F269";\n}\n.fa-opera:before {\n  content: "\\F26A";\n}\n.fa-internet-explorer:before {\n  content: "\\F26B";\n}\n.fa-tv:before,\n.fa-television:before {\n  content: "\\F26C";\n}\n.fa-contao:before {\n  content: "\\F26D";\n}\n.fa-500px:before {\n  content: "\\F26E";\n}\n.fa-amazon:before {\n  content: "\\F270";\n}\n.fa-calendar-plus-o:before {\n  content: "\\F271";\n}\n.fa-calendar-minus-o:before {\n  content: "\\F272";\n}\n.fa-calendar-times-o:before {\n  content: "\\F273";\n}\n.fa-calendar-check-o:before {\n  content: "\\F274";\n}\n.fa-industry:before {\n  content: "\\F275";\n}\n.fa-map-pin:before {\n  content: "\\F276";\n}\n.fa-map-signs:before {\n  content: "\\F277";\n}\n.fa-map-o:before {\n  content: "\\F278";\n}\n.fa-map:before {\n  content: "\\F279";\n}\n.fa-commenting:before {\n  content: "\\F27A";\n}\n.fa-commenting-o:before {\n  content: "\\F27B";\n}\n.fa-houzz:before {\n  content: "\\F27C";\n}\n.fa-vimeo:before {\n  content: "\\F27D";\n}\n.fa-black-tie:before {\n  content: "\\F27E";\n}\n.fa-fonticons:before {\n  content: "\\F280";\n}\n.fa-reddit-alien:before {\n  content: "\\F281";\n}\n.fa-edge:before {\n  content: "\\F282";\n}\n.fa-credit-card-alt:before {\n  content: "\\F283";\n}\n.fa-codiepie:before {\n  content: "\\F284";\n}\n.fa-modx:before {\n  content: "\\F285";\n}\n.fa-fort-awesome:before {\n  content: "\\F286";\n}\n.fa-usb:before {\n  content: "\\F287";\n}\n.fa-product-hunt:before {\n  content: "\\F288";\n}\n.fa-mixcloud:before {\n  content: "\\F289";\n}\n.fa-scribd:before {\n  content: "\\F28A";\n}\n.fa-pause-circle:before {\n  content: "\\F28B";\n}\n.fa-pause-circle-o:before {\n  content: "\\F28C";\n}\n.fa-stop-circle:before {\n  content: "\\F28D";\n}\n.fa-stop-circle-o:before {\n  content: "\\F28E";\n}\n.fa-shopping-bag:before {\n  content: "\\F290";\n}\n.fa-shopping-basket:before {\n  content: "\\F291";\n}\n.fa-hashtag:before {\n  content: "\\F292";\n}\n.fa-bluetooth:before {\n  content: "\\F293";\n}\n.fa-bluetooth-b:before {\n  content: "\\F294";\n}\n.fa-percent:before {\n  content: "\\F295";\n}\n.fa-gitlab:before {\n  content: "\\F296";\n}\n.fa-wpbeginner:before {\n  content: "\\F297";\n}\n.fa-wpforms:before {\n  content: "\\F298";\n}\n.fa-envira:before {\n  content: "\\F299";\n}\n.fa-universal-access:before {\n  content: "\\F29A";\n}\n.fa-wheelchair-alt:before {\n  content: "\\F29B";\n}\n.fa-question-circle-o:before {\n  content: "\\F29C";\n}\n.fa-blind:before {\n  content: "\\F29D";\n}\n.fa-audio-description:before {\n  content: "\\F29E";\n}\n.fa-volume-control-phone:before {\n  content: "\\F2A0";\n}\n.fa-braille:before {\n  content: "\\F2A1";\n}\n.fa-assistive-listening-systems:before {\n  content: "\\F2A2";\n}\n.fa-asl-interpreting:before,\n.fa-american-sign-language-interpreting:before {\n  content: "\\F2A3";\n}\n.fa-deafness:before,\n.fa-hard-of-hearing:before,\n.fa-deaf:before {\n  content: "\\F2A4";\n}\n.fa-glide:before {\n  content: "\\F2A5";\n}\n.fa-glide-g:before {\n  content: "\\F2A6";\n}\n.fa-signing:before,\n.fa-sign-language:before {\n  content: "\\F2A7";\n}\n.fa-low-vision:before {\n  content: "\\F2A8";\n}\n.fa-viadeo:before {\n  content: "\\F2A9";\n}\n.fa-viadeo-square:before {\n  content: "\\F2AA";\n}\n.fa-snapchat:before {\n  content: "\\F2AB";\n}\n.fa-snapchat-ghost:before {\n  content: "\\F2AC";\n}\n.fa-snapchat-square:before {\n  content: "\\F2AD";\n}\n.fa-pied-piper:before {\n  content: "\\F2AE";\n}\n.fa-first-order:before {\n  content: "\\F2B0";\n}\n.fa-yoast:before {\n  content: "\\F2B1";\n}\n.fa-themeisle:before {\n  content: "\\F2B2";\n}\n.fa-google-plus-circle:before,\n.fa-google-plus-official:before {\n  content: "\\F2B3";\n}\n.fa-fa:before,\n.fa-font-awesome:before {\n  content: "\\F2B4";\n}\n.fa-handshake-o:before {\n  content: "\\F2B5";\n}\n.fa-envelope-open:before {\n  content: "\\F2B6";\n}\n.fa-envelope-open-o:before {\n  content: "\\F2B7";\n}\n.fa-linode:before {\n  content: "\\F2B8";\n}\n.fa-address-book:before {\n  content: "\\F2B9";\n}\n.fa-address-book-o:before {\n  content: "\\F2BA";\n}\n.fa-vcard:before,\n.fa-address-card:before {\n  content: "\\F2BB";\n}\n.fa-vcard-o:before,\n.fa-address-card-o:before {\n  content: "\\F2BC";\n}\n.fa-user-circle:before {\n  content: "\\F2BD";\n}\n.fa-user-circle-o:before {\n  content: "\\F2BE";\n}\n.fa-user-o:before {\n  content: "\\F2C0";\n}\n.fa-id-badge:before {\n  content: "\\F2C1";\n}\n.fa-drivers-license:before,\n.fa-id-card:before {\n  content: "\\F2C2";\n}\n.fa-drivers-license-o:before,\n.fa-id-card-o:before {\n  content: "\\F2C3";\n}\n.fa-quora:before {\n  content: "\\F2C4";\n}\n.fa-free-code-camp:before {\n  content: "\\F2C5";\n}\n.fa-telegram:before {\n  content: "\\F2C6";\n}\n.fa-thermometer-4:before,\n.fa-thermometer:before,\n.fa-thermometer-full:before {\n  content: "\\F2C7";\n}\n.fa-thermometer-3:before,\n.fa-thermometer-three-quarters:before {\n  content: "\\F2C8";\n}\n.fa-thermometer-2:before,\n.fa-thermometer-half:before {\n  content: "\\F2C9";\n}\n.fa-thermometer-1:before,\n.fa-thermometer-quarter:before {\n  content: "\\F2CA";\n}\n.fa-thermometer-0:before,\n.fa-thermometer-empty:before {\n  content: "\\F2CB";\n}\n.fa-shower:before {\n  content: "\\F2CC";\n}\n.fa-bathtub:before,\n.fa-s15:before,\n.fa-bath:before {\n  content: "\\F2CD";\n}\n.fa-podcast:before {\n  content: "\\F2CE";\n}\n.fa-window-maximize:before {\n  content: "\\F2D0";\n}\n.fa-window-minimize:before {\n  content: "\\F2D1";\n}\n.fa-window-restore:before {\n  content: "\\F2D2";\n}\n.fa-times-rectangle:before,\n.fa-window-close:before {\n  content: "\\F2D3";\n}\n.fa-times-rectangle-o:before,\n.fa-window-close-o:before {\n  content: "\\F2D4";\n}\n.fa-bandcamp:before {\n  content: "\\F2D5";\n}\n.fa-grav:before {\n  content: "\\F2D6";\n}\n.fa-etsy:before {\n  content: "\\F2D7";\n}\n.fa-imdb:before {\n  content: "\\F2D8";\n}\n.fa-ravelry:before {\n  content: "\\F2D9";\n}\n.fa-eercast:before {\n  content: "\\F2DA";\n}\n.fa-microchip:before {\n  content: "\\F2DB";\n}\n.fa-snowflake-o:before {\n  content: "\\F2DC";\n}\n.fa-superpowers:before {\n  content: "\\F2DD";\n}\n.fa-wpexplorer:before {\n  content: "\\F2DE";\n}\n.fa-meetup:before {\n  content: "\\F2E0";\n}\n.sr-only {\n  position: absolute;\n  width: 1px;\n  height: 1px;\n  padding: 0;\n  margin: -1px;\n  overflow: hidden;\n  clip: rect(0, 0, 0, 0);\n  border: 0;\n}\n.sr-only-focusable:active,\n.sr-only-focusable:focus {\n  position: static;\n  width: auto;\n  height: auto;\n  margin: 0;\n  overflow: visible;\n  clip: auto;\n}\n',""])},function(n,e){n.exports=function(n){return"string"!=typeof n?n:(/^['"].*['"]$/.test(n)&&(n=n.slice(1,-1)),/["'() \t\n]/.test(n)?'"'+n.replace(/"/g,'\\"').replace(/\n/g,"\\n")+'"':n)}},function(n,e,t){n.exports=t.p+"674f50d287a8c48dc19ba404d20fe713.eot"},function(n,e,t){n.exports=t.p+"674f50d287a8c48dc19ba404d20fe713.eot"},function(n,e,t){n.exports=t.p+"af7ae505a9eed503f8b8e6982036873e.woff2"},function(n,e,t){n.exports=t.p+"fee66e712a8a08eef5805a46892932ad.woff"},function(n,e,t){n.exports=t.p+"b06871f281fee6b241d60582ae9369b9.ttf"},function(n,e,t){n.exports=t.p+"912ec66d7572ff821749319396470bde.svg"},function(n,e){
/*!
 *	Mimic (XML-RPC Client for JavaScript) v2.3 
 *	Copyright (C) 2005-2013 Carlos Eduardo Goncalves (cadu.goncalves@gmail.com)
 *
 *	Mimic is dual licensed under the MIT (http://opensource.org/licenses/mit-license.php) 
 * 	and GPLv3 (http://opensource.org/licenses/gpl-3.0.html) licenses.
 */
function t(){}function r(n,e){this.serviceUrl=n,this.methodName=e,this.crossDomain=!1,this.withCredentials=!1,this.params=[],this.headers={}}function o(n){this.xmlData=n}function i(){}function a(n){this.bytes=n}t.PROLOG='<?xml version="1.0"?>\n',t.REQUEST="<methodCall>\n<methodName>${METHOD}</methodName>\n<params>\n${DATA}</params>\n</methodCall>",t.PARAM="<param>\n<value>\n${DATA}</value>\n</param>\n",t.ARRAY="<array>\n<data>\n${DATA}</data>\n</array>\n",t.STRUCT="<struct>\n${DATA}</struct>\n",t.MEMBER="<member>\n${DATA}</member>\n",t.NAME="<name>${DATA}</name>\n",t.VALUE="<value>\n${DATA}</value>\n",t.SCALAR="<${TYPE}>${DATA}</${TYPE}>\n",t.getDataTag=function(n){try{var e=typeof n;switch(e.toLowerCase()){case"number":e=Math.round(n)==n?"int":"double";break;case"object":e=n.constructor==a?"base64":n.constructor==String?"string":n.constructor==Boolean?"boolean":n.constructor==Array?"array":n.constructor==Date?"dateTime.iso8601":n.constructor==Number?Math.round(n)==n?"int":"double":"struct"}return e}catch(n){return null}},t.getTagData=function(n){var e=null;switch(n){case"struct":e=new Object;break;case"array":e=new Array;break;case"datetime.iso8601":e=new Date;break;case"boolean":e=new Boolean;break;case"int":case"i4":case"double":e=new Number;break;case"string":e=new String;break;case"base64":e=new a}return e},r.prototype.addParam=function(n){switch((typeof n).toLowerCase()){case"function":return;case"object":if(!n.constructor.name)return}this.params.push(n)},r.prototype.clearParams=function(){this.params.splice(0,this.params.length)},r.prototype.setHeader=function(n,e){e?this.headers[n]=e:delete this.headers[n]},r.prototype.send=function(){var n,e,r="",a=0;for(a=0;a<this.params.length;a++)r+=t.PARAM.replace("${DATA}",this.marshal(this.params[a]));for(a in n=t.REQUEST.replace("${METHOD}",this.methodName),n=t.PROLOG+n.replace("${DATA}",r),(e=i.buildXHR(this.crossDomain)).open("POST",this.serviceUrl,!1),this.headers)this.headers.hasOwnProperty(a)&&e.setRequestHeader(a,this.headers[a]);return this.withCredentials&&"withCredentials"in e&&(e.withCredentials=!0),e.send(i.buildDOM(n)),new o(e.responseXML)},r.prototype.marshal=function(n){var e,r,o,i=t.getDataTag(n),a=t.SCALAR.replace(/\$\{TYPE\}/g,i),f="";switch(i){case"struct":for(r in o="",n)e="",e+=t.NAME.replace("${DATA}",r),e+=t.VALUE.replace("${DATA}",this.marshal(n[r])),o+=t.MEMBER.replace("${DATA}",e);f=t.STRUCT.replace("${DATA}",o);break;case"array":for(e="",r=0;r<n.length;r++)e+=t.VALUE.replace("${DATA}",this.marshal(n[r]));f=t.ARRAY.replace("${DATA}",e);break;case"dateTime.iso8601":f=a.replace("${DATA}",n.toIso8601());break;case"boolean":f=a.replace("${DATA}",1==n?1:0);break;case"base64":f=a.replace("${DATA}",n.encode());break;default:f=a.replace("${DATA}",n)}return f},o.prototype.isFault=function(){return this.faultValue},o.prototype.parseXML=function(){var n,e;for(e=this.xmlData.childNodes.length,this.faultValue=void 0,this.currentIsName=!1,this.propertyName="",this.params=[],n=0;n<e;n++)this.unmarshal(this.xmlData.childNodes[n],0);return this.params[0]},o.prototype.unmarshal=function(n,e){var r,o,i,f;if(1==n.nodeType){switch(r=null,o=n.tagName.toLowerCase()){case"fault":this.faultValue=!0;break;case"name":this.currentIsName=!0;break;default:r=t.getTagData(o)}if(null!=r&&(this.params.push(r),"struct"==o||"array"==o)){if(this.params.length>1)switch(t.getDataTag(this.params[e])){case"struct":this.params[e][this.propertyName]=this.params[this.params.length-1];break;case"array":this.params[e].push(this.params[this.params.length-1])}e=this.params.length-1}for(f=n.childNodes.length,i=0;i<f;i++)this.unmarshal(n.childNodes[i],e)}if(3==n.nodeType&&/[^\t\n\r ]/.test(n.nodeValue))if(1==this.currentIsName)this.propertyName=n.nodeValue,this.currentIsName=!1;else{switch(t.getDataTag(this.params[this.params.length-1])){case"dateTime.iso8601":this.params[this.params.length-1]=Date.fromIso8601(n.nodeValue);break;case"boolean":this.params[this.params.length-1]="1"==n.nodeValue;break;case"int":case"double":this.params[this.params.length-1]=new Number(n.nodeValue);break;case"string":this.params[this.params.length-1]=new String(n.nodeValue);break;case"base64":this.params[this.params.length-1]=new a(n.nodeValue)}if(this.params.length>1)switch(t.getDataTag(this.params[e])){case"struct":this.params[e][this.propertyName]=this.params[this.params.length-1];break;case"array":this.params[e].push(this.params[this.params.length-1])}}},i.buildXHR=function(n){return n?"undefined"!=typeof XDomainRequest?new XDomainRequest:new XMLHttpRequest:"undefined"!=typeof XMLHttpRequest?new XMLHttpRequest:new ActiveXObject("Microsoft.XMLHTTP")},i.buildDOM=function(n){var e,t,r;if("undefined"!=typeof DOMParser)return(e=new DOMParser).parseFromString(n,"text/xml");for(t=["Microsoft.XMLDOM","MSXML2.DOMDocument","MSXML.DOMDocument"],r=0;r<t.length;r++)try{return(e=new ActiveXObject(t[r])).loadXML(n),e}catch(n){}return null},Date.prototype.toIso8601=function(){var n=this.getYear(),e=this.getMonth()+1,t=this.getDate();return n<1900&&(n+=1900),e<10&&(e="0"+e),t<10&&(t="0"+t),n+e+t+"T"+this.toTimeString().substr(0,8)},Date.fromIso8601=function(n){var e=n.substr(0,4),t=n.substr(4,2),r=n.substr(6,2),o=n.substr(9,2),i=n.substr(12,2),a=n.substr(15,2);return new Date(e,t-1,r,o,i,a,0)},a.CHAR_MAP="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=",a.prototype.encode=function(){if("function"==typeof btoa)return btoa(this.bytes);var n=[],e=[],t=[],r=0,o=0;for(o=0;o<this.bytes.length;o+=3)n[0]=this.bytes.charCodeAt(o),n[1]=this.bytes.charCodeAt(o+1),n[2]=this.bytes.charCodeAt(o+2),e[0]=n[0]>>2,e[1]=(3&n[0])<<4|n[1]>>4,e[2]=(15&n[1])<<2|n[2]>>6,e[3]=63&n[2],isNaN(n[1])?e[2]=e[3]=64:isNaN(n[2])&&(e[3]=64),t[r++]=a.CHAR_MAP.charAt(e[0])+a.CHAR_MAP.charAt(e[1])+a.CHAR_MAP.charAt(e[2])+a.CHAR_MAP.charAt(e[3]);return t.join("")},a.prototype.decode=function(){if("function"==typeof atob)return atob(this.bytes);for(var n=[],e=[],t=[],r=0,o=0;this.bytes.length%4!=0;)this.bytes+="=";for(o=0;o<this.bytes.length;o+=4)e[0]=a.CHAR_MAP.indexOf(this.bytes.charAt(o)),e[1]=a.CHAR_MAP.indexOf(this.bytes.charAt(o+1)),e[2]=a.CHAR_MAP.indexOf(this.bytes.charAt(o+2)),e[3]=a.CHAR_MAP.indexOf(this.bytes.charAt(o+3)),n[0]=e[0]<<2|e[1]>>4,n[1]=(15&e[1])<<4|e[2]>>2,n[2]=(3&e[2])<<6|e[3],t[r++]=String.fromCharCode(n[0]),64!=e[2]&&(t[r++]=String.fromCharCode(n[1])),64!=e[3]&&(t[r++]=String.fromCharCode(n[2]));return t.join("")}},function(n,e,t){"use strict";t.r(e);var r=function(n,e){return n<e?-1:n>e?1:n>=e?0:NaN},o=function(n){var e;return 1===n.length&&(e=n,n=function(n,t){return r(e(n),t)}),{left:function(e,t,r,o){for(null==r&&(r=0),null==o&&(o=e.length);r<o;){var i=r+o>>>1;n(e[i],t)<0?r=i+1:o=i}return r},right:function(e,t,r,o){for(null==r&&(r=0),null==o&&(o=e.length);r<o;){var i=r+o>>>1;n(e[i],t)>0?o=i:r=i+1}return r}}};var i=o(r);i.right,i.left;var a=Array.prototype;a.slice,a.map,Math.sqrt(50),Math.sqrt(10),Math.sqrt(2);var f=function(n){for(var e,t,r,o=n.length,i=-1,a=0;++i<o;)a+=n[i].length;for(t=new Array(a);--o>=0;)for(e=(r=n[o]).length;--e>=0;)t[--a]=r[e];return t};Array.prototype.slice;var c={value:function(){}};function s(){for(var n,e=0,t=arguments.length,r={};e<t;++e){if(!(n=arguments[e]+"")||n in r)throw new Error("illegal type: "+n);r[n]=[]}return new u(r)}function u(n){this._=n}function l(n,e){for(var t,r=0,o=n.length;r<o;++r)if((t=n[r]).name===e)return t.value}function h(n,e,t){for(var r=0,o=n.length;r<o;++r)if(n[r].name===e){n[r]=c,n=n.slice(0,r).concat(n.slice(r+1));break}return null!=t&&n.push({name:e,value:t}),n}u.prototype=s.prototype={constructor:u,on:function(n,e){var t,r,o=this._,i=(r=o,(n+"").trim().split(/^|\s+/).map(function(n){var e="",t=n.indexOf(".");if(t>=0&&(e=n.slice(t+1),n=n.slice(0,t)),n&&!r.hasOwnProperty(n))throw new Error("unknown type: "+n);return{type:n,name:e}})),a=-1,f=i.length;if(!(arguments.length<2)){if(null!=e&&"function"!=typeof e)throw new Error("invalid callback: "+e);for(;++a<f;)if(t=(n=i[a]).type)o[t]=h(o[t],n.name,e);else if(null==e)for(t in o)o[t]=h(o[t],n.name,null);return this}for(;++a<f;)if((t=(n=i[a]).type)&&(t=l(o[t],n.name)))return t},copy:function(){var n={},e=this._;for(var t in e)n[t]=e[t].slice();return new u(n)},call:function(n,e){if((t=arguments.length-2)>0)for(var t,r,o=new Array(t),i=0;i<t;++i)o[i]=arguments[i+2];if(!this._.hasOwnProperty(n))throw new Error("unknown type: "+n);for(i=0,t=(r=this._[n]).length;i<t;++i)r[i].value.apply(e,o)},apply:function(n,e,t){if(!this._.hasOwnProperty(n))throw new Error("unknown type: "+n);for(var r=this._[n],o=0,i=r.length;o<i;++o)r[o].value.apply(e,t)}};var d=s,b="http://www.w3.org/1999/xhtml",p={svg:"http://www.w3.org/2000/svg",xhtml:b,xlink:"http://www.w3.org/1999/xlink",xml:"http://www.w3.org/XML/1998/namespace",xmlns:"http://www.w3.org/2000/xmlns/"},_=function(n){var e=n+="",t=e.indexOf(":");return t>=0&&"xmlns"!==(e=n.slice(0,t))&&(n=n.slice(t+1)),p.hasOwnProperty(e)?{space:p[e],local:n}:n};var g=function(n){var e=_(n);return(e.local?function(n){return function(){return this.ownerDocument.createElementNS(n.space,n.local)}}:function(n){return function(){var e=this.ownerDocument,t=this.namespaceURI;return t===b&&e.documentElement.namespaceURI===b?e.createElement(n):e.createElementNS(t,n)}})(e)};function y(){}var m=function(n){return null==n?y:function(){return this.querySelector(n)}};function v(){return[]}var x=function(n){return null==n?v:function(){return this.querySelectorAll(n)}},w=function(n){return function(){return this.matches(n)}};if("undefined"!=typeof document){var F=document.documentElement;if(!F.matches){var A=F.webkitMatchesSelector||F.msMatchesSelector||F.mozMatchesSelector||F.oMatchesSelector;w=function(n){return function(){return A.call(this,n)}}}}var k=w,M=function(n){return new Array(n.length)};function C(n,e){this.ownerDocument=n.ownerDocument,this.namespaceURI=n.namespaceURI,this._next=null,this._parent=n,this.__data__=e}C.prototype={constructor:C,appendChild:function(n){return this._parent.insertBefore(n,this._next)},insertBefore:function(n,e){return this._parent.insertBefore(n,e)},querySelector:function(n){return this._parent.querySelector(n)},querySelectorAll:function(n){return this._parent.querySelectorAll(n)}};var E="$";function T(n,e,t,r,o,i){for(var a,f=0,c=e.length,s=i.length;f<s;++f)(a=e[f])?(a.__data__=i[f],r[f]=a):t[f]=new C(n,i[f]);for(;f<c;++f)(a=e[f])&&(o[f]=a)}function N(n,e,t,r,o,i,a){var f,c,s,u={},l=e.length,h=i.length,d=new Array(l);for(f=0;f<l;++f)(c=e[f])&&(d[f]=s=E+a.call(c,c.__data__,f,e),s in u?o[f]=c:u[s]=c);for(f=0;f<h;++f)(c=u[s=E+a.call(n,i[f],f,i)])?(r[f]=c,c.__data__=i[f],u[s]=null):t[f]=new C(n,i[f]);for(f=0;f<l;++f)(c=e[f])&&u[d[f]]===c&&(o[f]=c)}function D(n,e){return n<e?-1:n>e?1:n>=e?0:NaN}var S=function(n){return n.ownerDocument&&n.ownerDocument.defaultView||n.document&&n||n.defaultView};function P(n,e){return n.style.getPropertyValue(e)||S(n).getComputedStyle(n,null).getPropertyValue(e)}function U(n){return n.trim().split(/^|\s+/)}function B(n){return n.classList||new L(n)}function L(n){this._node=n,this._names=U(n.getAttribute("class")||"")}function R(n,e){for(var t=B(n),r=-1,o=e.length;++r<o;)t.add(e[r])}function O(n,e){for(var t=B(n),r=-1,o=e.length;++r<o;)t.remove(e[r])}L.prototype={add:function(n){this._names.indexOf(n)<0&&(this._names.push(n),this._node.setAttribute("class",this._names.join(" ")))},remove:function(n){var e=this._names.indexOf(n);e>=0&&(this._names.splice(e,1),this._node.setAttribute("class",this._names.join(" ")))},contains:function(n){return this._names.indexOf(n)>=0}};function I(){this.textContent=""}function q(){this.innerHTML=""}function j(){this.nextSibling&&this.parentNode.appendChild(this)}function z(){this.previousSibling&&this.parentNode.insertBefore(this,this.parentNode.firstChild)}function H(){return null}function Y(){var n=this.parentNode;n&&n.removeChild(this)}function $(){return this.parentNode.insertBefore(this.cloneNode(!1),this.nextSibling)}function X(){return this.parentNode.insertBefore(this.cloneNode(!0),this.nextSibling)}var V={},G=null;"undefined"!=typeof document&&("onmouseenter"in document.documentElement||(V={mouseenter:"mouseover",mouseleave:"mouseout"}));function Z(n,e,t){return n=W(n,e,t),function(e){var t=e.relatedTarget;t&&(t===this||8&t.compareDocumentPosition(this))||n.call(this,e)}}function W(n,e,t){return function(r){var o=G;G=r;try{n.call(this,this.__data__,e,t)}finally{G=o}}}function Q(n){return function(){var e=this.__on;if(e){for(var t,r=0,o=-1,i=e.length;r<i;++r)t=e[r],n.type&&t.type!==n.type||t.name!==n.name?e[++o]=t:this.removeEventListener(t.type,t.listener,t.capture);++o?e.length=o:delete this.__on}}}function J(n,e,t){var r=V.hasOwnProperty(n.type)?Z:W;return function(o,i,a){var f,c=this.__on,s=r(e,i,a);if(c)for(var u=0,l=c.length;u<l;++u)if((f=c[u]).type===n.type&&f.name===n.name)return this.removeEventListener(f.type,f.listener,f.capture),this.addEventListener(f.type,f.listener=s,f.capture=t),void(f.value=e);this.addEventListener(n.type,s,t),f={type:n.type,name:n.name,value:e,listener:s,capture:t},c?c.push(f):this.__on=[f]}}function K(n,e,t){var r=S(n),o=r.CustomEvent;"function"==typeof o?o=new o(e,t):(o=r.document.createEvent("Event"),t?(o.initEvent(e,t.bubbles,t.cancelable),o.detail=t.detail):o.initEvent(e,!1,!1)),n.dispatchEvent(o)}var nn=[null];function en(n,e){this._groups=n,this._parents=e}function tn(){return new en([[document.documentElement]],nn)}en.prototype=tn.prototype={constructor:en,select:function(n){"function"!=typeof n&&(n=m(n));for(var e=this._groups,t=e.length,r=new Array(t),o=0;o<t;++o)for(var i,a,f=e[o],c=f.length,s=r[o]=new Array(c),u=0;u<c;++u)(i=f[u])&&(a=n.call(i,i.__data__,u,f))&&("__data__"in i&&(a.__data__=i.__data__),s[u]=a);return new en(r,this._parents)},selectAll:function(n){"function"!=typeof n&&(n=x(n));for(var e=this._groups,t=e.length,r=[],o=[],i=0;i<t;++i)for(var a,f=e[i],c=f.length,s=0;s<c;++s)(a=f[s])&&(r.push(n.call(a,a.__data__,s,f)),o.push(a));return new en(r,o)},filter:function(n){"function"!=typeof n&&(n=k(n));for(var e=this._groups,t=e.length,r=new Array(t),o=0;o<t;++o)for(var i,a=e[o],f=a.length,c=r[o]=[],s=0;s<f;++s)(i=a[s])&&n.call(i,i.__data__,s,a)&&c.push(i);return new en(r,this._parents)},data:function(n,e){if(!n)return b=new Array(this.size()),u=-1,this.each(function(n){b[++u]=n}),b;var t,r=e?N:T,o=this._parents,i=this._groups;"function"!=typeof n&&(t=n,n=function(){return t});for(var a=i.length,f=new Array(a),c=new Array(a),s=new Array(a),u=0;u<a;++u){var l=o[u],h=i[u],d=h.length,b=n.call(l,l&&l.__data__,u,o),p=b.length,_=c[u]=new Array(p),g=f[u]=new Array(p);r(l,h,_,g,s[u]=new Array(d),b,e);for(var y,m,v=0,x=0;v<p;++v)if(y=_[v]){for(v>=x&&(x=v+1);!(m=g[x])&&++x<p;);y._next=m||null}}return(f=new en(f,o))._enter=c,f._exit=s,f},enter:function(){return new en(this._enter||this._groups.map(M),this._parents)},exit:function(){return new en(this._exit||this._groups.map(M),this._parents)},merge:function(n){for(var e=this._groups,t=n._groups,r=e.length,o=t.length,i=Math.min(r,o),a=new Array(r),f=0;f<i;++f)for(var c,s=e[f],u=t[f],l=s.length,h=a[f]=new Array(l),d=0;d<l;++d)(c=s[d]||u[d])&&(h[d]=c);for(;f<r;++f)a[f]=e[f];return new en(a,this._parents)},order:function(){for(var n=this._groups,e=-1,t=n.length;++e<t;)for(var r,o=n[e],i=o.length-1,a=o[i];--i>=0;)(r=o[i])&&(a&&a!==r.nextSibling&&a.parentNode.insertBefore(r,a),a=r);return this},sort:function(n){function e(e,t){return e&&t?n(e.__data__,t.__data__):!e-!t}n||(n=D);for(var t=this._groups,r=t.length,o=new Array(r),i=0;i<r;++i){for(var a,f=t[i],c=f.length,s=o[i]=new Array(c),u=0;u<c;++u)(a=f[u])&&(s[u]=a);s.sort(e)}return new en(o,this._parents).order()},call:function(){var n=arguments[0];return arguments[0]=this,n.apply(null,arguments),this},nodes:function(){var n=new Array(this.size()),e=-1;return this.each(function(){n[++e]=this}),n},node:function(){for(var n=this._groups,e=0,t=n.length;e<t;++e)for(var r=n[e],o=0,i=r.length;o<i;++o){var a=r[o];if(a)return a}return null},size:function(){var n=0;return this.each(function(){++n}),n},empty:function(){return!this.node()},each:function(n){for(var e=this._groups,t=0,r=e.length;t<r;++t)for(var o,i=e[t],a=0,f=i.length;a<f;++a)(o=i[a])&&n.call(o,o.__data__,a,i);return this},attr:function(n,e){var t=_(n);if(arguments.length<2){var r=this.node();return t.local?r.getAttributeNS(t.space,t.local):r.getAttribute(t)}return this.each((null==e?t.local?function(n){return function(){this.removeAttributeNS(n.space,n.local)}}:function(n){return function(){this.removeAttribute(n)}}:"function"==typeof e?t.local?function(n,e){return function(){var t=e.apply(this,arguments);null==t?this.removeAttributeNS(n.space,n.local):this.setAttributeNS(n.space,n.local,t)}}:function(n,e){return function(){var t=e.apply(this,arguments);null==t?this.removeAttribute(n):this.setAttribute(n,t)}}:t.local?function(n,e){return function(){this.setAttributeNS(n.space,n.local,e)}}:function(n,e){return function(){this.setAttribute(n,e)}})(t,e))},style:function(n,e,t){return arguments.length>1?this.each((null==e?function(n){return function(){this.style.removeProperty(n)}}:"function"==typeof e?function(n,e,t){return function(){var r=e.apply(this,arguments);null==r?this.style.removeProperty(n):this.style.setProperty(n,r,t)}}:function(n,e,t){return function(){this.style.setProperty(n,e,t)}})(n,e,null==t?"":t)):P(this.node(),n)},property:function(n,e){return arguments.length>1?this.each((null==e?function(n){return function(){delete this[n]}}:"function"==typeof e?function(n,e){return function(){var t=e.apply(this,arguments);null==t?delete this[n]:this[n]=t}}:function(n,e){return function(){this[n]=e}})(n,e)):this.node()[n]},classed:function(n,e){var t=U(n+"");if(arguments.length<2){for(var r=B(this.node()),o=-1,i=t.length;++o<i;)if(!r.contains(t[o]))return!1;return!0}return this.each(("function"==typeof e?function(n,e){return function(){(e.apply(this,arguments)?R:O)(this,n)}}:e?function(n){return function(){R(this,n)}}:function(n){return function(){O(this,n)}})(t,e))},text:function(n){return arguments.length?this.each(null==n?I:("function"==typeof n?function(n){return function(){var e=n.apply(this,arguments);this.textContent=null==e?"":e}}:function(n){return function(){this.textContent=n}})(n)):this.node().textContent},html:function(n){return arguments.length?this.each(null==n?q:("function"==typeof n?function(n){return function(){var e=n.apply(this,arguments);this.innerHTML=null==e?"":e}}:function(n){return function(){this.innerHTML=n}})(n)):this.node().innerHTML},raise:function(){return this.each(j)},lower:function(){return this.each(z)},append:function(n){var e="function"==typeof n?n:g(n);return this.select(function(){return this.appendChild(e.apply(this,arguments))})},insert:function(n,e){var t="function"==typeof n?n:g(n),r=null==e?H:"function"==typeof e?e:m(e);return this.select(function(){return this.insertBefore(t.apply(this,arguments),r.apply(this,arguments)||null)})},remove:function(){return this.each(Y)},clone:function(n){return this.select(n?X:$)},datum:function(n){return arguments.length?this.property("__data__",n):this.node().__data__},on:function(n,e,t){var r,o,i=function(n){return n.trim().split(/^|\s+/).map(function(n){var e="",t=n.indexOf(".");return t>=0&&(e=n.slice(t+1),n=n.slice(0,t)),{type:n,name:e}})}(n+""),a=i.length;if(!(arguments.length<2)){for(f=e?J:Q,null==t&&(t=!1),r=0;r<a;++r)this.each(f(i[r],e,t));return this}var f=this.node().__on;if(f)for(var c,s=0,u=f.length;s<u;++s)for(r=0,c=f[s];r<a;++r)if((o=i[r]).type===c.type&&o.name===c.name)return c.value},dispatch:function(n,e){return this.each(("function"==typeof e?function(n,e){return function(){return K(this,n,e.apply(this,arguments))}}:function(n,e){return function(){return K(this,n,e)}})(n,e))}};var rn=tn,on=function(n){return"string"==typeof n?new en([[document.querySelector(n)]],[document.documentElement]):new en([[n]],nn)},an=0;function fn(){this._="@"+(++an).toString(36)}fn.prototype=function(){return new fn}.prototype={constructor:fn,get:function(n){for(var e=this._;!(e in n);)if(!(n=n.parentNode))return;return n[e]},set:function(n,e){return n[this._]=e},remove:function(n){return this._ in n&&delete n[this._]},toString:function(){return this._}};function cn(n,e,t,r,o,i,a,f,c,s){this.target=n,this.type=e,this.subject=t,this.identifier=r,this.active=o,this.x=i,this.y=a,this.dx=f,this.dy=c,this._=s}cn.prototype.on=function(){var n=this._.on.apply(this._,arguments);return n===this._?this:n};var sn=function(n,e,t){n.prototype=e.prototype=t,t.constructor=n};function un(n,e){var t=Object.create(n.prototype);for(var r in e)t[r]=e[r];return t}function ln(){}var hn="\\s*([+-]?\\d+)\\s*",dn="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)\\s*",bn="\\s*([+-]?\\d*\\.?\\d+(?:[eE][+-]?\\d+)?)%\\s*",pn=/^#([0-9a-f]{3})$/,_n=/^#([0-9a-f]{6})$/,gn=new RegExp("^rgb\\("+[hn,hn,hn]+"\\)$"),yn=new RegExp("^rgb\\("+[bn,bn,bn]+"\\)$"),mn=new RegExp("^rgba\\("+[hn,hn,hn,dn]+"\\)$"),vn=new RegExp("^rgba\\("+[bn,bn,bn,dn]+"\\)$"),xn=new RegExp("^hsl\\("+[dn,bn,bn]+"\\)$"),wn=new RegExp("^hsla\\("+[dn,bn,bn,dn]+"\\)$"),Fn={aliceblue:15792383,antiquewhite:16444375,aqua:65535,aquamarine:8388564,azure:15794175,beige:16119260,bisque:16770244,black:0,blanchedalmond:16772045,blue:255,blueviolet:9055202,brown:10824234,burlywood:14596231,cadetblue:6266528,chartreuse:8388352,chocolate:13789470,coral:16744272,cornflowerblue:6591981,cornsilk:16775388,crimson:14423100,cyan:65535,darkblue:139,darkcyan:35723,darkgoldenrod:12092939,darkgray:11119017,darkgreen:25600,darkgrey:11119017,darkkhaki:12433259,darkmagenta:9109643,darkolivegreen:5597999,darkorange:16747520,darkorchid:10040012,darkred:9109504,darksalmon:15308410,darkseagreen:9419919,darkslateblue:4734347,darkslategray:3100495,darkslategrey:3100495,darkturquoise:52945,darkviolet:9699539,deeppink:16716947,deepskyblue:49151,dimgray:6908265,dimgrey:6908265,dodgerblue:2003199,firebrick:11674146,floralwhite:16775920,forestgreen:2263842,fuchsia:16711935,gainsboro:14474460,ghostwhite:16316671,gold:16766720,goldenrod:14329120,gray:8421504,green:32768,greenyellow:11403055,grey:8421504,honeydew:15794160,hotpink:16738740,indianred:13458524,indigo:4915330,ivory:16777200,khaki:15787660,lavender:15132410,lavenderblush:16773365,lawngreen:8190976,lemonchiffon:16775885,lightblue:11393254,lightcoral:15761536,lightcyan:14745599,lightgoldenrodyellow:16448210,lightgray:13882323,lightgreen:9498256,lightgrey:13882323,lightpink:16758465,lightsalmon:16752762,lightseagreen:2142890,lightskyblue:8900346,lightslategray:7833753,lightslategrey:7833753,lightsteelblue:11584734,lightyellow:16777184,lime:65280,limegreen:3329330,linen:16445670,magenta:16711935,maroon:8388608,mediumaquamarine:6737322,mediumblue:205,mediumorchid:12211667,mediumpurple:9662683,mediumseagreen:3978097,mediumslateblue:8087790,mediumspringgreen:64154,mediumturquoise:4772300,mediumvioletred:13047173,midnightblue:1644912,mintcream:16121850,mistyrose:16770273,moccasin:16770229,navajowhite:16768685,navy:128,oldlace:16643558,olive:8421376,olivedrab:7048739,orange:16753920,orangered:16729344,orchid:14315734,palegoldenrod:15657130,palegreen:10025880,paleturquoise:11529966,palevioletred:14381203,papayawhip:16773077,peachpuff:16767673,peru:13468991,pink:16761035,plum:14524637,powderblue:11591910,purple:8388736,rebeccapurple:6697881,red:16711680,rosybrown:12357519,royalblue:4286945,saddlebrown:9127187,salmon:16416882,sandybrown:16032864,seagreen:3050327,seashell:16774638,sienna:10506797,silver:12632256,skyblue:8900331,slateblue:6970061,slategray:7372944,slategrey:7372944,snow:16775930,springgreen:65407,steelblue:4620980,tan:13808780,teal:32896,thistle:14204888,tomato:16737095,turquoise:4251856,violet:15631086,wheat:16113331,white:16777215,whitesmoke:16119285,yellow:16776960,yellowgreen:10145074};function An(n){var e;return n=(n+"").trim().toLowerCase(),(e=pn.exec(n))?new Tn((e=parseInt(e[1],16))>>8&15|e>>4&240,e>>4&15|240&e,(15&e)<<4|15&e,1):(e=_n.exec(n))?kn(parseInt(e[1],16)):(e=gn.exec(n))?new Tn(e[1],e[2],e[3],1):(e=yn.exec(n))?new Tn(255*e[1]/100,255*e[2]/100,255*e[3]/100,1):(e=mn.exec(n))?Mn(e[1],e[2],e[3],e[4]):(e=vn.exec(n))?Mn(255*e[1]/100,255*e[2]/100,255*e[3]/100,e[4]):(e=xn.exec(n))?Dn(e[1],e[2]/100,e[3]/100,1):(e=wn.exec(n))?Dn(e[1],e[2]/100,e[3]/100,e[4]):Fn.hasOwnProperty(n)?kn(Fn[n]):"transparent"===n?new Tn(NaN,NaN,NaN,0):null}function kn(n){return new Tn(n>>16&255,n>>8&255,255&n,1)}function Mn(n,e,t,r){return r<=0&&(n=e=t=NaN),new Tn(n,e,t,r)}function Cn(n){return n instanceof ln||(n=An(n)),n?new Tn((n=n.rgb()).r,n.g,n.b,n.opacity):new Tn}function En(n,e,t,r){return 1===arguments.length?Cn(n):new Tn(n,e,t,null==r?1:r)}function Tn(n,e,t,r){this.r=+n,this.g=+e,this.b=+t,this.opacity=+r}function Nn(n){return((n=Math.max(0,Math.min(255,Math.round(n)||0)))<16?"0":"")+n.toString(16)}function Dn(n,e,t,r){return r<=0?n=e=t=NaN:t<=0||t>=1?n=e=NaN:e<=0&&(n=NaN),new Pn(n,e,t,r)}function Sn(n,e,t,r){return 1===arguments.length?function(n){if(n instanceof Pn)return new Pn(n.h,n.s,n.l,n.opacity);if(n instanceof ln||(n=An(n)),!n)return new Pn;if(n instanceof Pn)return n;var e=(n=n.rgb()).r/255,t=n.g/255,r=n.b/255,o=Math.min(e,t,r),i=Math.max(e,t,r),a=NaN,f=i-o,c=(i+o)/2;return f?(a=e===i?(t-r)/f+6*(t<r):t===i?(r-e)/f+2:(e-t)/f+4,f/=c<.5?i+o:2-i-o,a*=60):f=c>0&&c<1?0:a,new Pn(a,f,c,n.opacity)}(n):new Pn(n,e,t,null==r?1:r)}function Pn(n,e,t,r){this.h=+n,this.s=+e,this.l=+t,this.opacity=+r}function Un(n,e,t){return 255*(n<60?e+(t-e)*n/60:n<180?t:n<240?e+(t-e)*(240-n)/60:e)}sn(ln,An,{displayable:function(){return this.rgb().displayable()},hex:function(){return this.rgb().hex()},toString:function(){return this.rgb()+""}}),sn(Tn,En,un(ln,{brighter:function(n){return n=null==n?1/.7:Math.pow(1/.7,n),new Tn(this.r*n,this.g*n,this.b*n,this.opacity)},darker:function(n){return n=null==n?.7:Math.pow(.7,n),new Tn(this.r*n,this.g*n,this.b*n,this.opacity)},rgb:function(){return this},displayable:function(){return 0<=this.r&&this.r<=255&&0<=this.g&&this.g<=255&&0<=this.b&&this.b<=255&&0<=this.opacity&&this.opacity<=1},hex:function(){return"#"+Nn(this.r)+Nn(this.g)+Nn(this.b)},toString:function(){var n=this.opacity;return(1===(n=isNaN(n)?1:Math.max(0,Math.min(1,n)))?"rgb(":"rgba(")+Math.max(0,Math.min(255,Math.round(this.r)||0))+", "+Math.max(0,Math.min(255,Math.round(this.g)||0))+", "+Math.max(0,Math.min(255,Math.round(this.b)||0))+(1===n?")":", "+n+")")}})),sn(Pn,Sn,un(ln,{brighter:function(n){return n=null==n?1/.7:Math.pow(1/.7,n),new Pn(this.h,this.s,this.l*n,this.opacity)},darker:function(n){return n=null==n?.7:Math.pow(.7,n),new Pn(this.h,this.s,this.l*n,this.opacity)},rgb:function(){var n=this.h%360+360*(this.h<0),e=isNaN(n)||isNaN(this.s)?0:this.s,t=this.l,r=t+(t<.5?t:1-t)*e,o=2*t-r;return new Tn(Un(n>=240?n-240:n+120,o,r),Un(n,o,r),Un(n<120?n+240:n-120,o,r),this.opacity)},displayable:function(){return(0<=this.s&&this.s<=1||isNaN(this.s))&&0<=this.l&&this.l<=1&&0<=this.opacity&&this.opacity<=1}}));var Bn=Math.PI/180,Ln=180/Math.PI,Rn=.96422,On=1,In=.82521,qn=4/29,jn=6/29,zn=3*jn*jn,Hn=jn*jn*jn;function Yn(n){if(n instanceof Xn)return new Xn(n.l,n.a,n.b,n.opacity);if(n instanceof Kn){if(isNaN(n.h))return new Xn(n.l,0,0,n.opacity);var e=n.h*Bn;return new Xn(n.l,Math.cos(e)*n.c,Math.sin(e)*n.c,n.opacity)}n instanceof Tn||(n=Cn(n));var t,r,o=Wn(n.r),i=Wn(n.g),a=Wn(n.b),f=Vn((.2225045*o+.7168786*i+.0606169*a)/On);return o===i&&i===a?t=r=f:(t=Vn((.4360747*o+.3850649*i+.1430804*a)/Rn),r=Vn((.0139322*o+.0971045*i+.7141733*a)/In)),new Xn(116*f-16,500*(t-f),200*(f-r),n.opacity)}function $n(n,e,t,r){return 1===arguments.length?Yn(n):new Xn(n,e,t,null==r?1:r)}function Xn(n,e,t,r){this.l=+n,this.a=+e,this.b=+t,this.opacity=+r}function Vn(n){return n>Hn?Math.pow(n,1/3):n/zn+qn}function Gn(n){return n>jn?n*n*n:zn*(n-qn)}function Zn(n){return 255*(n<=.0031308?12.92*n:1.055*Math.pow(n,1/2.4)-.055)}function Wn(n){return(n/=255)<=.04045?n/12.92:Math.pow((n+.055)/1.055,2.4)}function Qn(n){if(n instanceof Kn)return new Kn(n.h,n.c,n.l,n.opacity);if(n instanceof Xn||(n=Yn(n)),0===n.a&&0===n.b)return new Kn(NaN,0,n.l,n.opacity);var e=Math.atan2(n.b,n.a)*Ln;return new Kn(e<0?e+360:e,Math.sqrt(n.a*n.a+n.b*n.b),n.l,n.opacity)}function Jn(n,e,t,r){return 1===arguments.length?Qn(n):new Kn(n,e,t,null==r?1:r)}function Kn(n,e,t,r){this.h=+n,this.c=+e,this.l=+t,this.opacity=+r}sn(Xn,$n,un(ln,{brighter:function(n){return new Xn(this.l+18*(null==n?1:n),this.a,this.b,this.opacity)},darker:function(n){return new Xn(this.l-18*(null==n?1:n),this.a,this.b,this.opacity)},rgb:function(){var n=(this.l+16)/116,e=isNaN(this.a)?n:n+this.a/500,t=isNaN(this.b)?n:n-this.b/200;return new Tn(Zn(3.1338561*(e=Rn*Gn(e))-1.6168667*(n=On*Gn(n))-.4906146*(t=In*Gn(t))),Zn(-.9787684*e+1.9161415*n+.033454*t),Zn(.0719453*e-.2289914*n+1.4052427*t),this.opacity)}})),sn(Kn,Jn,un(ln,{brighter:function(n){return new Kn(this.h,this.c,this.l+18*(null==n?1:n),this.opacity)},darker:function(n){return new Kn(this.h,this.c,this.l-18*(null==n?1:n),this.opacity)},rgb:function(){return Yn(this).rgb()}}));var ne=-.29227,ee=-.90649,te=1.97294,re=te*ee,oe=1.78277*te,ie=1.78277*ne- -.14861*ee;function ae(n,e,t,r){return 1===arguments.length?function(n){if(n instanceof fe)return new fe(n.h,n.s,n.l,n.opacity);n instanceof Tn||(n=Cn(n));var e=n.r/255,t=n.g/255,r=n.b/255,o=(ie*r+re*e-oe*t)/(ie+re-oe),i=r-o,a=(te*(t-o)-ne*i)/ee,f=Math.sqrt(a*a+i*i)/(te*o*(1-o)),c=f?Math.atan2(a,i)*Ln-120:NaN;return new fe(c<0?c+360:c,f,o,n.opacity)}(n):new fe(n,e,t,null==r?1:r)}function fe(n,e,t,r){this.h=+n,this.s=+e,this.l=+t,this.opacity=+r}function ce(n,e,t,r,o){var i=n*n,a=i*n;return((1-3*n+3*i-a)*e+(4-6*i+3*a)*t+(1+3*n+3*i-3*a)*r+a*o)/6}sn(fe,ae,un(ln,{brighter:function(n){return n=null==n?1/.7:Math.pow(1/.7,n),new fe(this.h,this.s,this.l*n,this.opacity)},darker:function(n){return n=null==n?.7:Math.pow(.7,n),new fe(this.h,this.s,this.l*n,this.opacity)},rgb:function(){var n=isNaN(this.h)?0:(this.h+120)*Bn,e=+this.l,t=isNaN(this.s)?0:this.s*e*(1-e),r=Math.cos(n),o=Math.sin(n);return new Tn(255*(e+t*(-.14861*r+1.78277*o)),255*(e+t*(ne*r+ee*o)),255*(e+t*(te*r)),this.opacity)}}));var se=function(n){return function(){return n}};function ue(n,e){return function(t){return n+t*e}}function le(n,e){var t=e-n;return t?ue(n,t>180||t<-180?t-360*Math.round(t/360):t):se(isNaN(n)?e:n)}function he(n){return 1==(n=+n)?de:function(e,t){return t-e?function(n,e,t){return n=Math.pow(n,t),e=Math.pow(e,t)-n,t=1/t,function(r){return Math.pow(n+r*e,t)}}(e,t,n):se(isNaN(e)?t:e)}}function de(n,e){var t=e-n;return t?ue(n,t):se(isNaN(n)?e:n)}var be=function n(e){var t=he(e);function r(n,e){var r=t((n=En(n)).r,(e=En(e)).r),o=t(n.g,e.g),i=t(n.b,e.b),a=de(n.opacity,e.opacity);return function(e){return n.r=r(e),n.g=o(e),n.b=i(e),n.opacity=a(e),n+""}}return r.gamma=n,r}(1);function pe(n){return function(e){var t,r,o=e.length,i=new Array(o),a=new Array(o),f=new Array(o);for(t=0;t<o;++t)r=En(e[t]),i[t]=r.r||0,a[t]=r.g||0,f[t]=r.b||0;return i=n(i),a=n(a),f=n(f),r.opacity=1,function(n){return r.r=i(n),r.g=a(n),r.b=f(n),r+""}}}var _e=pe(function(n){var e=n.length-1;return function(t){var r=t<=0?t=0:t>=1?(t=1,e-1):Math.floor(t*e),o=n[r],i=n[r+1],a=r>0?n[r-1]:2*o-i,f=r<e-1?n[r+2]:2*i-o;return ce((t-r/e)*e,a,o,i,f)}}),ge=(pe(function(n){var e=n.length;return function(t){var r=Math.floor(((t%=1)<0?++t:t)*e),o=n[(r+e-1)%e],i=n[r%e],a=n[(r+1)%e],f=n[(r+2)%e];return ce((t-r/e)*e,o,i,a,f)}}),function(n,e){return e-=n=+n,function(t){return n+e*t}}),ye=/[-+]?(?:\d+\.?\d*|\.?\d+)(?:[eE][-+]?\d+)?/g,me=new RegExp(ye.source,"g");var ve,xe,we,Fe,Ae=function(n,e){var t,r,o,i=ye.lastIndex=me.lastIndex=0,a=-1,f=[],c=[];for(n+="",e+="";(t=ye.exec(n))&&(r=me.exec(e));)(o=r.index)>i&&(o=e.slice(i,o),f[a]?f[a]+=o:f[++a]=o),(t=t[0])===(r=r[0])?f[a]?f[a]+=r:f[++a]=r:(f[++a]=null,c.push({i:a,x:ge(t,r)})),i=me.lastIndex;return i<e.length&&(o=e.slice(i),f[a]?f[a]+=o:f[++a]=o),f.length<2?c[0]?function(n){return function(e){return n(e)+""}}(c[0].x):function(n){return function(){return n}}(e):(e=c.length,function(n){for(var t,r=0;r<e;++r)f[(t=c[r]).i]=t.x(n);return f.join("")})},ke=180/Math.PI,Me={translateX:0,translateY:0,rotate:0,skewX:0,scaleX:1,scaleY:1},Ce=function(n,e,t,r,o,i){var a,f,c;return(a=Math.sqrt(n*n+e*e))&&(n/=a,e/=a),(c=n*t+e*r)&&(t-=n*c,r-=e*c),(f=Math.sqrt(t*t+r*r))&&(t/=f,r/=f,c/=f),n*r<e*t&&(n=-n,e=-e,c=-c,a=-a),{translateX:o,translateY:i,rotate:Math.atan2(e,n)*ke,skewX:Math.atan(c)*ke,scaleX:a,scaleY:f}};function Ee(n,e,t,r){function o(n){return n.length?n.pop()+" ":""}return function(i,a){var f=[],c=[];return i=n(i),a=n(a),function(n,r,o,i,a,f){if(n!==o||r!==i){var c=a.push("translate(",null,e,null,t);f.push({i:c-4,x:ge(n,o)},{i:c-2,x:ge(r,i)})}else(o||i)&&a.push("translate("+o+e+i+t)}(i.translateX,i.translateY,a.translateX,a.translateY,f,c),function(n,e,t,i){n!==e?(n-e>180?e+=360:e-n>180&&(n+=360),i.push({i:t.push(o(t)+"rotate(",null,r)-2,x:ge(n,e)})):e&&t.push(o(t)+"rotate("+e+r)}(i.rotate,a.rotate,f,c),function(n,e,t,i){n!==e?i.push({i:t.push(o(t)+"skewX(",null,r)-2,x:ge(n,e)}):e&&t.push(o(t)+"skewX("+e+r)}(i.skewX,a.skewX,f,c),function(n,e,t,r,i,a){if(n!==t||e!==r){var f=i.push(o(i)+"scale(",null,",",null,")");a.push({i:f-4,x:ge(n,t)},{i:f-2,x:ge(e,r)})}else 1===t&&1===r||i.push(o(i)+"scale("+t+","+r+")")}(i.scaleX,i.scaleY,a.scaleX,a.scaleY,f,c),i=a=null,function(n){for(var e,t=-1,r=c.length;++t<r;)f[(e=c[t]).i]=e.x(n);return f.join("")}}}var Te=Ee(function(n){return"none"===n?Me:(ve||(ve=document.createElement("DIV"),xe=document.documentElement,we=document.defaultView),ve.style.transform=n,n=we.getComputedStyle(xe.appendChild(ve),null).getPropertyValue("transform"),xe.removeChild(ve),n=n.slice(7,-1).split(","),Ce(+n[0],+n[1],+n[2],+n[3],+n[4],+n[5]))},"px, ","px)","deg)"),Ne=Ee(function(n){return null==n?Me:(Fe||(Fe=document.createElementNS("http://www.w3.org/2000/svg","g")),Fe.setAttribute("transform",n),(n=Fe.transform.baseVal.consolidate())?(n=n.matrix,Ce(n.a,n.b,n.c,n.d,n.e,n.f)):Me)},", ",")",")");Math.SQRT2;function De(n){return function(e,t){var r=n((e=Sn(e)).h,(t=Sn(t)).h),o=de(e.s,t.s),i=de(e.l,t.l),a=de(e.opacity,t.opacity);return function(n){return e.h=r(n),e.s=o(n),e.l=i(n),e.opacity=a(n),e+""}}}De(le),De(de);function Se(n){return function(e,t){var r=n((e=Jn(e)).h,(t=Jn(t)).h),o=de(e.c,t.c),i=de(e.l,t.l),a=de(e.opacity,t.opacity);return function(n){return e.h=r(n),e.c=o(n),e.l=i(n),e.opacity=a(n),e+""}}}Se(le),Se(de);function Pe(n){return function e(t){function r(e,r){var o=n((e=ae(e)).h,(r=ae(r)).h),i=de(e.s,r.s),a=de(e.l,r.l),f=de(e.opacity,r.opacity);return function(n){return e.h=o(n),e.s=i(n),e.l=a(Math.pow(n,t)),e.opacity=f(n),e+""}}return t=+t,r.gamma=e,r}(1)}Pe(le);var Ue=Pe(de);var Be,Le,Re=0,Oe=0,Ie=0,qe=1e3,je=0,ze=0,He=0,Ye="object"==typeof performance&&performance.now?performance:Date,$e="object"==typeof window&&window.requestAnimationFrame?window.requestAnimationFrame.bind(window):function(n){setTimeout(n,17)};function Xe(){return ze||($e(Ve),ze=Ye.now()+He)}function Ve(){ze=0}function Ge(){this._call=this._time=this._next=null}function Ze(n,e,t){var r=new Ge;return r.restart(n,e,t),r}function We(){ze=(je=Ye.now())+He,Re=Oe=0;try{!function(){Xe(),++Re;for(var n,e=Be;e;)(n=ze-e._time)>=0&&e._call.call(null,n),e=e._next;--Re}()}finally{Re=0,function(){var n,e,t=Be,r=1/0;for(;t;)t._call?(r>t._time&&(r=t._time),n=t,t=t._next):(e=t._next,t._next=null,t=n?n._next=e:Be=e);Le=n,Je(r)}(),ze=0}}function Qe(){var n=Ye.now(),e=n-je;e>qe&&(He-=e,je=n)}function Je(n){Re||(Oe&&(Oe=clearTimeout(Oe)),n-ze>24?(n<1/0&&(Oe=setTimeout(We,n-Ye.now()-He)),Ie&&(Ie=clearInterval(Ie))):(Ie||(je=Ye.now(),Ie=setInterval(Qe,qe)),Re=1,$e(We)))}Ge.prototype=Ze.prototype={constructor:Ge,restart:function(n,e,t){if("function"!=typeof n)throw new TypeError("callback is not a function");t=(null==t?Xe():+t)+(null==e?0:+e),this._next||Le===this||(Le?Le._next=this:Be=this,Le=this),this._call=n,this._time=t,Je()},stop:function(){this._call&&(this._call=null,this._time=1/0,Je())}};var Ke=function(n,e,t){var r=new Ge;return e=null==e?0:+e,r.restart(function(t){r.stop(),n(t+e)},e,t),r},nt=d("start","end","interrupt"),et=[],tt=0,rt=1,ot=2,it=3,at=4,ft=5,ct=6,st=function(n,e,t,r,o,i){var a=n.__transition;if(a){if(t in a)return}else n.__transition={};!function(n,e,t){var r,o=n.__transition;function i(c){var s,u,l,h;if(t.state!==rt)return f();for(s in o)if((h=o[s]).name===t.name){if(h.state===it)return Ke(i);h.state===at?(h.state=ct,h.timer.stop(),h.on.call("interrupt",n,n.__data__,h.index,h.group),delete o[s]):+s<e&&(h.state=ct,h.timer.stop(),delete o[s])}if(Ke(function(){t.state===it&&(t.state=at,t.timer.restart(a,t.delay,t.time),a(c))}),t.state=ot,t.on.call("start",n,n.__data__,t.index,t.group),t.state===ot){for(t.state=it,r=new Array(l=t.tween.length),s=0,u=-1;s<l;++s)(h=t.tween[s].value.call(n,n.__data__,t.index,t.group))&&(r[++u]=h);r.length=u+1}}function a(e){for(var o=e<t.duration?t.ease.call(null,e/t.duration):(t.timer.restart(f),t.state=ft,1),i=-1,a=r.length;++i<a;)r[i].call(null,o);t.state===ft&&(t.on.call("end",n,n.__data__,t.index,t.group),f())}function f(){for(var r in t.state=ct,t.timer.stop(),delete o[e],o)return;delete n.__transition}o[e]=t,t.timer=Ze(function(n){t.state=rt,t.timer.restart(i,t.delay,t.time),t.delay<=n&&i(n-t.delay)},0,t.time)}(n,t,{name:e,index:r,group:o,on:nt,tween:et,time:i.time,delay:i.delay,duration:i.duration,ease:i.ease,timer:null,state:tt})};function ut(n,e){var t=ht(n,e);if(t.state>tt)throw new Error("too late; already scheduled");return t}function lt(n,e){var t=ht(n,e);if(t.state>ot)throw new Error("too late; already started");return t}function ht(n,e){var t=n.__transition;if(!t||!(t=t[e]))throw new Error("transition not found");return t}var dt=function(n,e){var t,r,o,i=n.__transition,a=!0;if(i){for(o in e=null==e?null:e+"",i)(t=i[o]).name===e?(r=t.state>ot&&t.state<ft,t.state=ct,t.timer.stop(),r&&t.on.call("interrupt",n,n.__data__,t.index,t.group),delete i[o]):a=!1;a&&delete n.__transition}};function bt(n,e,t){var r=n._id;return n.each(function(){var n=lt(this,r);(n.value||(n.value={}))[e]=t.apply(this,arguments)}),function(n){return ht(n,r).value[e]}}var pt=function(n,e){var t;return("number"==typeof e?ge:e instanceof An?be:(t=An(e))?(e=t,be):Ae)(n,e)};var _t=rn.prototype.constructor;var gt=0;function yt(n,e,t,r){this._groups=n,this._parents=e,this._name=t,this._id=r}function mt(){return++gt}var vt=rn.prototype;yt.prototype=function(n){return rn().transition(n)}.prototype={constructor:yt,select:function(n){var e=this._name,t=this._id;"function"!=typeof n&&(n=m(n));for(var r=this._groups,o=r.length,i=new Array(o),a=0;a<o;++a)for(var f,c,s=r[a],u=s.length,l=i[a]=new Array(u),h=0;h<u;++h)(f=s[h])&&(c=n.call(f,f.__data__,h,s))&&("__data__"in f&&(c.__data__=f.__data__),l[h]=c,st(l[h],e,t,h,l,ht(f,t)));return new yt(i,this._parents,e,t)},selectAll:function(n){var e=this._name,t=this._id;"function"!=typeof n&&(n=x(n));for(var r=this._groups,o=r.length,i=[],a=[],f=0;f<o;++f)for(var c,s=r[f],u=s.length,l=0;l<u;++l)if(c=s[l]){for(var h,d=n.call(c,c.__data__,l,s),b=ht(c,t),p=0,_=d.length;p<_;++p)(h=d[p])&&st(h,e,t,p,d,b);i.push(d),a.push(c)}return new yt(i,a,e,t)},filter:function(n){"function"!=typeof n&&(n=k(n));for(var e=this._groups,t=e.length,r=new Array(t),o=0;o<t;++o)for(var i,a=e[o],f=a.length,c=r[o]=[],s=0;s<f;++s)(i=a[s])&&n.call(i,i.__data__,s,a)&&c.push(i);return new yt(r,this._parents,this._name,this._id)},merge:function(n){if(n._id!==this._id)throw new Error;for(var e=this._groups,t=n._groups,r=e.length,o=t.length,i=Math.min(r,o),a=new Array(r),f=0;f<i;++f)for(var c,s=e[f],u=t[f],l=s.length,h=a[f]=new Array(l),d=0;d<l;++d)(c=s[d]||u[d])&&(h[d]=c);for(;f<r;++f)a[f]=e[f];return new yt(a,this._parents,this._name,this._id)},selection:function(){return new _t(this._groups,this._parents)},transition:function(){for(var n=this._name,e=this._id,t=mt(),r=this._groups,o=r.length,i=0;i<o;++i)for(var a,f=r[i],c=f.length,s=0;s<c;++s)if(a=f[s]){var u=ht(a,e);st(a,n,t,s,f,{time:u.time+u.delay+u.duration,delay:0,duration:u.duration,ease:u.ease})}return new yt(r,this._parents,n,t)},call:vt.call,nodes:vt.nodes,node:vt.node,size:vt.size,empty:vt.empty,each:vt.each,on:function(n,e){var t=this._id;return arguments.length<2?ht(this.node(),t).on.on(n):this.each(function(n,e,t){var r,o,i=function(n){return(n+"").trim().split(/^|\s+/).every(function(n){var e=n.indexOf(".");return e>=0&&(n=n.slice(0,e)),!n||"start"===n})}(e)?ut:lt;return function(){var a=i(this,n),f=a.on;f!==r&&(o=(r=f).copy()).on(e,t),a.on=o}}(t,n,e))},attr:function(n,e){var t=_(n),r="transform"===t?Ne:pt;return this.attrTween(n,"function"==typeof e?(t.local?function(n,e,t){var r,o,i;return function(){var a,f=t(this);if(null!=f)return(a=this.getAttributeNS(n.space,n.local))===f?null:a===r&&f===o?i:i=e(r=a,o=f);this.removeAttributeNS(n.space,n.local)}}:function(n,e,t){var r,o,i;return function(){var a,f=t(this);if(null!=f)return(a=this.getAttribute(n))===f?null:a===r&&f===o?i:i=e(r=a,o=f);this.removeAttribute(n)}})(t,r,bt(this,"attr."+n,e)):null==e?(t.local?function(n){return function(){this.removeAttributeNS(n.space,n.local)}}:function(n){return function(){this.removeAttribute(n)}})(t):(t.local?function(n,e,t){var r,o;return function(){var i=this.getAttributeNS(n.space,n.local);return i===t?null:i===r?o:o=e(r=i,t)}}:function(n,e,t){var r,o;return function(){var i=this.getAttribute(n);return i===t?null:i===r?o:o=e(r=i,t)}})(t,r,e+""))},attrTween:function(n,e){var t="attr."+n;if(arguments.length<2)return(t=this.tween(t))&&t._value;if(null==e)return this.tween(t,null);if("function"!=typeof e)throw new Error;var r=_(n);return this.tween(t,(r.local?function(n,e){function t(){var t=this,r=e.apply(t,arguments);return r&&function(e){t.setAttributeNS(n.space,n.local,r(e))}}return t._value=e,t}:function(n,e){function t(){var t=this,r=e.apply(t,arguments);return r&&function(e){t.setAttribute(n,r(e))}}return t._value=e,t})(r,e))},style:function(n,e,t){var r="transform"==(n+="")?Te:pt;return null==e?this.styleTween(n,function(n,e){var t,r,o;return function(){var i=P(this,n),a=(this.style.removeProperty(n),P(this,n));return i===a?null:i===t&&a===r?o:o=e(t=i,r=a)}}(n,r)).on("end.style."+n,function(n){return function(){this.style.removeProperty(n)}}(n)):this.styleTween(n,"function"==typeof e?function(n,e,t){var r,o,i;return function(){var a=P(this,n),f=t(this);return null==f&&(this.style.removeProperty(n),f=P(this,n)),a===f?null:a===r&&f===o?i:i=e(r=a,o=f)}}(n,r,bt(this,"style."+n,e)):function(n,e,t){var r,o;return function(){var i=P(this,n);return i===t?null:i===r?o:o=e(r=i,t)}}(n,r,e+""),t)},styleTween:function(n,e,t){var r="style."+(n+="");if(arguments.length<2)return(r=this.tween(r))&&r._value;if(null==e)return this.tween(r,null);if("function"!=typeof e)throw new Error;return this.tween(r,function(n,e,t){function r(){var r=this,o=e.apply(r,arguments);return o&&function(e){r.style.setProperty(n,o(e),t)}}return r._value=e,r}(n,e,null==t?"":t))},text:function(n){return this.tween("text","function"==typeof n?function(n){return function(){var e=n(this);this.textContent=null==e?"":e}}(bt(this,"text",n)):function(n){return function(){this.textContent=n}}(null==n?"":n+""))},remove:function(){return this.on("end.remove",(n=this._id,function(){var e=this.parentNode;for(var t in this.__transition)if(+t!==n)return;e&&e.removeChild(this)}));var n},tween:function(n,e){var t=this._id;if(n+="",arguments.length<2){for(var r,o=ht(this.node(),t).tween,i=0,a=o.length;i<a;++i)if((r=o[i]).name===n)return r.value;return null}return this.each((null==e?function(n,e){var t,r;return function(){var o=lt(this,n),i=o.tween;if(i!==t)for(var a=0,f=(r=t=i).length;a<f;++a)if(r[a].name===e){(r=r.slice()).splice(a,1);break}o.tween=r}}:function(n,e,t){var r,o;if("function"!=typeof t)throw new Error;return function(){var i=lt(this,n),a=i.tween;if(a!==r){o=(r=a).slice();for(var f={name:e,value:t},c=0,s=o.length;c<s;++c)if(o[c].name===e){o[c]=f;break}c===s&&o.push(f)}i.tween=o}})(t,n,e))},delay:function(n){var e=this._id;return arguments.length?this.each(("function"==typeof n?function(n,e){return function(){ut(this,n).delay=+e.apply(this,arguments)}}:function(n,e){return e=+e,function(){ut(this,n).delay=e}})(e,n)):ht(this.node(),e).delay},duration:function(n){var e=this._id;return arguments.length?this.each(("function"==typeof n?function(n,e){return function(){lt(this,n).duration=+e.apply(this,arguments)}}:function(n,e){return e=+e,function(){lt(this,n).duration=e}})(e,n)):ht(this.node(),e).duration},ease:function(n){var e=this._id;return arguments.length?this.each(function(n,e){if("function"!=typeof e)throw new Error;return function(){lt(this,n).ease=e}}(e,n)):ht(this.node(),e).ease}};(function n(e){function t(n){return Math.pow(n,e)}return e=+e,t.exponent=n,t})(3),function n(e){function t(n){return 1-Math.pow(1-n,e)}return e=+e,t.exponent=n,t}(3),function n(e){function t(n){return((n*=2)<=1?Math.pow(n,e):2-Math.pow(2-n,e))/2}return e=+e,t.exponent=n,t}(3),Math.PI;(function n(e){function t(n){return n*n*((e+1)*n-e)}return e=+e,t.overshoot=n,t})(1.70158),function n(e){function t(n){return--n*n*((e+1)*n+e)+1}return e=+e,t.overshoot=n,t}(1.70158),function n(e){function t(n){return((n*=2)<1?n*n*((e+1)*n-e):(n-=2)*n*((e+1)*n+e)+2)/2}return e=+e,t.overshoot=n,t}(1.70158);var xt=2*Math.PI,wt=(function n(e,t){var r=Math.asin(1/(e=Math.max(1,e)))*(t/=xt);function o(n){return e*Math.pow(2,10*--n)*Math.sin((r-n)/t)}return o.amplitude=function(e){return n(e,t*xt)},o.period=function(t){return n(e,t)},o}(1,.3),function n(e,t){var r=Math.asin(1/(e=Math.max(1,e)))*(t/=xt);function o(n){return 1-e*Math.pow(2,-10*(n=+n))*Math.sin((n+r)/t)}return o.amplitude=function(e){return n(e,t*xt)},o.period=function(t){return n(e,t)},o}(1,.3),function n(e,t){var r=Math.asin(1/(e=Math.max(1,e)))*(t/=xt);function o(n){return((n=2*n-1)<0?e*Math.pow(2,10*n)*Math.sin((r-n)/t):2-e*Math.pow(2,-10*n)*Math.sin((r+n)/t))/2}return o.amplitude=function(e){return n(e,t*xt)},o.period=function(t){return n(e,t)},o}(1,.3),{time:null,delay:0,duration:250,ease:function(n){return((n*=2)<=1?n*n*n:(n-=2)*n*n+2)/2}});function Ft(n,e){for(var t;!(t=n.__transition)||!(t=t[e]);)if(!(n=n.parentNode))return wt.time=Xe(),wt;return t}rn.prototype.interrupt=function(n){return this.each(function(){dt(this,n)})},rn.prototype.transition=function(n){var e,t;n instanceof yt?(e=n._id,n=n._name):(e=mt(),(t=wt).time=Xe(),n=null==n?null:n+"");for(var r=this._groups,o=r.length,i=0;i<o;++i)for(var a,f=r[i],c=f.length,s=0;s<c;++s)(a=f[s])&&st(a,n,e,s,f,t||Ft(a,e));return new yt(r,this._parents,n,e)};["e","w"].map(At),["n","s"].map(At),["n","e","s","w","nw","ne","se","sw"].map(At);function At(n){return{type:n}}Math.cos,Math.sin,Math.PI,Math.max;Array.prototype.slice;var kt=Math.PI,Mt=2*kt,Ct=Mt-1e-6;function Et(){this._x0=this._y0=this._x1=this._y1=null,this._=""}function Tt(){return new Et}Et.prototype=Tt.prototype={constructor:Et,moveTo:function(n,e){this._+="M"+(this._x0=this._x1=+n)+","+(this._y0=this._y1=+e)},closePath:function(){null!==this._x1&&(this._x1=this._x0,this._y1=this._y0,this._+="Z")},lineTo:function(n,e){this._+="L"+(this._x1=+n)+","+(this._y1=+e)},quadraticCurveTo:function(n,e,t,r){this._+="Q"+ +n+","+ +e+","+(this._x1=+t)+","+(this._y1=+r)},bezierCurveTo:function(n,e,t,r,o,i){this._+="C"+ +n+","+ +e+","+ +t+","+ +r+","+(this._x1=+o)+","+(this._y1=+i)},arcTo:function(n,e,t,r,o){n=+n,e=+e,t=+t,r=+r,o=+o;var i=this._x1,a=this._y1,f=t-n,c=r-e,s=i-n,u=a-e,l=s*s+u*u;if(o<0)throw new Error("negative radius: "+o);if(null===this._x1)this._+="M"+(this._x1=n)+","+(this._y1=e);else if(l>1e-6)if(Math.abs(u*f-c*s)>1e-6&&o){var h=t-i,d=r-a,b=f*f+c*c,p=h*h+d*d,_=Math.sqrt(b),g=Math.sqrt(l),y=o*Math.tan((kt-Math.acos((b+l-p)/(2*_*g)))/2),m=y/g,v=y/_;Math.abs(m-1)>1e-6&&(this._+="L"+(n+m*s)+","+(e+m*u)),this._+="A"+o+","+o+",0,0,"+ +(u*h>s*d)+","+(this._x1=n+v*f)+","+(this._y1=e+v*c)}else this._+="L"+(this._x1=n)+","+(this._y1=e);else;},arc:function(n,e,t,r,o,i){n=+n,e=+e;var a=(t=+t)*Math.cos(r),f=t*Math.sin(r),c=n+a,s=e+f,u=1^i,l=i?r-o:o-r;if(t<0)throw new Error("negative radius: "+t);null===this._x1?this._+="M"+c+","+s:(Math.abs(this._x1-c)>1e-6||Math.abs(this._y1-s)>1e-6)&&(this._+="L"+c+","+s),t&&(l<0&&(l=l%Mt+Mt),l>Ct?this._+="A"+t+","+t+",0,1,"+u+","+(n-a)+","+(e-f)+"A"+t+","+t+",0,1,"+u+","+(this._x1=c)+","+(this._y1=s):l>1e-6&&(this._+="A"+t+","+t+",0,"+ +(l>=kt)+","+u+","+(this._x1=n+t*Math.cos(o))+","+(this._y1=e+t*Math.sin(o))))},rect:function(n,e,t,r){this._+="M"+(this._x0=this._x1=+n)+","+(this._y0=this._y1=+e)+"h"+ +t+"v"+ +r+"h"+-t+"Z"},toString:function(){return this._}};function Nt(){}function Dt(n,e){var t=new Nt;if(n instanceof Nt)n.each(function(n,e){t.set(e,n)});else if(Array.isArray(n)){var r,o=-1,i=n.length;if(null==e)for(;++o<i;)t.set(o,n[o]);else for(;++o<i;)t.set(e(r=n[o],o,n),r)}else if(n)for(var a in n)t.set(a,n[a]);return t}Nt.prototype=Dt.prototype={constructor:Nt,has:function(n){return"$"+n in this},get:function(n){return this["$"+n]},set:function(n,e){return this["$"+n]=e,this},remove:function(n){var e="$"+n;return e in this&&delete this[e]},clear:function(){for(var n in this)"$"===n[0]&&delete this[n]},keys:function(){var n=[];for(var e in this)"$"===e[0]&&n.push(e.slice(1));return n},values:function(){var n=[];for(var e in this)"$"===e[0]&&n.push(this[e]);return n},entries:function(){var n=[];for(var e in this)"$"===e[0]&&n.push({key:e.slice(1),value:this[e]});return n},size:function(){var n=0;for(var e in this)"$"===e[0]&&++n;return n},empty:function(){for(var n in this)if("$"===n[0])return!1;return!0},each:function(n){for(var e in this)"$"===e[0]&&n(this[e],e.slice(1),this)}};var St=Dt;function Pt(){}var Ut=St.prototype;function Bt(n,e){var t=new Pt;if(n instanceof Pt)n.each(function(n){t.add(n)});else if(n){var r=-1,o=n.length;if(null==e)for(;++r<o;)t.add(n[r]);else for(;++r<o;)t.add(e(n[r],r,n))}return t}Pt.prototype=Bt.prototype={constructor:Pt,has:Ut.has,add:function(n){return this["$"+(n+="")]=n,this},remove:Ut.remove,clear:Ut.clear,values:Ut.keys,size:Ut.size,empty:Ut.empty,each:Ut.each};Array.prototype.slice;var Lt={},Rt={},Ot=34,It=10,qt=13;function jt(n){return new Function("d","return {"+n.map(function(n,e){return JSON.stringify(n)+": d["+e+"]"}).join(",")+"}")}var zt=function(n){var e=new RegExp('["'+n+"\n\r]"),t=n.charCodeAt(0);function r(n,e){var r,o=[],i=n.length,a=0,f=0,c=i<=0,s=!1;function u(){if(c)return Rt;if(s)return s=!1,Lt;var e,r,o=a;if(n.charCodeAt(o)===Ot){for(;a++<i&&n.charCodeAt(a)!==Ot||n.charCodeAt(++a)===Ot;);return(e=a)>=i?c=!0:(r=n.charCodeAt(a++))===It?s=!0:r===qt&&(s=!0,n.charCodeAt(a)===It&&++a),n.slice(o+1,e-1).replace(/""/g,'"')}for(;a<i;){if((r=n.charCodeAt(e=a++))===It)s=!0;else if(r===qt)s=!0,n.charCodeAt(a)===It&&++a;else if(r!==t)continue;return n.slice(o,e)}return c=!0,n.slice(o,i)}for(n.charCodeAt(i-1)===It&&--i,n.charCodeAt(i-1)===qt&&--i;(r=u())!==Rt;){for(var l=[];r!==Lt&&r!==Rt;)l.push(r),r=u();e&&null==(l=e(l,f++))||o.push(l)}return o}function o(e){return e.map(i).join(n)}function i(n){return null==n?"":e.test(n+="")?'"'+n.replace(/"/g,'""')+'"':n}return{parse:function(n,e){var t,o,i=r(n,function(n,r){if(t)return t(n,r-1);o=n,t=e?function(n,e){var t=jt(n);return function(r,o){return e(t(r),o,n)}}(n,e):jt(n)});return i.columns=o||[],i},parseRows:r,format:function(e,t){return null==t&&(t=function(n){var e=Object.create(null),t=[];return n.forEach(function(n){for(var r in n)r in e||t.push(e[r]=r)}),t}(e)),[t.map(i).join(n)].concat(e.map(function(e){return t.map(function(n){return i(e[n])}).join(n)})).join("\n")},formatRows:function(n){return n.map(o).join("\n")}}},Ht=zt(","),Yt=Ht.parse,$t=(Ht.parseRows,Ht.format,Ht.formatRows,zt("\t")),Xt=$t.parse;$t.parseRows,$t.format,$t.formatRows;function Vt(n){if(!n.ok)throw new Error(n.status+" "+n.statusText);return n.text()}var Gt=function(n,e){return fetch(n,e).then(Vt)};function Zt(n){return function(e,t,r){return 2===arguments.length&&"function"==typeof t&&(r=t,t=void 0),Gt(e,t).then(function(e){return n(e,r)})}}Zt(Yt),Zt(Xt);function Wt(n){return function(e,t){return Gt(e,t).then(function(e){return(new DOMParser).parseFromString(e,n)})}}Wt("application/xml"),Wt("text/html"),Wt("image/svg+xml");function Qt(n,e,t,r){if(isNaN(e)||isNaN(t))return n;var o,i,a,f,c,s,u,l,h,d=n._root,b={data:r},p=n._x0,_=n._y0,g=n._x1,y=n._y1;if(!d)return n._root=b,n;for(;d.length;)if((s=e>=(i=(p+g)/2))?p=i:g=i,(u=t>=(a=(_+y)/2))?_=a:y=a,o=d,!(d=d[l=u<<1|s]))return o[l]=b,n;if(f=+n._x.call(null,d.data),c=+n._y.call(null,d.data),e===f&&t===c)return b.next=d,o?o[l]=b:n._root=b,n;do{o=o?o[l]=new Array(4):n._root=new Array(4),(s=e>=(i=(p+g)/2))?p=i:g=i,(u=t>=(a=(_+y)/2))?_=a:y=a}while((l=u<<1|s)==(h=(c>=a)<<1|f>=i));return o[h]=d,o[l]=b,n}var Jt=function(n,e,t,r,o){this.node=n,this.x0=e,this.y0=t,this.x1=r,this.y1=o};function Kt(n){return n[0]}function nr(n){return n[1]}function er(n,e,t){var r=new tr(null==e?Kt:e,null==t?nr:t,NaN,NaN,NaN,NaN);return null==n?r:r.addAll(n)}function tr(n,e,t,r,o,i){this._x=n,this._y=e,this._x0=t,this._y0=r,this._x1=o,this._y1=i,this._root=void 0}function rr(n){for(var e={data:n.data},t=e;n=n.next;)t=t.next={data:n.data};return e}var or=er.prototype=tr.prototype;or.copy=function(){var n,e,t=new tr(this._x,this._y,this._x0,this._y0,this._x1,this._y1),r=this._root;if(!r)return t;if(!r.length)return t._root=rr(r),t;for(n=[{source:r,target:t._root=new Array(4)}];r=n.pop();)for(var o=0;o<4;++o)(e=r.source[o])&&(e.length?n.push({source:e,target:r.target[o]=new Array(4)}):r.target[o]=rr(e));return t},or.add=function(n){var e=+this._x.call(null,n),t=+this._y.call(null,n);return Qt(this.cover(e,t),e,t,n)},or.addAll=function(n){var e,t,r,o,i=n.length,a=new Array(i),f=new Array(i),c=1/0,s=1/0,u=-1/0,l=-1/0;for(t=0;t<i;++t)isNaN(r=+this._x.call(null,e=n[t]))||isNaN(o=+this._y.call(null,e))||(a[t]=r,f[t]=o,r<c&&(c=r),r>u&&(u=r),o<s&&(s=o),o>l&&(l=o));for(u<c&&(c=this._x0,u=this._x1),l<s&&(s=this._y0,l=this._y1),this.cover(c,s).cover(u,l),t=0;t<i;++t)Qt(this,a[t],f[t],n[t]);return this},or.cover=function(n,e){if(isNaN(n=+n)||isNaN(e=+e))return this;var t=this._x0,r=this._y0,o=this._x1,i=this._y1;if(isNaN(t))o=(t=Math.floor(n))+1,i=(r=Math.floor(e))+1;else{if(!(t>n||n>o||r>e||e>i))return this;var a,f,c=o-t,s=this._root;switch(f=(e<(r+i)/2)<<1|n<(t+o)/2){case 0:do{(a=new Array(4))[f]=s,s=a}while(i=r+(c*=2),n>(o=t+c)||e>i);break;case 1:do{(a=new Array(4))[f]=s,s=a}while(i=r+(c*=2),(t=o-c)>n||e>i);break;case 2:do{(a=new Array(4))[f]=s,s=a}while(r=i-(c*=2),n>(o=t+c)||r>e);break;case 3:do{(a=new Array(4))[f]=s,s=a}while(r=i-(c*=2),(t=o-c)>n||r>e)}this._root&&this._root.length&&(this._root=s)}return this._x0=t,this._y0=r,this._x1=o,this._y1=i,this},or.data=function(){var n=[];return this.visit(function(e){if(!e.length)do{n.push(e.data)}while(e=e.next)}),n},or.extent=function(n){return arguments.length?this.cover(+n[0][0],+n[0][1]).cover(+n[1][0],+n[1][1]):isNaN(this._x0)?void 0:[[this._x0,this._y0],[this._x1,this._y1]]},or.find=function(n,e,t){var r,o,i,a,f,c,s,u=this._x0,l=this._y0,h=this._x1,d=this._y1,b=[],p=this._root;for(p&&b.push(new Jt(p,u,l,h,d)),null==t?t=1/0:(u=n-t,l=e-t,h=n+t,d=e+t,t*=t);c=b.pop();)if(!(!(p=c.node)||(o=c.x0)>h||(i=c.y0)>d||(a=c.x1)<u||(f=c.y1)<l))if(p.length){var _=(o+a)/2,g=(i+f)/2;b.push(new Jt(p[3],_,g,a,f),new Jt(p[2],o,g,_,f),new Jt(p[1],_,i,a,g),new Jt(p[0],o,i,_,g)),(s=(e>=g)<<1|n>=_)&&(c=b[b.length-1],b[b.length-1]=b[b.length-1-s],b[b.length-1-s]=c)}else{var y=n-+this._x.call(null,p.data),m=e-+this._y.call(null,p.data),v=y*y+m*m;if(v<t){var x=Math.sqrt(t=v);u=n-x,l=e-x,h=n+x,d=e+x,r=p.data}}return r},or.remove=function(n){if(isNaN(i=+this._x.call(null,n))||isNaN(a=+this._y.call(null,n)))return this;var e,t,r,o,i,a,f,c,s,u,l,h,d=this._root,b=this._x0,p=this._y0,_=this._x1,g=this._y1;if(!d)return this;if(d.length)for(;;){if((s=i>=(f=(b+_)/2))?b=f:_=f,(u=a>=(c=(p+g)/2))?p=c:g=c,e=d,!(d=d[l=u<<1|s]))return this;if(!d.length)break;(e[l+1&3]||e[l+2&3]||e[l+3&3])&&(t=e,h=l)}for(;d.data!==n;)if(r=d,!(d=d.next))return this;return(o=d.next)&&delete d.next,r?(o?r.next=o:delete r.next,this):e?(o?e[l]=o:delete e[l],(d=e[0]||e[1]||e[2]||e[3])&&d===(e[3]||e[2]||e[1]||e[0])&&!d.length&&(t?t[h]=d:this._root=d),this):(this._root=o,this)},or.removeAll=function(n){for(var e=0,t=n.length;e<t;++e)this.remove(n[e]);return this},or.root=function(){return this._root},or.size=function(){var n=0;return this.visit(function(e){if(!e.length)do{++n}while(e=e.next)}),n},or.visit=function(n){var e,t,r,o,i,a,f=[],c=this._root;for(c&&f.push(new Jt(c,this._x0,this._y0,this._x1,this._y1));e=f.pop();)if(!n(c=e.node,r=e.x0,o=e.y0,i=e.x1,a=e.y1)&&c.length){var s=(r+i)/2,u=(o+a)/2;(t=c[3])&&f.push(new Jt(t,s,u,i,a)),(t=c[2])&&f.push(new Jt(t,r,u,s,a)),(t=c[1])&&f.push(new Jt(t,s,o,i,u)),(t=c[0])&&f.push(new Jt(t,r,o,s,u))}return this},or.visitAfter=function(n){var e,t=[],r=[];for(this._root&&t.push(new Jt(this._root,this._x0,this._y0,this._x1,this._y1));e=t.pop();){var o=e.node;if(o.length){var i,a=e.x0,f=e.y0,c=e.x1,s=e.y1,u=(a+c)/2,l=(f+s)/2;(i=o[0])&&t.push(new Jt(i,a,f,u,l)),(i=o[1])&&t.push(new Jt(i,u,f,c,l)),(i=o[2])&&t.push(new Jt(i,a,l,u,s)),(i=o[3])&&t.push(new Jt(i,u,l,c,s))}r.push(e)}for(;e=r.pop();)n(e.node,e.x0,e.y0,e.x1,e.y1);return this},or.x=function(n){return arguments.length?(this._x=n,this):this._x},or.y=function(n){return arguments.length?(this._y=n,this):this._y};Math.PI,Math.sqrt(5);var ir=function(n,e){if((t=(n=e?n.toExponential(e-1):n.toExponential()).indexOf("e"))<0)return null;var t,r=n.slice(0,t);return[r.length>1?r[0]+r.slice(2):r,+n.slice(t+1)]},ar=function(n){return(n=ir(Math.abs(n)))?n[1]:NaN},fr=/^(?:(.)?([<>=^]))?([+\-( ])?([$#])?(0)?(\d+)?(,)?(\.\d+)?(~)?([a-z%])?$/i;function cr(n){return new sr(n)}function sr(n){if(!(e=fr.exec(n)))throw new Error("invalid format: "+n);var e;this.fill=e[1]||" ",this.align=e[2]||">",this.sign=e[3]||"-",this.symbol=e[4]||"",this.zero=!!e[5],this.width=e[6]&&+e[6],this.comma=!!e[7],this.precision=e[8]&&+e[8].slice(1),this.trim=!!e[9],this.type=e[10]||""}cr.prototype=sr.prototype,sr.prototype.toString=function(){return this.fill+this.align+this.sign+this.symbol+(this.zero?"0":"")+(null==this.width?"":Math.max(1,0|this.width))+(this.comma?",":"")+(null==this.precision?"":"."+Math.max(0,0|this.precision))+(this.trim?"~":"")+this.type};var ur,lr,hr=function(n){n:for(var e,t=n.length,r=1,o=-1;r<t;++r)switch(n[r]){case".":o=e=r;break;case"0":0===o&&(o=r),e=r;break;default:if(o>0){if(!+n[r])break n;o=0}}return o>0?n.slice(0,o)+n.slice(e+1):n},dr=function(n,e){var t=ir(n,e);if(!t)return n+"";var r=t[0],o=t[1];return o<0?"0."+new Array(-o).join("0")+r:r.length>o+1?r.slice(0,o+1)+"."+r.slice(o+1):r+new Array(o-r.length+2).join("0")},br={"%":function(n,e){return(100*n).toFixed(e)},b:function(n){return Math.round(n).toString(2)},c:function(n){return n+""},d:function(n){return Math.round(n).toString(10)},e:function(n,e){return n.toExponential(e)},f:function(n,e){return n.toFixed(e)},g:function(n,e){return n.toPrecision(e)},o:function(n){return Math.round(n).toString(8)},p:function(n,e){return dr(100*n,e)},r:dr,s:function(n,e){var t=ir(n,e);if(!t)return n+"";var r=t[0],o=t[1],i=o-(ur=3*Math.max(-8,Math.min(8,Math.floor(o/3))))+1,a=r.length;return i===a?r:i>a?r+new Array(i-a+1).join("0"):i>0?r.slice(0,i)+"."+r.slice(i):"0."+new Array(1-i).join("0")+ir(n,Math.max(0,e+i-1))[0]},X:function(n){return Math.round(n).toString(16).toUpperCase()},x:function(n){return Math.round(n).toString(16)}},pr=function(n){return n},_r=["y","z","a","f","p","n","µ","m","","k","M","G","T","P","E","Z","Y"];lr=function(n){var e,t,r=n.grouping&&n.thousands?(e=n.grouping,t=n.thousands,function(n,r){for(var o=n.length,i=[],a=0,f=e[0],c=0;o>0&&f>0&&(c+f+1>r&&(f=Math.max(1,r-c)),i.push(n.substring(o-=f,o+f)),!((c+=f+1)>r));)f=e[a=(a+1)%e.length];return i.reverse().join(t)}):pr,o=n.currency,i=n.decimal,a=n.numerals?function(n){return function(e){return e.replace(/[0-9]/g,function(e){return n[+e]})}}(n.numerals):pr,f=n.percent||"%";function c(n){var e=(n=cr(n)).fill,t=n.align,c=n.sign,s=n.symbol,u=n.zero,l=n.width,h=n.comma,d=n.precision,b=n.trim,p=n.type;"n"===p?(h=!0,p="g"):br[p]||(null==d&&(d=12),b=!0,p="g"),(u||"0"===e&&"="===t)&&(u=!0,e="0",t="=");var _="$"===s?o[0]:"#"===s&&/[boxX]/.test(p)?"0"+p.toLowerCase():"",g="$"===s?o[1]:/[%p]/.test(p)?f:"",y=br[p],m=/[defgprs%]/.test(p);function v(n){var o,f,s,v=_,x=g;if("c"===p)x=y(n)+x,n="";else{var w=(n=+n)<0;if(n=y(Math.abs(n),d),b&&(n=hr(n)),w&&0==+n&&(w=!1),v=(w?"("===c?c:"-":"-"===c||"("===c?"":c)+v,x=("s"===p?_r[8+ur/3]:"")+x+(w&&"("===c?")":""),m)for(o=-1,f=n.length;++o<f;)if(48>(s=n.charCodeAt(o))||s>57){x=(46===s?i+n.slice(o+1):n.slice(o))+x,n=n.slice(0,o);break}}h&&!u&&(n=r(n,1/0));var F=v.length+n.length+x.length,A=F<l?new Array(l-F+1).join(e):"";switch(h&&u&&(n=r(A+n,A.length?l-x.length:1/0),A=""),t){case"<":n=v+n+x+A;break;case"=":n=v+A+n+x;break;case"^":n=A.slice(0,F=A.length>>1)+v+n+x+A.slice(F);break;default:n=A+v+n+x}return a(n)}return d=null==d?6:/[gprs]/.test(p)?Math.max(1,Math.min(21,d)):Math.max(0,Math.min(20,d)),v.toString=function(){return n+""},v}return{format:c,formatPrefix:function(n,e){var t=c(((n=cr(n)).type="f",n)),r=3*Math.max(-8,Math.min(8,Math.floor(ar(e)/3))),o=Math.pow(10,-r),i=_r[8+r/3];return function(n){return t(o*n)+i}}}}({decimal:".",thousands:",",grouping:[3],currency:["$",""]}),lr.format,lr.formatPrefix;var gr=function(){return new yr};function yr(){this.reset()}yr.prototype={constructor:yr,reset:function(){this.s=this.t=0},add:function(n){vr(mr,n,this.t),vr(this,mr.s,this.s),this.s?this.t+=mr.t:this.s=mr.t},valueOf:function(){return this.s}};var mr=new yr;function vr(n,e,t){var r=n.s=e+t,o=r-e,i=r-o;n.t=e-i+(t-o)}var xr=1e-6,wr=Math.PI,Fr=wr/2,Ar=wr/4,kr=2*wr,Mr=wr/180,Cr=Math.abs,Er=Math.atan,Tr=Math.atan2,Nr=Math.cos,Dr=(Math.ceil,Math.exp),Sr=(Math.floor,Math.log),Pr=(Math.pow,Math.sin),Ur=(Math.sign,Math.sqrt),Br=Math.tan;function Lr(n){return n>1?0:n<-1?wr:Math.acos(n)}function Rr(n){return n>1?Fr:n<-1?-Fr:Math.asin(n)}function Or(){}gr(),gr();function Ir(n){var e=n[0],t=n[1],r=Nr(t);return[r*Nr(e),r*Pr(e),Pr(t)]}function qr(n,e){return[n[1]*e[2]-n[2]*e[1],n[2]*e[0]-n[0]*e[2],n[0]*e[1]-n[1]*e[0]]}function jr(n){var e=Ur(n[0]*n[0]+n[1]*n[1]+n[2]*n[2]);n[0]/=e,n[1]/=e,n[2]/=e}gr();function zr(n,e){return[Cr(n)>wr?n+Math.round(-n/kr)*kr:n,e]}zr.invert=zr;var Hr=function(){var n,e=[];return{point:function(e,t){n.push([e,t])},lineStart:function(){e.push(n=[])},lineEnd:Or,rejoin:function(){e.length>1&&e.push(e.pop().concat(e.shift()))},result:function(){var t=e;return e=[],n=null,t}}},Yr=function(n,e){return Cr(n[0]-e[0])<xr&&Cr(n[1]-e[1])<xr};function $r(n,e,t,r){this.x=n,this.z=e,this.o=t,this.e=r,this.v=!1,this.n=this.p=null}var Xr=function(n,e,t,r,o){var i,a,f=[],c=[];if(n.forEach(function(n){if(!((e=n.length-1)<=0)){var e,t,r=n[0],a=n[e];if(Yr(r,a)){for(o.lineStart(),i=0;i<e;++i)o.point((r=n[i])[0],r[1]);o.lineEnd()}else f.push(t=new $r(r,n,null,!0)),c.push(t.o=new $r(r,null,t,!1)),f.push(t=new $r(a,n,null,!1)),c.push(t.o=new $r(a,null,t,!0))}}),f.length){for(c.sort(e),Vr(f),Vr(c),i=0,a=c.length;i<a;++i)c[i].e=t=!t;for(var s,u,l=f[0];;){for(var h=l,d=!0;h.v;)if((h=h.n)===l)return;s=h.z,o.lineStart();do{if(h.v=h.o.v=!0,h.e){if(d)for(i=0,a=s.length;i<a;++i)o.point((u=s[i])[0],u[1]);else r(h.x,h.n.x,1,o);h=h.n}else{if(d)for(s=h.p.z,i=s.length-1;i>=0;--i)o.point((u=s[i])[0],u[1]);else r(h.x,h.p.x,-1,o);h=h.p}s=(h=h.o).z,d=!d}while(!h.v);o.lineEnd()}}};function Vr(n){if(e=n.length){for(var e,t,r=0,o=n[0];++r<e;)o.n=t=n[r],t.p=o,o=t;o.n=t=n[0],t.p=o}}var Gr=gr(),Zr=function(n,e){var t=e[0],r=e[1],o=Pr(r),i=[Pr(t),-Nr(t),0],a=0,f=0;Gr.reset(),1===o?r=Fr+xr:-1===o&&(r=-Fr-xr);for(var c=0,s=n.length;c<s;++c)if(l=(u=n[c]).length)for(var u,l,h=u[l-1],d=h[0],b=h[1]/2+Ar,p=Pr(b),_=Nr(b),g=0;g<l;++g,d=m,p=x,_=w,h=y){var y=u[g],m=y[0],v=y[1]/2+Ar,x=Pr(v),w=Nr(v),F=m-d,A=F>=0?1:-1,k=A*F,M=k>wr,C=p*x;if(Gr.add(Tr(C*A*Pr(k),_*w+C*Nr(k))),a+=M?F+A*kr:F,M^d>=t^m>=t){var E=qr(Ir(h),Ir(y));jr(E);var T=qr(i,E);jr(T);var N=(M^F>=0?-1:1)*Rr(T[2]);(r>N||r===N&&(E[0]||E[1]))&&(f+=M^F>=0?1:-1)}}return(a<-xr||a<xr&&Gr<-xr)^1&f},Wr=function(n,e,t,r){return function(o){var i,a,c,s=e(o),u=Hr(),l=e(u),h=!1,d={point:b,lineStart:_,lineEnd:g,polygonStart:function(){d.point=y,d.lineStart=m,d.lineEnd=v,a=[],i=[]},polygonEnd:function(){d.point=b,d.lineStart=_,d.lineEnd=g,a=f(a);var n=Zr(i,r);a.length?(h||(o.polygonStart(),h=!0),Xr(a,Jr,n,t,o)):n&&(h||(o.polygonStart(),h=!0),o.lineStart(),t(null,null,1,o),o.lineEnd()),h&&(o.polygonEnd(),h=!1),a=i=null},sphere:function(){o.polygonStart(),o.lineStart(),t(null,null,1,o),o.lineEnd(),o.polygonEnd()}};function b(e,t){n(e,t)&&o.point(e,t)}function p(n,e){s.point(n,e)}function _(){d.point=p,s.lineStart()}function g(){d.point=b,s.lineEnd()}function y(n,e){c.push([n,e]),l.point(n,e)}function m(){l.lineStart(),c=[]}function v(){y(c[0][0],c[0][1]),l.lineEnd();var n,e,t,r,f=l.clean(),s=u.result(),d=s.length;if(c.pop(),i.push(c),c=null,d)if(1&f){if((e=(t=s[0]).length-1)>0){for(h||(o.polygonStart(),h=!0),o.lineStart(),n=0;n<e;++n)o.point((r=t[n])[0],r[1]);o.lineEnd()}}else d>1&&2&f&&s.push(s.pop().concat(s.shift())),a.push(s.filter(Qr))}return d}};function Qr(n){return n.length>1}function Jr(n,e){return((n=n.x)[0]<0?n[1]-Fr-xr:Fr-n[1])-((e=e.x)[0]<0?e[1]-Fr-xr:Fr-e[1])}Wr(function(){return!0},function(n){var e,t=NaN,r=NaN,o=NaN;return{lineStart:function(){n.lineStart(),e=1},point:function(i,a){var f=i>0?wr:-wr,c=Cr(i-t);Cr(c-wr)<xr?(n.point(t,r=(r+a)/2>0?Fr:-Fr),n.point(o,r),n.lineEnd(),n.lineStart(),n.point(f,r),n.point(i,r),e=0):o!==f&&c>=wr&&(Cr(t-o)<xr&&(t-=o*xr),Cr(i-f)<xr&&(i-=f*xr),r=function(n,e,t,r){var o,i,a=Pr(n-t);return Cr(a)>xr?Er((Pr(e)*(i=Nr(r))*Pr(t)-Pr(r)*(o=Nr(e))*Pr(n))/(o*i*a)):(e+r)/2}(t,r,i,a),n.point(o,r),n.lineEnd(),n.lineStart(),n.point(f,r),e=0),n.point(t=i,r=a),o=f},lineEnd:function(){n.lineEnd(),t=r=NaN},clean:function(){return 2-e}}},function(n,e,t,r){var o;if(null==n)o=t*Fr,r.point(-wr,o),r.point(0,o),r.point(wr,o),r.point(wr,0),r.point(wr,-o),r.point(0,-o),r.point(-wr,-o),r.point(-wr,0),r.point(-wr,o);else if(Cr(n[0]-e[0])>xr){var i=n[0]<e[0]?wr:-wr;o=t*i/2,r.point(-i,o),r.point(0,o),r.point(i,o)}else r.point(e[0],e[1])},[-wr,-Fr]);gr();gr(),gr();function Kr(n){this._context=n}Kr.prototype={_radius:4.5,pointRadius:function(n){return this._radius=n,this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._context.closePath(),this._point=NaN},point:function(n,e){switch(this._point){case 0:this._context.moveTo(n,e),this._point=1;break;case 1:this._context.lineTo(n,e);break;default:this._context.moveTo(n+this._radius,e),this._context.arc(n,e,this._radius,0,kr)}},result:Or};gr();function no(){this._string=[]}function eo(n){return"m0,"+n+"a"+n+","+n+" 0 1,1 0,"+-2*n+"a"+n+","+n+" 0 1,1 0,"+2*n+"z"}no.prototype={_radius:4.5,_circle:eo(4.5),pointRadius:function(n){return(n=+n)!==this._radius&&(this._radius=n,this._circle=null),this},polygonStart:function(){this._line=0},polygonEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){0===this._line&&this._string.push("Z"),this._point=NaN},point:function(n,e){switch(this._point){case 0:this._string.push("M",n,",",e),this._point=1;break;case 1:this._string.push("L",n,",",e);break;default:null==this._circle&&(this._circle=eo(this._radius)),this._string.push("M",n,",",e,this._circle)}},result:function(){if(this._string.length){var n=this._string.join("");return this._string=[],n}return null}};function to(n){return function(e){var t=new ro;for(var r in n)t[r]=n[r];return t.stream=e,t}}function ro(){}ro.prototype={constructor:ro,point:function(n,e){this.stream.point(n,e)},sphere:function(){this.stream.sphere()},lineStart:function(){this.stream.lineStart()},lineEnd:function(){this.stream.lineEnd()},polygonStart:function(){this.stream.polygonStart()},polygonEnd:function(){this.stream.polygonEnd()}};Nr(30*Mr);to({point:function(n,e){this.stream.point(n*Mr,e*Mr)}});function oo(n){return function(e,t){var r=Nr(e),o=Nr(t),i=n(r*o);return[i*o*Pr(e),i*Pr(t)]}}function io(n){return function(e,t){var r=Ur(e*e+t*t),o=n(r),i=Pr(o),a=Nr(o);return[Tr(e*i,r*a),Rr(r&&t*i/r)]}}var ao=oo(function(n){return Ur(2/(1+n))});ao.invert=io(function(n){return 2*Rr(n/2)});var fo=oo(function(n){return(n=Lr(n))&&n/Pr(n)});fo.invert=io(function(n){return n});function co(n,e){return[n,Sr(Br((Fr+e)/2))]}co.invert=function(n,e){return[n,2*Er(Dr(e))-Fr]};function so(n,e){return[n,e]}so.invert=so;var uo=1.340264,lo=-.081106,ho=893e-6,bo=.003796,po=Ur(3)/2;function _o(n,e){var t=Rr(po*Pr(e)),r=t*t,o=r*r*r;return[n*Nr(t)/(po*(uo+3*lo*r+o*(7*ho+9*bo*r))),t*(uo+lo*r+o*(ho+bo*r))]}_o.invert=function(n,e){for(var t,r=e,o=r*r,i=o*o*o,a=0;a<12&&(i=(o=(r-=t=(r*(uo+lo*o+i*(ho+bo*o))-e)/(uo+3*lo*o+i*(7*ho+9*bo*o)))*r)*o*o,!(Cr(t)<1e-12));++a);return[po*n*(uo+3*lo*o+i*(7*ho+9*bo*o))/Nr(r),Rr(Pr(r)/po)]};function go(n,e){var t=Nr(e),r=Nr(n)*t;return[t*Pr(n)/r,Pr(e)/r]}go.invert=io(Er);function yo(n,e){var t=e*e,r=t*t;return[n*(.8707-.131979*t+r*(r*(.003971*t-.001529*r)-.013791)),e*(1.007226+t*(.015085+r*(.028874*t-.044475-.005916*r)))]}yo.invert=function(n,e){var t,r=e,o=25;do{var i=r*r,a=i*i;r-=t=(r*(1.007226+i*(.015085+a*(.028874*i-.044475-.005916*a)))-e)/(1.007226+i*(.045255+a*(.259866*i-.311325-.005916*11*a)))}while(Cr(t)>xr&&--o>0);return[n/(.8707+(i=r*r)*(i*(i*i*i*(.003971-.001529*i)-.013791)-.131979)),r]};function mo(n,e){return[Nr(e)*Pr(n),Pr(e)]}mo.invert=io(Rr);function vo(n,e){var t=Nr(e),r=1+Nr(n)*t;return[t*Pr(n)/r,Pr(e)/r]}vo.invert=io(function(n){return 2*Er(n)});function xo(n,e){return[Sr(Br((Fr+e)/2)),-n]}xo.invert=function(n,e){return[-e,2*Er(Dr(n))-Fr]};function wo(n){var e=0,t=n.children,r=t&&t.length;if(r)for(;--r>=0;)e+=t[r].value;else e=1;n.value=e}function Fo(n,e){var t,r,o,i,a,f=new Co(n),c=+n.value&&(f.value=n.value),s=[f];for(null==e&&(e=Ao);t=s.pop();)if(c&&(t.value=+t.data.value),(o=e(t.data))&&(a=o.length))for(t.children=new Array(a),i=a-1;i>=0;--i)s.push(r=t.children[i]=new Co(o[i])),r.parent=t,r.depth=t.depth+1;return f.eachBefore(Mo)}function Ao(n){return n.children}function ko(n){n.data=n.data.data}function Mo(n){var e=0;do{n.height=e}while((n=n.parent)&&n.height<++e)}function Co(n){this.data=n,this.depth=this.height=0,this.parent=null}Co.prototype=Fo.prototype={constructor:Co,count:function(){return this.eachAfter(wo)},each:function(n){var e,t,r,o,i=this,a=[i];do{for(e=a.reverse(),a=[];i=e.pop();)if(n(i),t=i.children)for(r=0,o=t.length;r<o;++r)a.push(t[r])}while(a.length);return this},eachAfter:function(n){for(var e,t,r,o=this,i=[o],a=[];o=i.pop();)if(a.push(o),e=o.children)for(t=0,r=e.length;t<r;++t)i.push(e[t]);for(;o=a.pop();)n(o);return this},eachBefore:function(n){for(var e,t,r=this,o=[r];r=o.pop();)if(n(r),e=r.children)for(t=e.length-1;t>=0;--t)o.push(e[t]);return this},sum:function(n){return this.eachAfter(function(e){for(var t=+n(e.data)||0,r=e.children,o=r&&r.length;--o>=0;)t+=r[o].value;e.value=t})},sort:function(n){return this.eachBefore(function(e){e.children&&e.children.sort(n)})},path:function(n){for(var e=this,t=function(n,e){if(n===e)return n;var t=n.ancestors(),r=e.ancestors(),o=null;for(n=t.pop(),e=r.pop();n===e;)o=n,n=t.pop(),e=r.pop();return o}(e,n),r=[e];e!==t;)e=e.parent,r.push(e);for(var o=r.length;n!==t;)r.splice(o,0,n),n=n.parent;return r},ancestors:function(){for(var n=this,e=[n];n=n.parent;)e.push(n);return e},descendants:function(){var n=[];return this.each(function(e){n.push(e)}),n},leaves:function(){var n=[];return this.eachBefore(function(e){e.children||n.push(e)}),n},links:function(){var n=this,e=[];return n.each(function(t){t!==n&&e.push({source:t.parent,target:t})}),e},copy:function(){return Fo(this).eachBefore(ko)}};Array.prototype.slice;var Eo=function(n,e,t,r,o){for(var i,a=n.children,f=-1,c=a.length,s=n.value&&(r-e)/n.value;++f<c;)(i=a[f]).y0=t,i.y1=o,i.x0=e,i.x1=e+=i.value*s};function To(n,e){this._=n,this.parent=null,this.children=null,this.A=null,this.a=this,this.z=0,this.m=0,this.c=0,this.s=0,this.t=null,this.i=e}To.prototype=Object.create(Co.prototype);var No=function(n,e,t,r,o){for(var i,a=n.children,f=-1,c=a.length,s=n.value&&(o-t)/n.value;++f<c;)(i=a[f]).x0=e,i.x1=r,i.y0=t,i.y1=t+=i.value*s},Do=(1+Math.sqrt(5))/2;function So(n,e,t,r,o,i){for(var a,f,c,s,u,l,h,d,b,p,_,g=[],y=e.children,m=0,v=0,x=y.length,w=e.value;m<x;){c=o-t,s=i-r;do{u=y[v++].value}while(!u&&v<x);for(l=h=u,_=u*u*(p=Math.max(s/c,c/s)/(w*n)),b=Math.max(h/_,_/l);v<x;++v){if(u+=f=y[v].value,f<l&&(l=f),f>h&&(h=f),_=u*u*p,(d=Math.max(h/_,_/l))>b){u-=f;break}b=d}g.push(a={value:u,dice:c<s,children:y.slice(m,v)}),a.dice?Eo(a,t,r,o,w?r+=s*u/w:i):No(a,t,r,w?t+=c*u/w:o,i),w-=u,m=v}return g}(function n(e){function t(n,t,r,o,i){So(e,n,t,r,o,i)}return t.ratio=function(e){return n((e=+e)>1?e:1)},t})(Do),function n(e){function t(n,t,r,o,i){if((a=n._squarify)&&a.ratio===e)for(var a,f,c,s,u,l=-1,h=a.length,d=n.value;++l<h;){for(c=(f=a[l]).children,s=f.value=0,u=c.length;s<u;++s)f.value+=c[s].value;f.dice?Eo(f,t,r,o,r+=(i-r)*f.value/d):No(f,t,r,t+=(o-t)*f.value/d,i),d-=f.value}else n._squarify=a=So(e,n,t,r,o,i),a.ratio=e}return t.ratio=function(e){return n((e=+e)>1?e:1)},t}(Do);var Po=function(){return Math.random()},Uo=(function n(e){function t(n,t){return n=null==n?0:+n,t=null==t?1:+t,1===arguments.length?(t=n,n=0):t-=n,function(){return e()*t+n}}return t.source=n,t}(Po),function n(e){function t(n,t){var r,o;return n=null==n?0:+n,t=null==t?1:+t,function(){var i;if(null!=r)i=r,r=null;else do{r=2*e()-1,i=2*e()-1,o=r*r+i*i}while(!o||o>1);return n+t*i*Math.sqrt(-2*Math.log(o)/o)}}return t.source=n,t}(Po)),Bo=(function n(e){function t(){var n=Uo.source(e).apply(this,arguments);return function(){return Math.exp(n())}}return t.source=n,t}(Po),function n(e){function t(n){return function(){for(var t=0,r=0;r<n;++r)t+=e();return t}}return t.source=n,t}(Po)),Lo=(function n(e){function t(n){var t=Bo.source(e)(n);return function(){return t()/n}}return t.source=n,t}(Po),function n(e){function t(n){return function(){return-Math.log(1-e())/n}}return t.source=n,t}(Po),Array.prototype);Lo.map,Lo.slice;var Ro=new Date,Oo=new Date;function Io(n,e,t,r){function o(e){return n(e=new Date(+e)),e}return o.floor=o,o.ceil=function(t){return n(t=new Date(t-1)),e(t,1),n(t),t},o.round=function(n){var e=o(n),t=o.ceil(n);return n-e<t-n?e:t},o.offset=function(n,t){return e(n=new Date(+n),null==t?1:Math.floor(t)),n},o.range=function(t,r,i){var a,f=[];if(t=o.ceil(t),i=null==i?1:Math.floor(i),!(t<r&&i>0))return f;do{f.push(a=new Date(+t)),e(t,i),n(t)}while(a<t&&t<r);return f},o.filter=function(t){return Io(function(e){if(e>=e)for(;n(e),!t(e);)e.setTime(e-1)},function(n,r){if(n>=n)if(r<0)for(;++r<=0;)for(;e(n,-1),!t(n););else for(;--r>=0;)for(;e(n,1),!t(n););})},t&&(o.count=function(e,r){return Ro.setTime(+e),Oo.setTime(+r),n(Ro),n(Oo),Math.floor(t(Ro,Oo))},o.every=function(n){return n=Math.floor(n),isFinite(n)&&n>0?n>1?o.filter(r?function(e){return r(e)%n==0}:function(e){return o.count(0,e)%n==0}):o:null}),o}var qo=Io(function(){},function(n,e){n.setTime(+n+e)},function(n,e){return e-n});qo.every=function(n){return n=Math.floor(n),isFinite(n)&&n>0?n>1?Io(function(e){e.setTime(Math.floor(e/n)*n)},function(e,t){e.setTime(+e+t*n)},function(e,t){return(t-e)/n}):qo:null};qo.range;var jo=6e4,zo=6048e5,Ho=Io(function(n){n.setTime(1e3*Math.floor(n/1e3))},function(n,e){n.setTime(+n+1e3*e)},function(n,e){return(e-n)/1e3},function(n){return n.getUTCSeconds()}),Yo=(Ho.range,Io(function(n){n.setTime(Math.floor(n/jo)*jo)},function(n,e){n.setTime(+n+e*jo)},function(n,e){return(e-n)/jo},function(n){return n.getMinutes()})),$o=(Yo.range,Io(function(n){var e=n.getTimezoneOffset()*jo%36e5;e<0&&(e+=36e5),n.setTime(36e5*Math.floor((+n-e)/36e5)+e)},function(n,e){n.setTime(+n+36e5*e)},function(n,e){return(e-n)/36e5},function(n){return n.getHours()})),Xo=($o.range,Io(function(n){n.setHours(0,0,0,0)},function(n,e){n.setDate(n.getDate()+e)},function(n,e){return(e-n-(e.getTimezoneOffset()-n.getTimezoneOffset())*jo)/864e5},function(n){return n.getDate()-1})),Vo=Xo;Xo.range;function Go(n){return Io(function(e){e.setDate(e.getDate()-(e.getDay()+7-n)%7),e.setHours(0,0,0,0)},function(n,e){n.setDate(n.getDate()+7*e)},function(n,e){return(e-n-(e.getTimezoneOffset()-n.getTimezoneOffset())*jo)/zo})}var Zo=Go(0),Wo=Go(1),Qo=Go(2),Jo=Go(3),Ko=Go(4),ni=Go(5),ei=Go(6),ti=(Zo.range,Wo.range,Qo.range,Jo.range,Ko.range,ni.range,ei.range,Io(function(n){n.setDate(1),n.setHours(0,0,0,0)},function(n,e){n.setMonth(n.getMonth()+e)},function(n,e){return e.getMonth()-n.getMonth()+12*(e.getFullYear()-n.getFullYear())},function(n){return n.getMonth()})),ri=(ti.range,Io(function(n){n.setMonth(0,1),n.setHours(0,0,0,0)},function(n,e){n.setFullYear(n.getFullYear()+e)},function(n,e){return e.getFullYear()-n.getFullYear()},function(n){return n.getFullYear()}));ri.every=function(n){return isFinite(n=Math.floor(n))&&n>0?Io(function(e){e.setFullYear(Math.floor(e.getFullYear()/n)*n),e.setMonth(0,1),e.setHours(0,0,0,0)},function(e,t){e.setFullYear(e.getFullYear()+t*n)}):null};var oi=ri,ii=(ri.range,Io(function(n){n.setUTCSeconds(0,0)},function(n,e){n.setTime(+n+e*jo)},function(n,e){return(e-n)/jo},function(n){return n.getUTCMinutes()})),ai=(ii.range,Io(function(n){n.setUTCMinutes(0,0,0)},function(n,e){n.setTime(+n+36e5*e)},function(n,e){return(e-n)/36e5},function(n){return n.getUTCHours()})),fi=(ai.range,Io(function(n){n.setUTCHours(0,0,0,0)},function(n,e){n.setUTCDate(n.getUTCDate()+e)},function(n,e){return(e-n)/864e5},function(n){return n.getUTCDate()-1})),ci=fi;fi.range;function si(n){return Io(function(e){e.setUTCDate(e.getUTCDate()-(e.getUTCDay()+7-n)%7),e.setUTCHours(0,0,0,0)},function(n,e){n.setUTCDate(n.getUTCDate()+7*e)},function(n,e){return(e-n)/zo})}var ui=si(0),li=si(1),hi=si(2),di=si(3),bi=si(4),pi=si(5),_i=si(6),gi=(ui.range,li.range,hi.range,di.range,bi.range,pi.range,_i.range,Io(function(n){n.setUTCDate(1),n.setUTCHours(0,0,0,0)},function(n,e){n.setUTCMonth(n.getUTCMonth()+e)},function(n,e){return e.getUTCMonth()-n.getUTCMonth()+12*(e.getUTCFullYear()-n.getUTCFullYear())},function(n){return n.getUTCMonth()})),yi=(gi.range,Io(function(n){n.setUTCMonth(0,1),n.setUTCHours(0,0,0,0)},function(n,e){n.setUTCFullYear(n.getUTCFullYear()+e)},function(n,e){return e.getUTCFullYear()-n.getUTCFullYear()},function(n){return n.getUTCFullYear()}));yi.every=function(n){return isFinite(n=Math.floor(n))&&n>0?Io(function(e){e.setUTCFullYear(Math.floor(e.getUTCFullYear()/n)*n),e.setUTCMonth(0,1),e.setUTCHours(0,0,0,0)},function(e,t){e.setUTCFullYear(e.getUTCFullYear()+t*n)}):null};var mi=yi;yi.range;function vi(n){if(0<=n.y&&n.y<100){var e=new Date(-1,n.m,n.d,n.H,n.M,n.S,n.L);return e.setFullYear(n.y),e}return new Date(n.y,n.m,n.d,n.H,n.M,n.S,n.L)}function xi(n){if(0<=n.y&&n.y<100){var e=new Date(Date.UTC(-1,n.m,n.d,n.H,n.M,n.S,n.L));return e.setUTCFullYear(n.y),e}return new Date(Date.UTC(n.y,n.m,n.d,n.H,n.M,n.S,n.L))}function wi(n){return{y:n,m:0,d:1,H:0,M:0,S:0,L:0}}var Fi,Ai,ki,Mi={"-":"",_:" ",0:"0"},Ci=/^\s*\d+/,Ei=/^%/,Ti=/[\\^$*+?|[\]().{}]/g;function Ni(n,e,t){var r=n<0?"-":"",o=(r?-n:n)+"",i=o.length;return r+(i<t?new Array(t-i+1).join(e)+o:o)}function Di(n){return n.replace(Ti,"\\$&")}function Si(n){return new RegExp("^(?:"+n.map(Di).join("|")+")","i")}function Pi(n){for(var e={},t=-1,r=n.length;++t<r;)e[n[t].toLowerCase()]=t;return e}function Ui(n,e,t){var r=Ci.exec(e.slice(t,t+1));return r?(n.w=+r[0],t+r[0].length):-1}function Bi(n,e,t){var r=Ci.exec(e.slice(t,t+1));return r?(n.u=+r[0],t+r[0].length):-1}function Li(n,e,t){var r=Ci.exec(e.slice(t,t+2));return r?(n.U=+r[0],t+r[0].length):-1}function Ri(n,e,t){var r=Ci.exec(e.slice(t,t+2));return r?(n.V=+r[0],t+r[0].length):-1}function Oi(n,e,t){var r=Ci.exec(e.slice(t,t+2));return r?(n.W=+r[0],t+r[0].length):-1}function Ii(n,e,t){var r=Ci.exec(e.slice(t,t+4));return r?(n.y=+r[0],t+r[0].length):-1}function qi(n,e,t){var r=Ci.exec(e.slice(t,t+2));return r?(n.y=+r[0]+(+r[0]>68?1900:2e3),t+r[0].length):-1}function ji(n,e,t){var r=/^(Z)|([+-]\d\d)(?::?(\d\d))?/.exec(e.slice(t,t+6));return r?(n.Z=r[1]?0:-(r[2]+(r[3]||"00")),t+r[0].length):-1}function zi(n,e,t){var r=Ci.exec(e.slice(t,t+2));return r?(n.m=r[0]-1,t+r[0].length):-1}function Hi(n,e,t){var r=Ci.exec(e.slice(t,t+2));return r?(n.d=+r[0],t+r[0].length):-1}function Yi(n,e,t){var r=Ci.exec(e.slice(t,t+3));return r?(n.m=0,n.d=+r[0],t+r[0].length):-1}function $i(n,e,t){var r=Ci.exec(e.slice(t,t+2));return r?(n.H=+r[0],t+r[0].length):-1}function Xi(n,e,t){var r=Ci.exec(e.slice(t,t+2));return r?(n.M=+r[0],t+r[0].length):-1}function Vi(n,e,t){var r=Ci.exec(e.slice(t,t+2));return r?(n.S=+r[0],t+r[0].length):-1}function Gi(n,e,t){var r=Ci.exec(e.slice(t,t+3));return r?(n.L=+r[0],t+r[0].length):-1}function Zi(n,e,t){var r=Ci.exec(e.slice(t,t+6));return r?(n.L=Math.floor(r[0]/1e3),t+r[0].length):-1}function Wi(n,e,t){var r=Ei.exec(e.slice(t,t+1));return r?t+r[0].length:-1}function Qi(n,e,t){var r=Ci.exec(e.slice(t));return r?(n.Q=+r[0],t+r[0].length):-1}function Ji(n,e,t){var r=Ci.exec(e.slice(t));return r?(n.Q=1e3*+r[0],t+r[0].length):-1}function Ki(n,e){return Ni(n.getDate(),e,2)}function na(n,e){return Ni(n.getHours(),e,2)}function ea(n,e){return Ni(n.getHours()%12||12,e,2)}function ta(n,e){return Ni(1+Vo.count(oi(n),n),e,3)}function ra(n,e){return Ni(n.getMilliseconds(),e,3)}function oa(n,e){return ra(n,e)+"000"}function ia(n,e){return Ni(n.getMonth()+1,e,2)}function aa(n,e){return Ni(n.getMinutes(),e,2)}function fa(n,e){return Ni(n.getSeconds(),e,2)}function ca(n){var e=n.getDay();return 0===e?7:e}function sa(n,e){return Ni(Zo.count(oi(n),n),e,2)}function ua(n,e){var t=n.getDay();return n=t>=4||0===t?Ko(n):Ko.ceil(n),Ni(Ko.count(oi(n),n)+(4===oi(n).getDay()),e,2)}function la(n){return n.getDay()}function ha(n,e){return Ni(Wo.count(oi(n),n),e,2)}function da(n,e){return Ni(n.getFullYear()%100,e,2)}function ba(n,e){return Ni(n.getFullYear()%1e4,e,4)}function pa(n){var e=n.getTimezoneOffset();return(e>0?"-":(e*=-1,"+"))+Ni(e/60|0,"0",2)+Ni(e%60,"0",2)}function _a(n,e){return Ni(n.getUTCDate(),e,2)}function ga(n,e){return Ni(n.getUTCHours(),e,2)}function ya(n,e){return Ni(n.getUTCHours()%12||12,e,2)}function ma(n,e){return Ni(1+ci.count(mi(n),n),e,3)}function va(n,e){return Ni(n.getUTCMilliseconds(),e,3)}function xa(n,e){return va(n,e)+"000"}function wa(n,e){return Ni(n.getUTCMonth()+1,e,2)}function Fa(n,e){return Ni(n.getUTCMinutes(),e,2)}function Aa(n,e){return Ni(n.getUTCSeconds(),e,2)}function ka(n){var e=n.getUTCDay();return 0===e?7:e}function Ma(n,e){return Ni(ui.count(mi(n),n),e,2)}function Ca(n,e){var t=n.getUTCDay();return n=t>=4||0===t?bi(n):bi.ceil(n),Ni(bi.count(mi(n),n)+(4===mi(n).getUTCDay()),e,2)}function Ea(n){return n.getUTCDay()}function Ta(n,e){return Ni(li.count(mi(n),n),e,2)}function Na(n,e){return Ni(n.getUTCFullYear()%100,e,2)}function Da(n,e){return Ni(n.getUTCFullYear()%1e4,e,4)}function Sa(){return"+0000"}function Pa(){return"%"}function Ua(n){return+n}function Ba(n){return Math.floor(+n/1e3)}!function(n){Fi=function(n){var e=n.dateTime,t=n.date,r=n.time,o=n.periods,i=n.days,a=n.shortDays,f=n.months,c=n.shortMonths,s=Si(o),u=Pi(o),l=Si(i),h=Pi(i),d=Si(a),b=Pi(a),p=Si(f),_=Pi(f),g=Si(c),y=Pi(c),m={a:function(n){return a[n.getDay()]},A:function(n){return i[n.getDay()]},b:function(n){return c[n.getMonth()]},B:function(n){return f[n.getMonth()]},c:null,d:Ki,e:Ki,f:oa,H:na,I:ea,j:ta,L:ra,m:ia,M:aa,p:function(n){return o[+(n.getHours()>=12)]},Q:Ua,s:Ba,S:fa,u:ca,U:sa,V:ua,w:la,W:ha,x:null,X:null,y:da,Y:ba,Z:pa,"%":Pa},v={a:function(n){return a[n.getUTCDay()]},A:function(n){return i[n.getUTCDay()]},b:function(n){return c[n.getUTCMonth()]},B:function(n){return f[n.getUTCMonth()]},c:null,d:_a,e:_a,f:xa,H:ga,I:ya,j:ma,L:va,m:wa,M:Fa,p:function(n){return o[+(n.getUTCHours()>=12)]},Q:Ua,s:Ba,S:Aa,u:ka,U:Ma,V:Ca,w:Ea,W:Ta,x:null,X:null,y:Na,Y:Da,Z:Sa,"%":Pa},x={a:function(n,e,t){var r=d.exec(e.slice(t));return r?(n.w=b[r[0].toLowerCase()],t+r[0].length):-1},A:function(n,e,t){var r=l.exec(e.slice(t));return r?(n.w=h[r[0].toLowerCase()],t+r[0].length):-1},b:function(n,e,t){var r=g.exec(e.slice(t));return r?(n.m=y[r[0].toLowerCase()],t+r[0].length):-1},B:function(n,e,t){var r=p.exec(e.slice(t));return r?(n.m=_[r[0].toLowerCase()],t+r[0].length):-1},c:function(n,t,r){return A(n,e,t,r)},d:Hi,e:Hi,f:Zi,H:$i,I:$i,j:Yi,L:Gi,m:zi,M:Xi,p:function(n,e,t){var r=s.exec(e.slice(t));return r?(n.p=u[r[0].toLowerCase()],t+r[0].length):-1},Q:Qi,s:Ji,S:Vi,u:Bi,U:Li,V:Ri,w:Ui,W:Oi,x:function(n,e,r){return A(n,t,e,r)},X:function(n,e,t){return A(n,r,e,t)},y:qi,Y:Ii,Z:ji,"%":Wi};function w(n,e){return function(t){var r,o,i,a=[],f=-1,c=0,s=n.length;for(t instanceof Date||(t=new Date(+t));++f<s;)37===n.charCodeAt(f)&&(a.push(n.slice(c,f)),null!=(o=Mi[r=n.charAt(++f)])?r=n.charAt(++f):o="e"===r?" ":"0",(i=e[r])&&(r=i(t,o)),a.push(r),c=f+1);return a.push(n.slice(c,f)),a.join("")}}function F(n,e){return function(t){var r,o,i=wi(1900);if(A(i,n,t+="",0)!=t.length)return null;if("Q"in i)return new Date(i.Q);if("p"in i&&(i.H=i.H%12+12*i.p),"V"in i){if(i.V<1||i.V>53)return null;"w"in i||(i.w=1),"Z"in i?(o=(r=xi(wi(i.y))).getUTCDay(),r=o>4||0===o?li.ceil(r):li(r),r=ci.offset(r,7*(i.V-1)),i.y=r.getUTCFullYear(),i.m=r.getUTCMonth(),i.d=r.getUTCDate()+(i.w+6)%7):(o=(r=e(wi(i.y))).getDay(),r=o>4||0===o?Wo.ceil(r):Wo(r),r=Vo.offset(r,7*(i.V-1)),i.y=r.getFullYear(),i.m=r.getMonth(),i.d=r.getDate()+(i.w+6)%7)}else("W"in i||"U"in i)&&("w"in i||(i.w="u"in i?i.u%7:"W"in i?1:0),o="Z"in i?xi(wi(i.y)).getUTCDay():e(wi(i.y)).getDay(),i.m=0,i.d="W"in i?(i.w+6)%7+7*i.W-(o+5)%7:i.w+7*i.U-(o+6)%7);return"Z"in i?(i.H+=i.Z/100|0,i.M+=i.Z%100,xi(i)):e(i)}}function A(n,e,t,r){for(var o,i,a=0,f=e.length,c=t.length;a<f;){if(r>=c)return-1;if(37===(o=e.charCodeAt(a++))){if(o=e.charAt(a++),!(i=x[o in Mi?e.charAt(a++):o])||(r=i(n,t,r))<0)return-1}else if(o!=t.charCodeAt(r++))return-1}return r}return m.x=w(t,m),m.X=w(r,m),m.c=w(e,m),v.x=w(t,v),v.X=w(r,v),v.c=w(e,v),{format:function(n){var e=w(n+="",m);return e.toString=function(){return n},e},parse:function(n){var e=F(n+="",vi);return e.toString=function(){return n},e},utcFormat:function(n){var e=w(n+="",v);return e.toString=function(){return n},e},utcParse:function(n){var e=F(n,xi);return e.toString=function(){return n},e}}}(n),Fi.format,Fi.parse,Ai=Fi.utcFormat,ki=Fi.utcParse}({dateTime:"%x, %X",date:"%-m/%-d/%Y",time:"%-I:%M:%S %p",periods:["AM","PM"],days:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],shortDays:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],months:["January","February","March","April","May","June","July","August","September","October","November","December"],shortMonths:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec"]});Date.prototype.toISOString||Ai("%Y-%m-%dT%H:%M:%S.%LZ");+new Date("2000-01-01T00:00:00.000Z")||ki("%Y-%m-%dT%H:%M:%S.%LZ");var La=function(n){for(var e=n.length/6|0,t=new Array(e),r=0;r<e;)t[r]="#"+n.slice(6*r,6*++r);return t},Ra=(La("1f77b4ff7f0e2ca02cd627289467bd8c564be377c27f7f7fbcbd2217becf"),La("7fc97fbeaed4fdc086ffff99386cb0f0027fbf5b17666666"),La("1b9e77d95f027570b3e7298a66a61ee6ab02a6761d666666"),La("a6cee31f78b4b2df8a33a02cfb9a99e31a1cfdbf6fff7f00cab2d66a3d9affff99b15928"),La("fbb4aeb3cde3ccebc5decbe4fed9a6ffffcce5d8bdfddaecf2f2f2"),La("b3e2cdfdcdaccbd5e8f4cae4e6f5c9fff2aef1e2cccccccc"),La("e41a1c377eb84daf4a984ea3ff7f00ffff33a65628f781bf999999"),La("66c2a5fc8d628da0cbe78ac3a6d854ffd92fe5c494b3b3b3"),La("8dd3c7ffffb3bebadafb807280b1d3fdb462b3de69fccde5d9d9d9bc80bdccebc5ffed6f"),function(n){return _e(n[n.length-1])});Ra(new Array(3).concat("d8b365f5f5f55ab4ac","a6611adfc27d80cdc1018571","a6611adfc27df5f5f580cdc1018571","8c510ad8b365f6e8c3c7eae55ab4ac01665e","8c510ad8b365f6e8c3f5f5f5c7eae55ab4ac01665e","8c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e","8c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e","5430058c510abf812ddfc27df6e8c3c7eae580cdc135978f01665e003c30","5430058c510abf812ddfc27df6e8c3f5f5f5c7eae580cdc135978f01665e003c30").map(La)),Ra(new Array(3).concat("af8dc3f7f7f77fbf7b","7b3294c2a5cfa6dba0008837","7b3294c2a5cff7f7f7a6dba0008837","762a83af8dc3e7d4e8d9f0d37fbf7b1b7837","762a83af8dc3e7d4e8f7f7f7d9f0d37fbf7b1b7837","762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b7837","762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b7837","40004b762a839970abc2a5cfe7d4e8d9f0d3a6dba05aae611b783700441b","40004b762a839970abc2a5cfe7d4e8f7f7f7d9f0d3a6dba05aae611b783700441b").map(La)),Ra(new Array(3).concat("e9a3c9f7f7f7a1d76a","d01c8bf1b6dab8e1864dac26","d01c8bf1b6daf7f7f7b8e1864dac26","c51b7de9a3c9fde0efe6f5d0a1d76a4d9221","c51b7de9a3c9fde0eff7f7f7e6f5d0a1d76a4d9221","c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221","c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221","8e0152c51b7dde77aef1b6dafde0efe6f5d0b8e1867fbc414d9221276419","8e0152c51b7dde77aef1b6dafde0eff7f7f7e6f5d0b8e1867fbc414d9221276419").map(La)),Ra(new Array(3).concat("998ec3f7f7f7f1a340","5e3c99b2abd2fdb863e66101","5e3c99b2abd2f7f7f7fdb863e66101","542788998ec3d8daebfee0b6f1a340b35806","542788998ec3d8daebf7f7f7fee0b6f1a340b35806","5427888073acb2abd2d8daebfee0b6fdb863e08214b35806","5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b35806","2d004b5427888073acb2abd2d8daebfee0b6fdb863e08214b358067f3b08","2d004b5427888073acb2abd2d8daebf7f7f7fee0b6fdb863e08214b358067f3b08").map(La)),Ra(new Array(3).concat("ef8a62f7f7f767a9cf","ca0020f4a58292c5de0571b0","ca0020f4a582f7f7f792c5de0571b0","b2182bef8a62fddbc7d1e5f067a9cf2166ac","b2182bef8a62fddbc7f7f7f7d1e5f067a9cf2166ac","b2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac","b2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac","67001fb2182bd6604df4a582fddbc7d1e5f092c5de4393c32166ac053061","67001fb2182bd6604df4a582fddbc7f7f7f7d1e5f092c5de4393c32166ac053061").map(La)),Ra(new Array(3).concat("ef8a62ffffff999999","ca0020f4a582bababa404040","ca0020f4a582ffffffbababa404040","b2182bef8a62fddbc7e0e0e09999994d4d4d","b2182bef8a62fddbc7ffffffe0e0e09999994d4d4d","b2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d","b2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d","67001fb2182bd6604df4a582fddbc7e0e0e0bababa8787874d4d4d1a1a1a","67001fb2182bd6604df4a582fddbc7ffffffe0e0e0bababa8787874d4d4d1a1a1a").map(La)),Ra(new Array(3).concat("fc8d59ffffbf91bfdb","d7191cfdae61abd9e92c7bb6","d7191cfdae61ffffbfabd9e92c7bb6","d73027fc8d59fee090e0f3f891bfdb4575b4","d73027fc8d59fee090ffffbfe0f3f891bfdb4575b4","d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4","d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4","a50026d73027f46d43fdae61fee090e0f3f8abd9e974add14575b4313695","a50026d73027f46d43fdae61fee090ffffbfe0f3f8abd9e974add14575b4313695").map(La)),Ra(new Array(3).concat("fc8d59ffffbf91cf60","d7191cfdae61a6d96a1a9641","d7191cfdae61ffffbfa6d96a1a9641","d73027fc8d59fee08bd9ef8b91cf601a9850","d73027fc8d59fee08bffffbfd9ef8b91cf601a9850","d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850","d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850","a50026d73027f46d43fdae61fee08bd9ef8ba6d96a66bd631a9850006837","a50026d73027f46d43fdae61fee08bffffbfd9ef8ba6d96a66bd631a9850006837").map(La)),Ra(new Array(3).concat("fc8d59ffffbf99d594","d7191cfdae61abdda42b83ba","d7191cfdae61ffffbfabdda42b83ba","d53e4ffc8d59fee08be6f59899d5943288bd","d53e4ffc8d59fee08bffffbfe6f59899d5943288bd","d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd","d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd","9e0142d53e4ff46d43fdae61fee08be6f598abdda466c2a53288bd5e4fa2","9e0142d53e4ff46d43fdae61fee08bffffbfe6f598abdda466c2a53288bd5e4fa2").map(La)),Ra(new Array(3).concat("e5f5f999d8c92ca25f","edf8fbb2e2e266c2a4238b45","edf8fbb2e2e266c2a42ca25f006d2c","edf8fbccece699d8c966c2a42ca25f006d2c","edf8fbccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45005824","f7fcfde5f5f9ccece699d8c966c2a441ae76238b45006d2c00441b").map(La)),Ra(new Array(3).concat("e0ecf49ebcda8856a7","edf8fbb3cde38c96c688419d","edf8fbb3cde38c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68856a7810f7c","edf8fbbfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d6e016b","f7fcfde0ecf4bfd3e69ebcda8c96c68c6bb188419d810f7c4d004b").map(La)),Ra(new Array(3).concat("e0f3dba8ddb543a2ca","f0f9e8bae4bc7bccc42b8cbe","f0f9e8bae4bc7bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc443a2ca0868ac","f0f9e8ccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe08589e","f7fcf0e0f3dbccebc5a8ddb57bccc44eb3d32b8cbe0868ac084081").map(La)),Ra(new Array(3).concat("fee8c8fdbb84e34a33","fef0d9fdcc8afc8d59d7301f","fef0d9fdcc8afc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59e34a33b30000","fef0d9fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301f990000","fff7ecfee8c8fdd49efdbb84fc8d59ef6548d7301fb300007f0000").map(La)),Ra(new Array(3).concat("ece2f0a6bddb1c9099","f6eff7bdc9e167a9cf02818a","f6eff7bdc9e167a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf1c9099016c59","f6eff7d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016450","fff7fbece2f0d0d1e6a6bddb67a9cf3690c002818a016c59014636").map(La)),Ra(new Array(3).concat("ece7f2a6bddb2b8cbe","f1eef6bdc9e174a9cf0570b0","f1eef6bdc9e174a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf2b8cbe045a8d","f1eef6d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0034e7b","fff7fbece7f2d0d1e6a6bddb74a9cf3690c00570b0045a8d023858").map(La)),Ra(new Array(3).concat("e7e1efc994c7dd1c77","f1eef6d7b5d8df65b0ce1256","f1eef6d7b5d8df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0dd1c77980043","f1eef6d4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125691003f","f7f4f9e7e1efd4b9dac994c7df65b0e7298ace125698004367001f").map(La)),Ra(new Array(3).concat("fde0ddfa9fb5c51b8a","feebe2fbb4b9f768a1ae017e","feebe2fbb4b9f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1c51b8a7a0177","feebe2fcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a0177","fff7f3fde0ddfcc5c0fa9fb5f768a1dd3497ae017e7a017749006a").map(La)),Ra(new Array(3).concat("edf8b17fcdbb2c7fb8","ffffcca1dab441b6c4225ea8","ffffcca1dab441b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c42c7fb8253494","ffffccc7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea80c2c84","ffffd9edf8b1c7e9b47fcdbb41b6c41d91c0225ea8253494081d58").map(La)),Ra(new Array(3).concat("f7fcb9addd8e31a354","ffffccc2e69978c679238443","ffffccc2e69978c67931a354006837","ffffccd9f0a3addd8e78c67931a354006837","ffffccd9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443005a32","ffffe5f7fcb9d9f0a3addd8e78c67941ab5d238443006837004529").map(La)),Ra(new Array(3).concat("fff7bcfec44fd95f0e","ffffd4fed98efe9929cc4c02","ffffd4fed98efe9929d95f0e993404","ffffd4fee391fec44ffe9929d95f0e993404","ffffd4fee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c028c2d04","ffffe5fff7bcfee391fec44ffe9929ec7014cc4c02993404662506").map(La)),Ra(new Array(3).concat("ffeda0feb24cf03b20","ffffb2fecc5cfd8d3ce31a1c","ffffb2fecc5cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cf03b20bd0026","ffffb2fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cb10026","ffffccffeda0fed976feb24cfd8d3cfc4e2ae31a1cbd0026800026").map(La)),Ra(new Array(3).concat("deebf79ecae13182bd","eff3ffbdd7e76baed62171b5","eff3ffbdd7e76baed63182bd08519c","eff3ffc6dbef9ecae16baed63182bd08519c","eff3ffc6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b5084594","f7fbffdeebf7c6dbef9ecae16baed64292c62171b508519c08306b").map(La)),Ra(new Array(3).concat("e5f5e0a1d99b31a354","edf8e9bae4b374c476238b45","edf8e9bae4b374c47631a354006d2c","edf8e9c7e9c0a1d99b74c47631a354006d2c","edf8e9c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45005a32","f7fcf5e5f5e0c7e9c0a1d99b74c47641ab5d238b45006d2c00441b").map(La)),Ra(new Array(3).concat("f0f0f0bdbdbd636363","f7f7f7cccccc969696525252","f7f7f7cccccc969696636363252525","f7f7f7d9d9d9bdbdbd969696636363252525","f7f7f7d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525","fffffff0f0f0d9d9d9bdbdbd969696737373525252252525000000").map(La)),Ra(new Array(3).concat("efedf5bcbddc756bb1","f2f0f7cbc9e29e9ac86a51a3","f2f0f7cbc9e29e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8756bb154278f","f2f0f7dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a34a1486","fcfbfdefedf5dadaebbcbddc9e9ac8807dba6a51a354278f3f007d").map(La)),Ra(new Array(3).concat("fee0d2fc9272de2d26","fee5d9fcae91fb6a4acb181d","fee5d9fcae91fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4ade2d26a50f15","fee5d9fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181d99000d","fff5f0fee0d2fcbba1fc9272fb6a4aef3b2ccb181da50f1567000d").map(La)),Ra(new Array(3).concat("fee6cefdae6be6550d","feeddefdbe85fd8d3cd94701","feeddefdbe85fd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3ce6550da63603","feeddefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d948018c2d04","fff5ebfee6cefdd0a2fdae6bfd8d3cf16913d94801a636037f2704").map(La)),Ue(ae(300,.5,0),ae(-240,.5,1)),Ue(ae(-100,.75,.35),ae(80,1.5,.8)),Ue(ae(260,.75,.35),ae(80,1.5,.8)),ae(),En(),Math.PI,Math.PI;function Oa(n){var e=n.length;return function(t){return n[Math.max(0,Math.min(e-1,Math.floor(t*e)))]}}Oa(La("44015444025645045745055946075a46085c460a5d460b5e470d60470e6147106347116447136548146748166848176948186a481a6c481b6d481c6e481d6f481f70482071482173482374482475482576482677482878482979472a7a472c7a472d7b472e7c472f7d46307e46327e46337f463480453581453781453882443983443a83443b84433d84433e85423f854240864241864142874144874045884046883f47883f48893e49893e4a893e4c8a3d4d8a3d4e8a3c4f8a3c508b3b518b3b528b3a538b3a548c39558c39568c38588c38598c375a8c375b8d365c8d365d8d355e8d355f8d34608d34618d33628d33638d32648e32658e31668e31678e31688e30698e306a8e2f6b8e2f6c8e2e6d8e2e6e8e2e6f8e2d708e2d718e2c718e2c728e2c738e2b748e2b758e2a768e2a778e2a788e29798e297a8e297b8e287c8e287d8e277e8e277f8e27808e26818e26828e26828e25838e25848e25858e24868e24878e23888e23898e238a8d228b8d228c8d228d8d218e8d218f8d21908d21918c20928c20928c20938c1f948c1f958b1f968b1f978b1f988b1f998a1f9a8a1e9b8a1e9c891e9d891f9e891f9f881fa0881fa1881fa1871fa28720a38620a48621a58521a68522a78522a88423a98324aa8325ab8225ac8226ad8127ad8128ae8029af7f2ab07f2cb17e2db27d2eb37c2fb47c31b57b32b67a34b67935b77937b87838b9773aba763bbb753dbc743fbc7340bd7242be7144bf7046c06f48c16e4ac16d4cc26c4ec36b50c46a52c56954c56856c66758c7655ac8645cc8635ec96260ca6063cb5f65cb5e67cc5c69cd5b6ccd5a6ece5870cf5773d05675d05477d1537ad1517cd2507fd34e81d34d84d44b86d54989d5488bd6468ed64590d74393d74195d84098d83e9bd93c9dd93ba0da39a2da37a5db36a8db34aadc32addc30b0dd2fb2dd2db5de2bb8de29bade28bddf26c0df25c2df23c5e021c8e020cae11fcde11dd0e11cd2e21bd5e21ad8e219dae319dde318dfe318e2e418e5e419e7e419eae51aece51befe51cf1e51df4e61ef6e620f8e621fbe723fde725")),Oa(La("00000401000501010601010802010902020b02020d03030f03031204041405041606051806051a07061c08071e0907200a08220b09240c09260d0a290e0b2b100b2d110c2f120d31130d34140e36150e38160f3b180f3d19103f1a10421c10441d11471e114920114b21114e22115024125325125527125829115a2a115c2c115f2d11612f116331116533106734106936106b38106c390f6e3b0f703d0f713f0f72400f74420f75440f764510774710784910784a10794c117a4e117b4f127b51127c52137c54137d56147d57157e59157e5a167e5c167f5d177f5f187f601880621980641a80651a80671b80681c816a1c816b1d816d1d816e1e81701f81721f817320817521817621817822817922827b23827c23827e24828025828125818326818426818627818827818928818b29818c29818e2a81902a81912b81932b80942c80962c80982d80992d809b2e7f9c2e7f9e2f7fa02f7fa1307ea3307ea5317ea6317da8327daa337dab337cad347cae347bb0357bb2357bb3367ab5367ab73779b83779ba3878bc3978bd3977bf3a77c03a76c23b75c43c75c53c74c73d73c83e73ca3e72cc3f71cd4071cf4070d0416fd2426fd3436ed5446dd6456cd8456cd9466bdb476adc4869de4968df4a68e04c67e24d66e34e65e44f64e55064e75263e85362e95462ea5661eb5760ec5860ed5a5fee5b5eef5d5ef05f5ef1605df2625df2645cf3655cf4675cf4695cf56b5cf66c5cf66e5cf7705cf7725cf8745cf8765cf9785df9795df97b5dfa7d5efa7f5efa815ffb835ffb8560fb8761fc8961fc8a62fc8c63fc8e64fc9065fd9266fd9467fd9668fd9869fd9a6afd9b6bfe9d6cfe9f6dfea16efea36ffea571fea772fea973feaa74feac76feae77feb078feb27afeb47bfeb67cfeb77efeb97ffebb81febd82febf84fec185fec287fec488fec68afec88cfeca8dfecc8ffecd90fecf92fed194fed395fed597fed799fed89afdda9cfddc9efddea0fde0a1fde2a3fde3a5fde5a7fde7a9fde9aafdebacfcecaefceeb0fcf0b2fcf2b4fcf4b6fcf6b8fcf7b9fcf9bbfcfbbdfcfdbf")),Oa(La("00000401000501010601010802010a02020c02020e03021004031204031405041706041907051b08051d09061f0a07220b07240c08260d08290e092b10092d110a30120a32140b34150b37160b39180c3c190c3e1b0c411c0c431e0c451f0c48210c4a230c4c240c4f260c51280b53290b552b0b572d0b592f0a5b310a5c320a5e340a5f3609613809623909633b09643d09653e0966400a67420a68440a68450a69470b6a490b6a4a0c6b4c0c6b4d0d6c4f0d6c510e6c520e6d540f6d550f6d57106e59106e5a116e5c126e5d126e5f136e61136e62146e64156e65156e67166e69166e6a176e6c186e6d186e6f196e71196e721a6e741a6e751b6e771c6d781c6d7a1d6d7c1d6d7d1e6d7f1e6c801f6c82206c84206b85216b87216b88226a8a226a8c23698d23698f24699025689225689326679526679727669827669a28659b29649d29649f2a63a02a63a22b62a32c61a52c60a62d60a82e5fa92e5eab2f5ead305dae305cb0315bb1325ab3325ab43359b63458b73557b93556ba3655bc3754bd3853bf3952c03a51c13a50c33b4fc43c4ec63d4dc73e4cc83f4bca404acb4149cc4248ce4347cf4446d04545d24644d34743d44842d54a41d74b3fd84c3ed94d3dda4e3cdb503bdd513ade5238df5337e05536e15635e25734e35933e45a31e55c30e65d2fe75e2ee8602de9612bea632aeb6429eb6628ec6726ed6925ee6a24ef6c23ef6e21f06f20f1711ff1731df2741cf3761bf37819f47918f57b17f57d15f67e14f68013f78212f78410f8850ff8870ef8890cf98b0bf98c0af98e09fa9008fa9207fa9407fb9606fb9706fb9906fb9b06fb9d07fc9f07fca108fca309fca50afca60cfca80dfcaa0ffcac11fcae12fcb014fcb216fcb418fbb61afbb81dfbba1ffbbc21fbbe23fac026fac228fac42afac62df9c72ff9c932f9cb35f8cd37f8cf3af7d13df7d340f6d543f6d746f5d949f5db4cf4dd4ff4df53f4e156f3e35af3e55df2e661f2e865f2ea69f1ec6df1ed71f1ef75f1f179f2f27df2f482f3f586f3f68af4f88ef5f992f6fa96f8fb9af9fc9dfafda1fcffa4")),Oa(La("0d088710078813078916078a19068c1b068d1d068e20068f2206902406912605912805922a05932c05942e05952f059631059733059735049837049938049a3a049a3c049b3e049c3f049c41049d43039e44039e46039f48039f4903a04b03a14c02a14e02a25002a25102a35302a35502a45601a45801a45901a55b01a55c01a65e01a66001a66100a76300a76400a76600a76700a86900a86a00a86c00a86e00a86f00a87100a87201a87401a87501a87701a87801a87a02a87b02a87d03a87e03a88004a88104a78305a78405a78606a68707a68808a68a09a58b0aa58d0ba58e0ca48f0da4910ea3920fa39410a29511a19613a19814a099159f9a169f9c179e9d189d9e199da01a9ca11b9ba21d9aa31e9aa51f99a62098a72197a82296aa2395ab2494ac2694ad2793ae2892b02991b12a90b22b8fb32c8eb42e8db52f8cb6308bb7318ab83289ba3388bb3488bc3587bd3786be3885bf3984c03a83c13b82c23c81c33d80c43e7fc5407ec6417dc7427cc8437bc9447aca457acb4679cc4778cc4977cd4a76ce4b75cf4c74d04d73d14e72d24f71d35171d45270d5536fd5546ed6556dd7566cd8576bd9586ada5a6ada5b69db5c68dc5d67dd5e66de5f65de6164df6263e06363e16462e26561e26660e3685fe4695ee56a5de56b5de66c5ce76e5be76f5ae87059e97158e97257ea7457eb7556eb7655ec7754ed7953ed7a52ee7b51ef7c51ef7e50f07f4ff0804ef1814df1834cf2844bf3854bf3874af48849f48948f58b47f58c46f68d45f68f44f79044f79143f79342f89441f89540f9973ff9983ef99a3efa9b3dfa9c3cfa9e3bfb9f3afba139fba238fca338fca537fca636fca835fca934fdab33fdac33fdae32fdaf31fdb130fdb22ffdb42ffdb52efeb72dfeb82cfeba2cfebb2bfebd2afebe2afec029fdc229fdc328fdc527fdc627fdc827fdca26fdcb26fccd25fcce25fcd025fcd225fbd324fbd524fbd724fad824fada24f9dc24f9dd25f8df25f8e125f7e225f7e425f6e626f6e826f5e926f5eb27f4ed27f3ee27f3f027f2f227f1f426f1f525f0f724f0f921")),Math.abs,Math.atan2,Math.cos,Math.max,Math.min,Math.sin,Math.sqrt;var Ia=1e-12,qa=Math.PI,ja=2*qa;function za(n){this._context=n}za.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._point=0},lineEnd:function(){(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(n,e){switch(n=+n,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(n,e):this._context.moveTo(n,e);break;case 1:this._point=2;default:this._context.lineTo(n,e)}}};var Ha=function(n){return new za(n)};$a(Ha);function Ya(n){this._curve=n}function $a(n){function e(e){return new Ya(n(e))}return e._curve=n,e}Ya.prototype={areaStart:function(){this._curve.areaStart()},areaEnd:function(){this._curve.areaEnd()},lineStart:function(){this._curve.lineStart()},lineEnd:function(){this._curve.lineEnd()},point:function(n,e){this._curve.point(e*Math.sin(n),e*-Math.cos(n))}};Array.prototype.slice;Math.sqrt(1/3);var Xa=Math.sin(qa/10)/Math.sin(7*qa/10),Va=(Math.sin(ja/10),Math.cos(ja/10),Math.sqrt(3),Math.sqrt(3),Math.sqrt(12),function(){});function Ga(n,e,t){n._context.bezierCurveTo((2*n._x0+n._x1)/3,(2*n._y0+n._y1)/3,(n._x0+2*n._x1)/3,(n._y0+2*n._y1)/3,(n._x0+4*n._x1+e)/6,(n._y0+4*n._y1+t)/6)}function Za(n){this._context=n}Za.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){switch(this._point){case 3:Ga(this,this._x1,this._y1);case 2:this._context.lineTo(this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(n,e){switch(n=+n,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(n,e):this._context.moveTo(n,e);break;case 1:this._point=2;break;case 2:this._point=3,this._context.lineTo((5*this._x0+this._x1)/6,(5*this._y0+this._y1)/6);default:Ga(this,n,e)}this._x0=this._x1,this._x1=n,this._y0=this._y1,this._y1=e}};function Wa(n){this._context=n}Wa.prototype={areaStart:Va,areaEnd:Va,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._y0=this._y1=this._y2=this._y3=this._y4=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x2,this._y2),this._context.closePath();break;case 2:this._context.moveTo((this._x2+2*this._x3)/3,(this._y2+2*this._y3)/3),this._context.lineTo((this._x3+2*this._x2)/3,(this._y3+2*this._y2)/3),this._context.closePath();break;case 3:this.point(this._x2,this._y2),this.point(this._x3,this._y3),this.point(this._x4,this._y4)}},point:function(n,e){switch(n=+n,e=+e,this._point){case 0:this._point=1,this._x2=n,this._y2=e;break;case 1:this._point=2,this._x3=n,this._y3=e;break;case 2:this._point=3,this._x4=n,this._y4=e,this._context.moveTo((this._x0+4*this._x1+n)/6,(this._y0+4*this._y1+e)/6);break;default:Ga(this,n,e)}this._x0=this._x1,this._x1=n,this._y0=this._y1,this._y1=e}};function Qa(n){this._context=n}Qa.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(n,e){switch(n=+n,e=+e,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3;var t=(this._x0+4*this._x1+n)/6,r=(this._y0+4*this._y1+e)/6;this._line?this._context.lineTo(t,r):this._context.moveTo(t,r);break;case 3:this._point=4;default:Ga(this,n,e)}this._x0=this._x1,this._x1=n,this._y0=this._y1,this._y1=e}};function Ja(n,e){this._basis=new Za(n),this._beta=e}Ja.prototype={lineStart:function(){this._x=[],this._y=[],this._basis.lineStart()},lineEnd:function(){var n=this._x,e=this._y,t=n.length-1;if(t>0)for(var r,o=n[0],i=e[0],a=n[t]-o,f=e[t]-i,c=-1;++c<=t;)r=c/t,this._basis.point(this._beta*n[c]+(1-this._beta)*(o+r*a),this._beta*e[c]+(1-this._beta)*(i+r*f));this._x=this._y=null,this._basis.lineEnd()},point:function(n,e){this._x.push(+n),this._y.push(+e)}};(function n(e){function t(n){return 1===e?new Za(n):new Ja(n,e)}return t.beta=function(e){return n(+e)},t})(.85);function Ka(n,e,t){n._context.bezierCurveTo(n._x1+n._k*(n._x2-n._x0),n._y1+n._k*(n._y2-n._y0),n._x2+n._k*(n._x1-e),n._y2+n._k*(n._y1-t),n._x2,n._y2)}function nf(n,e){this._context=n,this._k=(1-e)/6}nf.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:Ka(this,this._x1,this._y1)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(n,e){switch(n=+n,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(n,e):this._context.moveTo(n,e);break;case 1:this._point=2,this._x1=n,this._y1=e;break;case 2:this._point=3;default:Ka(this,n,e)}this._x0=this._x1,this._x1=this._x2,this._x2=n,this._y0=this._y1,this._y1=this._y2,this._y2=e}};(function n(e){function t(n){return new nf(n,e)}return t.tension=function(e){return n(+e)},t})(0);function ef(n,e){this._context=n,this._k=(1-e)/6}ef.prototype={areaStart:Va,areaEnd:Va,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(n,e){switch(n=+n,e=+e,this._point){case 0:this._point=1,this._x3=n,this._y3=e;break;case 1:this._point=2,this._context.moveTo(this._x4=n,this._y4=e);break;case 2:this._point=3,this._x5=n,this._y5=e;break;default:Ka(this,n,e)}this._x0=this._x1,this._x1=this._x2,this._x2=n,this._y0=this._y1,this._y1=this._y2,this._y2=e}};(function n(e){function t(n){return new ef(n,e)}return t.tension=function(e){return n(+e)},t})(0);function tf(n,e){this._context=n,this._k=(1-e)/6}tf.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(n,e){switch(n=+n,e=+e,this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:Ka(this,n,e)}this._x0=this._x1,this._x1=this._x2,this._x2=n,this._y0=this._y1,this._y1=this._y2,this._y2=e}};(function n(e){function t(n){return new tf(n,e)}return t.tension=function(e){return n(+e)},t})(0);function rf(n,e,t){var r=n._x1,o=n._y1,i=n._x2,a=n._y2;if(n._l01_a>Ia){var f=2*n._l01_2a+3*n._l01_a*n._l12_a+n._l12_2a,c=3*n._l01_a*(n._l01_a+n._l12_a);r=(r*f-n._x0*n._l12_2a+n._x2*n._l01_2a)/c,o=(o*f-n._y0*n._l12_2a+n._y2*n._l01_2a)/c}if(n._l23_a>Ia){var s=2*n._l23_2a+3*n._l23_a*n._l12_a+n._l12_2a,u=3*n._l23_a*(n._l23_a+n._l12_a);i=(i*s+n._x1*n._l23_2a-e*n._l12_2a)/u,a=(a*s+n._y1*n._l23_2a-t*n._l12_2a)/u}n._context.bezierCurveTo(r,o,i,a,n._x2,n._y2)}function of(n,e){this._context=n,this._alpha=e}of.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x2,this._y2);break;case 3:this.point(this._x2,this._y2)}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(n,e){if(n=+n,e=+e,this._point){var t=this._x2-n,r=this._y2-e;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(t*t+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(n,e):this._context.moveTo(n,e);break;case 1:this._point=2;break;case 2:this._point=3;default:rf(this,n,e)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=n,this._y0=this._y1,this._y1=this._y2,this._y2=e}};(function n(e){function t(n){return e?new of(n,e):new nf(n,0)}return t.alpha=function(e){return n(+e)},t})(.5);function af(n,e){this._context=n,this._alpha=e}af.prototype={areaStart:Va,areaEnd:Va,lineStart:function(){this._x0=this._x1=this._x2=this._x3=this._x4=this._x5=this._y0=this._y1=this._y2=this._y3=this._y4=this._y5=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){switch(this._point){case 1:this._context.moveTo(this._x3,this._y3),this._context.closePath();break;case 2:this._context.lineTo(this._x3,this._y3),this._context.closePath();break;case 3:this.point(this._x3,this._y3),this.point(this._x4,this._y4),this.point(this._x5,this._y5)}},point:function(n,e){if(n=+n,e=+e,this._point){var t=this._x2-n,r=this._y2-e;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(t*t+r*r,this._alpha))}switch(this._point){case 0:this._point=1,this._x3=n,this._y3=e;break;case 1:this._point=2,this._context.moveTo(this._x4=n,this._y4=e);break;case 2:this._point=3,this._x5=n,this._y5=e;break;default:rf(this,n,e)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=n,this._y0=this._y1,this._y1=this._y2,this._y2=e}};(function n(e){function t(n){return e?new af(n,e):new ef(n,0)}return t.alpha=function(e){return n(+e)},t})(.5);function ff(n,e){this._context=n,this._alpha=e}ff.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._x2=this._y0=this._y1=this._y2=NaN,this._l01_a=this._l12_a=this._l23_a=this._l01_2a=this._l12_2a=this._l23_2a=this._point=0},lineEnd:function(){(this._line||0!==this._line&&3===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(n,e){if(n=+n,e=+e,this._point){var t=this._x2-n,r=this._y2-e;this._l23_a=Math.sqrt(this._l23_2a=Math.pow(t*t+r*r,this._alpha))}switch(this._point){case 0:this._point=1;break;case 1:this._point=2;break;case 2:this._point=3,this._line?this._context.lineTo(this._x2,this._y2):this._context.moveTo(this._x2,this._y2);break;case 3:this._point=4;default:rf(this,n,e)}this._l01_a=this._l12_a,this._l12_a=this._l23_a,this._l01_2a=this._l12_2a,this._l12_2a=this._l23_2a,this._x0=this._x1,this._x1=this._x2,this._x2=n,this._y0=this._y1,this._y1=this._y2,this._y2=e}};(function n(e){function t(n){return e?new ff(n,e):new tf(n,0)}return t.alpha=function(e){return n(+e)},t})(.5);function cf(n){this._context=n}cf.prototype={areaStart:Va,areaEnd:Va,lineStart:function(){this._point=0},lineEnd:function(){this._point&&this._context.closePath()},point:function(n,e){n=+n,e=+e,this._point?this._context.lineTo(n,e):(this._point=1,this._context.moveTo(n,e))}};function sf(n){return n<0?-1:1}function uf(n,e,t){var r=n._x1-n._x0,o=e-n._x1,i=(n._y1-n._y0)/(r||o<0&&-0),a=(t-n._y1)/(o||r<0&&-0),f=(i*o+a*r)/(r+o);return(sf(i)+sf(a))*Math.min(Math.abs(i),Math.abs(a),.5*Math.abs(f))||0}function lf(n,e){var t=n._x1-n._x0;return t?(3*(n._y1-n._y0)/t-e)/2:e}function hf(n,e,t){var r=n._x0,o=n._y0,i=n._x1,a=n._y1,f=(i-r)/3;n._context.bezierCurveTo(r+f,o+f*e,i-f,a-f*t,i,a)}function df(n){this._context=n}function bf(n){this._context=new pf(n)}function pf(n){this._context=n}function _f(n){this._context=n}function gf(n){var e,t,r=n.length-1,o=new Array(r),i=new Array(r),a=new Array(r);for(o[0]=0,i[0]=2,a[0]=n[0]+2*n[1],e=1;e<r-1;++e)o[e]=1,i[e]=4,a[e]=4*n[e]+2*n[e+1];for(o[r-1]=2,i[r-1]=7,a[r-1]=8*n[r-1]+n[r],e=1;e<r;++e)t=o[e]/i[e-1],i[e]-=t,a[e]-=t*a[e-1];for(o[r-1]=a[r-1]/i[r-1],e=r-2;e>=0;--e)o[e]=(a[e]-o[e+1])/i[e];for(i[r-1]=(n[r]+o[r-1])/2,e=0;e<r-1;++e)i[e]=2*n[e+1]-o[e+1];return[o,i]}df.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x0=this._x1=this._y0=this._y1=this._t0=NaN,this._point=0},lineEnd:function(){switch(this._point){case 2:this._context.lineTo(this._x1,this._y1);break;case 3:hf(this,this._t0,lf(this,this._t0))}(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line=1-this._line},point:function(n,e){var t=NaN;if(e=+e,(n=+n)!==this._x1||e!==this._y1){switch(this._point){case 0:this._point=1,this._line?this._context.lineTo(n,e):this._context.moveTo(n,e);break;case 1:this._point=2;break;case 2:this._point=3,hf(this,lf(this,t=uf(this,n,e)),t);break;default:hf(this,this._t0,t=uf(this,n,e))}this._x0=this._x1,this._x1=n,this._y0=this._y1,this._y1=e,this._t0=t}}},(bf.prototype=Object.create(df.prototype)).point=function(n,e){df.prototype.point.call(this,e,n)},pf.prototype={moveTo:function(n,e){this._context.moveTo(e,n)},closePath:function(){this._context.closePath()},lineTo:function(n,e){this._context.lineTo(e,n)},bezierCurveTo:function(n,e,t,r,o,i){this._context.bezierCurveTo(e,n,r,t,i,o)}},_f.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=[],this._y=[]},lineEnd:function(){var n=this._x,e=this._y,t=n.length;if(t)if(this._line?this._context.lineTo(n[0],e[0]):this._context.moveTo(n[0],e[0]),2===t)this._context.lineTo(n[1],e[1]);else for(var r=gf(n),o=gf(e),i=0,a=1;a<t;++i,++a)this._context.bezierCurveTo(r[0][i],o[0][i],r[1][i],o[1][i],n[a],e[a]);(this._line||0!==this._line&&1===t)&&this._context.closePath(),this._line=1-this._line,this._x=this._y=null},point:function(n,e){this._x.push(+n),this._y.push(+e)}};function yf(n,e){this._context=n,this._t=e}yf.prototype={areaStart:function(){this._line=0},areaEnd:function(){this._line=NaN},lineStart:function(){this._x=this._y=NaN,this._point=0},lineEnd:function(){0<this._t&&this._t<1&&2===this._point&&this._context.lineTo(this._x,this._y),(this._line||0!==this._line&&1===this._point)&&this._context.closePath(),this._line>=0&&(this._t=1-this._t,this._line=1-this._line)},point:function(n,e){switch(n=+n,e=+e,this._point){case 0:this._point=1,this._line?this._context.lineTo(n,e):this._context.moveTo(n,e);break;case 1:this._point=2;default:if(this._t<=0)this._context.lineTo(this._x,e),this._context.lineTo(n,e);else{var t=this._x*(1-this._t)+n*this._t;this._context.lineTo(t,this._y),this._context.lineTo(t,e)}}this._x=n,this._y=e}};function mf(){this._=null}function vf(n){n.U=n.C=n.L=n.R=n.P=n.N=null}function xf(n,e){var t=e,r=e.R,o=t.U;o?o.L===t?o.L=r:o.R=r:n._=r,r.U=o,t.U=r,t.R=r.L,t.R&&(t.R.U=t),r.L=t}function wf(n,e){var t=e,r=e.L,o=t.U;o?o.L===t?o.L=r:o.R=r:n._=r,r.U=o,t.U=r,t.L=r.R,t.L&&(t.L.U=t),r.R=t}function Ff(n){for(;n.L;)n=n.L;return n}mf.prototype={constructor:mf,insert:function(n,e){var t,r,o;if(n){if(e.P=n,e.N=n.N,n.N&&(n.N.P=e),n.N=e,n.R){for(n=n.R;n.L;)n=n.L;n.L=e}else n.R=e;t=n}else this._?(n=Ff(this._),e.P=null,e.N=n,n.P=n.L=e,t=n):(e.P=e.N=null,this._=e,t=null);for(e.L=e.R=null,e.U=t,e.C=!0,n=e;t&&t.C;)t===(r=t.U).L?(o=r.R)&&o.C?(t.C=o.C=!1,r.C=!0,n=r):(n===t.R&&(xf(this,t),t=(n=t).U),t.C=!1,r.C=!0,wf(this,r)):(o=r.L)&&o.C?(t.C=o.C=!1,r.C=!0,n=r):(n===t.L&&(wf(this,t),t=(n=t).U),t.C=!1,r.C=!0,xf(this,r)),t=n.U;this._.C=!1},remove:function(n){n.N&&(n.N.P=n.P),n.P&&(n.P.N=n.N),n.N=n.P=null;var e,t,r,o=n.U,i=n.L,a=n.R;if(t=i?a?Ff(a):i:a,o?o.L===n?o.L=t:o.R=t:this._=t,i&&a?(r=t.C,t.C=n.C,t.L=i,i.U=t,t!==a?(o=t.U,t.U=n.U,n=t.R,o.L=n,t.R=a,a.U=t):(t.U=o,o=t,n=t.R)):(r=n.C,n=t),n&&(n.U=o),!r)if(n&&n.C)n.C=!1;else{do{if(n===this._)break;if(n===o.L){if((e=o.R).C&&(e.C=!1,o.C=!0,xf(this,o),e=o.R),e.L&&e.L.C||e.R&&e.R.C){e.R&&e.R.C||(e.L.C=!1,e.C=!0,wf(this,e),e=o.R),e.C=o.C,o.C=e.R.C=!1,xf(this,o),n=this._;break}}else if((e=o.L).C&&(e.C=!1,o.C=!0,wf(this,o),e=o.L),e.L&&e.L.C||e.R&&e.R.C){e.L&&e.L.C||(e.R.C=!1,e.C=!0,xf(this,e),e=o.L),e.C=o.C,o.C=e.L.C=!1,wf(this,o),n=this._;break}e.C=!0,n=o,o=o.U}while(!n.C);n&&(n.C=!1)}}};var Af=mf;function kf(n,e,t,r){var o=[null,null],i=Zf.push(o)-1;return o.left=n,o.right=e,t&&Cf(o,n,e,t),r&&Cf(o,e,n,r),Vf[n.index].halfedges.push(i),Vf[e.index].halfedges.push(i),o}function Mf(n,e,t){var r=[e,t];return r.left=n,r}function Cf(n,e,t,r){n[0]||n[1]?n.left===t?n[1]=r:n[0]=r:(n[0]=r,n.left=e,n.right=t)}function Ef(n,e,t,r,o){var i,a=n[0],f=n[1],c=a[0],s=a[1],u=0,l=1,h=f[0]-c,d=f[1]-s;if(i=e-c,h||!(i>0)){if(i/=h,h<0){if(i<u)return;i<l&&(l=i)}else if(h>0){if(i>l)return;i>u&&(u=i)}if(i=r-c,h||!(i<0)){if(i/=h,h<0){if(i>l)return;i>u&&(u=i)}else if(h>0){if(i<u)return;i<l&&(l=i)}if(i=t-s,d||!(i>0)){if(i/=d,d<0){if(i<u)return;i<l&&(l=i)}else if(d>0){if(i>l)return;i>u&&(u=i)}if(i=o-s,d||!(i<0)){if(i/=d,d<0){if(i>l)return;i>u&&(u=i)}else if(d>0){if(i<u)return;i<l&&(l=i)}return!(u>0||l<1)||(u>0&&(n[0]=[c+u*h,s+u*d]),l<1&&(n[1]=[c+l*h,s+l*d]),!0)}}}}}function Tf(n,e,t,r,o){var i=n[1];if(i)return!0;var a,f,c=n[0],s=n.left,u=n.right,l=s[0],h=s[1],d=u[0],b=u[1],p=(l+d)/2,_=(h+b)/2;if(b===h){if(p<e||p>=r)return;if(l>d){if(c){if(c[1]>=o)return}else c=[p,t];i=[p,o]}else{if(c){if(c[1]<t)return}else c=[p,o];i=[p,t]}}else if(f=_-(a=(l-d)/(b-h))*p,a<-1||a>1)if(l>d){if(c){if(c[1]>=o)return}else c=[(t-f)/a,t];i=[(o-f)/a,o]}else{if(c){if(c[1]<t)return}else c=[(o-f)/a,o];i=[(t-f)/a,t]}else if(h<b){if(c){if(c[0]>=r)return}else c=[e,a*e+f];i=[r,a*r+f]}else{if(c){if(c[0]<e)return}else c=[r,a*r+f];i=[e,a*e+f]}return n[0]=c,n[1]=i,!0}function Nf(n,e){var t=n.site,r=e.left,o=e.right;return t===o&&(o=r,r=t),o?Math.atan2(o[1]-r[1],o[0]-r[0]):(t===r?(r=e[1],o=e[0]):(r=e[0],o=e[1]),Math.atan2(r[0]-o[0],o[1]-r[1]))}function Df(n,e){return e[+(e.left!==n.site)]}function Sf(n,e){return e[+(e.left===n.site)]}var Pf,Uf=[];function Bf(){vf(this),this.x=this.y=this.arc=this.site=this.cy=null}function Lf(n){var e=n.P,t=n.N;if(e&&t){var r=e.site,o=n.site,i=t.site;if(r!==i){var a=o[0],f=o[1],c=r[0]-a,s=r[1]-f,u=i[0]-a,l=i[1]-f,h=2*(c*l-s*u);if(!(h>=-Qf)){var d=c*c+s*s,b=u*u+l*l,p=(l*d-s*b)/h,_=(c*b-u*d)/h,g=Uf.pop()||new Bf;g.arc=n,g.site=o,g.x=p+a,g.y=(g.cy=_+f)+Math.sqrt(p*p+_*_),n.circle=g;for(var y=null,m=Gf._;m;)if(g.y<m.y||g.y===m.y&&g.x<=m.x){if(!m.L){y=m.P;break}m=m.L}else{if(!m.R){y=m;break}m=m.R}Gf.insert(y,g),y||(Pf=g)}}}}function Rf(n){var e=n.circle;e&&(e.P||(Pf=e.N),Gf.remove(e),Uf.push(e),vf(e),n.circle=null)}var Of=[];function If(){vf(this),this.edge=this.site=this.circle=null}function qf(n){var e=Of.pop()||new If;return e.site=n,e}function jf(n){Rf(n),Xf.remove(n),Of.push(n),vf(n)}function zf(n){var e=n.circle,t=e.x,r=e.cy,o=[t,r],i=n.P,a=n.N,f=[n];jf(n);for(var c=i;c.circle&&Math.abs(t-c.circle.x)<Wf&&Math.abs(r-c.circle.cy)<Wf;)i=c.P,f.unshift(c),jf(c),c=i;f.unshift(c),Rf(c);for(var s=a;s.circle&&Math.abs(t-s.circle.x)<Wf&&Math.abs(r-s.circle.cy)<Wf;)a=s.N,f.push(s),jf(s),s=a;f.push(s),Rf(s);var u,l=f.length;for(u=1;u<l;++u)s=f[u],c=f[u-1],Cf(s.edge,c.site,s.site,o);c=f[0],(s=f[l-1]).edge=kf(c.site,s.site,null,o),Lf(c),Lf(s)}function Hf(n){for(var e,t,r,o,i=n[0],a=n[1],f=Xf._;f;)if((r=Yf(f,a)-i)>Wf)f=f.L;else{if(!((o=i-$f(f,a))>Wf)){r>-Wf?(e=f.P,t=f):o>-Wf?(e=f,t=f.N):e=t=f;break}if(!f.R){e=f;break}f=f.R}!function(n){Vf[n.index]={site:n,halfedges:[]}}(n);var c=qf(n);if(Xf.insert(e,c),e||t){if(e===t)return Rf(e),t=qf(e.site),Xf.insert(c,t),c.edge=t.edge=kf(e.site,c.site),Lf(e),void Lf(t);if(t){Rf(e),Rf(t);var s=e.site,u=s[0],l=s[1],h=n[0]-u,d=n[1]-l,b=t.site,p=b[0]-u,_=b[1]-l,g=2*(h*_-d*p),y=h*h+d*d,m=p*p+_*_,v=[(_*y-d*m)/g+u,(h*m-p*y)/g+l];Cf(t.edge,s,b,v),c.edge=kf(s,n,null,v),t.edge=kf(n,b,null,v),Lf(e),Lf(t)}else c.edge=kf(e.site,c.site)}}function Yf(n,e){var t=n.site,r=t[0],o=t[1],i=o-e;if(!i)return r;var a=n.P;if(!a)return-1/0;var f=(t=a.site)[0],c=t[1],s=c-e;if(!s)return f;var u=f-r,l=1/i-1/s,h=u/s;return l?(-h+Math.sqrt(h*h-2*l*(u*u/(-2*s)-c+s/2+o-i/2)))/l+r:(r+f)/2}function $f(n,e){var t=n.N;if(t)return Yf(t,e);var r=n.site;return r[1]===e?r[0]:1/0}var Xf,Vf,Gf,Zf,Wf=1e-6,Qf=1e-12;function Jf(n,e){return e[1]-n[1]||e[0]-n[0]}function Kf(n,e){var t,r,o,i=n.sort(Jf).pop();for(Zf=[],Vf=new Array(n.length),Xf=new Af,Gf=new Af;;)if(o=Pf,i&&(!o||i[1]<o.y||i[1]===o.y&&i[0]<o.x))i[0]===t&&i[1]===r||(Hf(i),t=i[0],r=i[1]),i=n.pop();else{if(!o)break;zf(o.arc)}if(function(){for(var n,e,t,r,o=0,i=Vf.length;o<i;++o)if((n=Vf[o])&&(r=(e=n.halfedges).length)){var a=new Array(r),f=new Array(r);for(t=0;t<r;++t)a[t]=t,f[t]=Nf(n,Zf[e[t]]);for(a.sort(function(n,e){return f[e]-f[n]}),t=0;t<r;++t)f[t]=e[a[t]];for(t=0;t<r;++t)e[t]=f[t]}}(),e){var a=+e[0][0],f=+e[0][1],c=+e[1][0],s=+e[1][1];!function(n,e,t,r){for(var o,i=Zf.length;i--;)Tf(o=Zf[i],n,e,t,r)&&Ef(o,n,e,t,r)&&(Math.abs(o[0][0]-o[1][0])>Wf||Math.abs(o[0][1]-o[1][1])>Wf)||delete Zf[i]}(a,f,c,s),function(n,e,t,r){var o,i,a,f,c,s,u,l,h,d,b,p,_=Vf.length,g=!0;for(o=0;o<_;++o)if(i=Vf[o]){for(a=i.site,f=(c=i.halfedges).length;f--;)Zf[c[f]]||c.splice(f,1);for(f=0,s=c.length;f<s;)b=(d=Sf(i,Zf[c[f]]))[0],p=d[1],l=(u=Df(i,Zf[c[++f%s]]))[0],h=u[1],(Math.abs(b-l)>Wf||Math.abs(p-h)>Wf)&&(c.splice(f,0,Zf.push(Mf(a,d,Math.abs(b-n)<Wf&&r-p>Wf?[n,Math.abs(l-n)<Wf?h:r]:Math.abs(p-r)<Wf&&t-b>Wf?[Math.abs(h-r)<Wf?l:t,r]:Math.abs(b-t)<Wf&&p-e>Wf?[t,Math.abs(l-t)<Wf?h:e]:Math.abs(p-e)<Wf&&b-n>Wf?[Math.abs(h-e)<Wf?l:n,e]:null))-1),++s);s&&(g=!1)}if(g){var y,m,v,x=1/0;for(o=0,g=null;o<_;++o)(i=Vf[o])&&(v=(y=(a=i.site)[0]-n)*y+(m=a[1]-e)*m)<x&&(x=v,g=i);if(g){var w=[n,e],F=[n,r],A=[t,r],k=[t,e];g.halfedges.push(Zf.push(Mf(a=g.site,w,F))-1,Zf.push(Mf(a,F,A))-1,Zf.push(Mf(a,A,k))-1,Zf.push(Mf(a,k,w))-1)}}for(o=0;o<_;++o)(i=Vf[o])&&(i.halfedges.length||delete Vf[o])}(a,f,c,s)}this.edges=Zf,this.cells=Vf,Xf=Gf=Zf=Vf=null}Kf.prototype={constructor:Kf,polygons:function(){var n=this.edges;return this.cells.map(function(e){var t=e.halfedges.map(function(t){return Df(e,n[t])});return t.data=e.site.data,t})},triangles:function(){var n=[],e=this.edges;return this.cells.forEach(function(t,r){if(i=(o=t.halfedges).length)for(var o,i,a,f,c,s,u=t.site,l=-1,h=e[o[i-1]],d=h.left===u?h.right:h.left;++l<i;)a=d,d=(h=e[o[l]]).left===u?h.right:h.left,a&&d&&r<a.index&&r<d.index&&(c=a,s=d,((f=u)[0]-s[0])*(c[1]-f[1])-(f[0]-c[0])*(s[1]-f[1])<0)&&n.push([u.data,a.data,d.data])}),n},links:function(){return this.edges.filter(function(n){return n.right}).map(function(n){return{source:n.left.data,target:n.right.data}})},find:function(n,e,t){for(var r,o,i=this,a=i._found||0,f=i.cells.length;!(o=i.cells[a]);)if(++a>=f)return null;var c=n-o.site[0],s=e-o.site[1],u=c*c+s*s;do{o=i.cells[r=a],a=null,o.halfedges.forEach(function(t){var r=i.edges[t],f=r.left;if(f!==o.site&&f||(f=r.right)){var c=n-f[0],s=e-f[1],l=c*c+s*s;l<u&&(u=l,a=f.index)}})}while(null!==a);return i._found=r,null==t||u<=t*t?o.site:null}};function nc(n,e,t){this.k=n,this.x=e,this.y=t}nc.prototype={constructor:nc,scale:function(n){return 1===n?this:new nc(this.k*n,this.x,this.y)},translate:function(n,e){return 0===n&0===e?this:new nc(this.k,this.x+this.k*n,this.y+this.k*e)},apply:function(n){return[n[0]*this.k+this.x,n[1]*this.k+this.y]},applyX:function(n){return n*this.k+this.x},applyY:function(n){return n*this.k+this.y},invert:function(n){return[(n[0]-this.x)/this.k,(n[1]-this.y)/this.k]},invertX:function(n){return(n-this.x)/this.k},invertY:function(n){return(n-this.y)/this.k},rescaleX:function(n){return n.copy().domain(n.range().map(this.invertX,this).map(n.invert,n))},rescaleY:function(n){return n.copy().domain(n.range().map(this.invertY,this).map(n.invert,n))},toString:function(){return"translate("+this.x+","+this.y+") scale("+this.k+")"}};new nc(1,0,0);nc.prototype;t.d(e,"ProvenanceTreeVisualization",function(){return rc});!function(){function n(n,e,t){var r,o;void 0===e&&(e="Unknown"),this._nodes={},this._mitt=(r=r||Object.create(null),{on:function(n,e){(r[n]||(r[n]=[])).push(e)},off:function(n,e){r[n]&&r[n].splice(r[n].indexOf(e)>>>0,1)},emit:function(n,e){(r[n]||[]).slice().map(function(n){n(e)})}}),this.application=n,this.root=t||{id:(o=(new Date).getTime(),"undefined"!=typeof performance&&"function"==typeof performance.now&&(o+=performance.now()),"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(n){var e=(o+16*Math.random())%16|0;return o=Math.floor(o/16),("x"===n?e:3&e|8).toString(16)})),label:"Root",metadata:{createdBy:e,createdOn:(new Date).getTime()},children:[],artifacts:{}},this.addNode(this.root),this._current=this.root}n.prototype.addNode=function(n){if(this._nodes[n.id])throw new Error("Node already added");this._nodes[n.id]=n,this._mitt.emit("nodeAdded",n)},n.prototype.getNode=function(n){if(!this._nodes[n])throw new Error("Node id not found");return this._nodes[n]},Object.defineProperty(n.prototype,"current",{get:function(){return this._current},set:function(n){if(!this._nodes[n.id])throw new Error("Node id not found");this._current=n,this._mitt.emit("currentChanged",n)},enumerable:!0,configurable:!0}),Object.defineProperty(n.prototype,"nodes",{get:function(){return this._nodes},enumerable:!0,configurable:!0}),n.prototype.emitNodeChangedEvent=function(n){if(!this._nodes[n.id])throw new Error("Node id not found");this._mitt.emit("nodeChanged",n)},n.prototype.on=function(n,e){this._mitt.on(n,e)},n.prototype.off=function(n,e){this._mitt.off(n,e)}}();function ec(n,e){return n.maxDescendantDepth>e.maxDescendantDepth?-1:n.maxDescendantDepth<e.maxDescendantDepth?1:0}function tc(){var n=5,e=50,t=[];var r=Object.assign(function(r,o){var i=r,a=o;i.leaves().forEach(function(n){n.ancestors().forEach(function(e){(!e.maxDescendantDepth||n.depth>e.maxDescendantDepth)&&(e.maxDescendantDepth=n.depth)})});var f=a;a.leaves().forEach(function(n){f.depth<n.depth&&(f=n)}),function n(e,r){e.xOffset=r,t[e.depth]=r,e.children&&e.leaves().sort(ec).forEach(function(o){if(void 0===o.xOffset){var i=Math.max.apply(null,t.slice(e.depth,o.depth+1));n(o,r>i?r:i+1)}}),e.parent&&void 0===e.parent.xOffset&&n(e.parent,r)}(f,0);var c=Math.max.apply(null,t),s=Math.max.apply(null,i.leaves().map(function(n){return n.depth}));return i.each(function(t){!function(t,r,o){t.x=0===r?n:n-n/r*t.xOffset,t.y=0===o?e:e/o*t.depth}(t,c,s)}),i},{size:function(t){return t?(n=+t[0],e=+t[1],r):[n,e]}});return r}var rc=function(){function n(n,e){var t=this;this.traverser=n,this.svg=on(e).append("svg").attr("viewBox","-10 -10 130 130").attr("style","width: 100%; height: 100%"),n.graph.on("currentChanged",function(){return t.update()}),this.update()}return n.prototype.update=function(){var n=this,e=Fo(this.traverser.graph.root),t=tc().size([50,100]),r=e;e.each(function(e){e.data===n.traverser.graph.current&&(r=e)});var o=t(e,r),i=o.descendants(),a=this.svg.selectAll("g.node").data(i,function(n){return n.data.id}),f=a.enter().append("g").attr("class","node").attr("transform",function(n){return"translate("+n.x+", "+n.y+")"}).on("click",function(e){return n.traverser.toStateNode(e.data.id)});f.append("circle").attr("r",2),f.append("text").text(function(n){return"parent"in n.data?n.data.label:""}).attr("style","font-size: 8px").attr("x",7).attr("y",3),f.merge(a).attr("class","node").filter(function(n){return 0===n.xOffset}).attr("class","node branch-active").filter(function(e){return e.data===n.traverser.graph.current}).attr("class","node branch-active node-active"),f.merge(a).transition().duration(500).attr("transform",function(n){return"translate("+n.x+", "+n.y+")"});var c=function(n){var e=[n.source,n.target],t=e[0],r=e[1];return"M"+t.x+","+t.y+"C"+t.x+","+(t.y+r.y)/2+" "+r.x+","+(t.y+r.y)/2+" "+r.x+","+r.y},s=this.svg.selectAll("path.link").data(o.links(),function(n){return n.target.data.id}),u=s.enter().insert("path","g").attr("d",c);s.merge(u).attr("class","link").filter(function(n){return 0===n.target.xOffset}).attr("class","link active"),s.merge(u).transition().duration(500).attr("d",c)},n}()}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,